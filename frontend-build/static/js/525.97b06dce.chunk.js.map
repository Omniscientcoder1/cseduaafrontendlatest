{"version":3,"file":"static/js/525.97b06dce.chunk.js","mappings":"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","sources":["../node_modules/@firebase/util/src/crypt.ts","../node_modules/@firebase/util/src/defaults.ts","../node_modules/@firebase/util/src/global.ts","../node_modules/@firebase/util/src/deferred.ts","../node_modules/@firebase/util/src/environment.ts","../node_modules/@firebase/util/src/errors.ts","../node_modules/@firebase/util/src/obj.ts","../node_modules/@firebase/util/src/query.ts","../node_modules/@firebase/util/src/subscribe.ts","../node_modules/@firebase/util/src/compat.ts","../node_modules/idb/build/wrap-idb-value.js","../node_modules/idb/build/index.js","../node_modules/@firebase/app/src/platformLoggerService.ts","../node_modules/@firebase/app/src/logger.ts","../node_modules/@firebase/app/src/constants.ts","../node_modules/@firebase/app/src/internal.ts","../node_modules/@firebase/app/src/errors.ts","../node_modules/@firebase/app/src/firebaseApp.ts","../node_modules/@firebase/app/src/api.ts","../node_modules/@firebase/app/src/indexeddb.ts","../node_modules/@firebase/app/src/heartbeatService.ts","../node_modules/@firebase/app/src/registerCoreComponents.ts","../node_modules/@firebase/app/src/index.ts","../node_modules/@firebase/component/src/component.ts","../node_modules/@firebase/component/src/constants.ts","../node_modules/@firebase/component/src/provider.ts","../node_modules/@firebase/component/src/component_container.ts","../node_modules/@firebase/logger/src/logger.ts","../node_modules/firebase/app/index.ts","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/@firebase/auth/src/core/errors.ts","../node_modules/@firebase/auth/src/core/util/log.ts","../node_modules/@firebase/auth/src/core/util/assert.ts","../node_modules/@firebase/auth/src/core/util/location.ts","../node_modules/@firebase/auth/src/core/util/delay.ts","../node_modules/@firebase/auth/src/core/util/navigator.ts","../node_modules/@firebase/auth/src/core/util/emulator.ts","../node_modules/@firebase/auth/src/core/util/fetch_provider.ts","../node_modules/@firebase/auth/src/api/errors.ts","../node_modules/@firebase/auth/src/api/index.ts","../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha.ts","../node_modules/@firebase/auth/src/api/authentication/recaptcha.ts","../node_modules/@firebase/auth/src/api/account_management/account.ts","../node_modules/@firebase/auth/src/core/util/time.ts","../node_modules/@firebase/auth/src/core/user/id_token_result.ts","../node_modules/@firebase/auth/src/core/user/invalidation.ts","../node_modules/@firebase/auth/src/core/user/proactive_refresh.ts","../node_modules/@firebase/auth/src/core/user/user_metadata.ts","../node_modules/@firebase/auth/src/core/user/reload.ts","../node_modules/@firebase/auth/src/api/authentication/token.ts","../node_modules/@firebase/auth/src/core/user/token_manager.ts","../node_modules/@firebase/auth/src/core/user/user_impl.ts","../node_modules/@firebase/auth/src/core/util/instantiator.ts","../node_modules/@firebase/auth/src/core/persistence/in_memory.ts","../node_modules/@firebase/auth/src/core/persistence/persistence_user_manager.ts","../node_modules/@firebase/auth/src/core/util/browser.ts","../node_modules/@firebase/auth/src/core/util/version.ts","../node_modules/@firebase/auth/src/core/auth/middleware.ts","../node_modules/@firebase/auth/src/api/password_policy/get_password_policy.ts","../node_modules/@firebase/auth/src/core/auth/password_policy_impl.ts","../node_modules/@firebase/auth/src/core/auth/auth_impl.ts","../node_modules/@firebase/auth/src/platform_browser/load_js.ts","../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_enterprise_verifier.ts","../node_modules/@firebase/auth/src/core/auth/emulator.ts","../node_modules/@firebase/auth/src/core/credentials/auth_credential.ts","../node_modules/@firebase/auth/src/api/account_management/email_and_password.ts","../node_modules/@firebase/auth/src/api/authentication/email_and_password.ts","../node_modules/@firebase/auth/src/api/authentication/email_link.ts","../node_modules/@firebase/auth/src/core/credentials/email.ts","../node_modules/@firebase/auth/src/api/authentication/idp.ts","../node_modules/@firebase/auth/src/core/credentials/oauth.ts","../node_modules/@firebase/auth/src/api/authentication/sms.ts","../node_modules/@firebase/auth/src/core/credentials/phone.ts","../node_modules/@firebase/auth/src/core/action_code_url.ts","../node_modules/@firebase/auth/src/core/providers/email.ts","../node_modules/@firebase/auth/src/core/providers/federated.ts","../node_modules/@firebase/auth/src/core/providers/oauth.ts","../node_modules/@firebase/auth/src/core/providers/facebook.ts","../node_modules/@firebase/auth/src/core/providers/google.ts","../node_modules/@firebase/auth/src/core/providers/github.ts","../node_modules/@firebase/auth/src/core/credentials/saml.ts","../node_modules/@firebase/auth/src/core/providers/twitter.ts","../node_modules/@firebase/auth/src/api/authentication/sign_up.ts","../node_modules/@firebase/auth/src/core/user/user_credential_impl.ts","../node_modules/@firebase/auth/src/core/strategies/anonymous.ts","../node_modules/@firebase/auth/src/mfa/mfa_error.ts","../node_modules/@firebase/auth/src/core/user/link_unlink.ts","../node_modules/@firebase/auth/src/core/user/reauthenticate.ts","../node_modules/@firebase/auth/src/core/strategies/credential.ts","../node_modules/@firebase/auth/src/api/account_management/mfa.ts","../node_modules/@firebase/auth/src/mfa/mfa_user.ts","../node_modules/@firebase/auth/src/core/persistence/index.ts","../node_modules/@firebase/auth/src/platform_browser/persistence/browser.ts","../node_modules/@firebase/auth/src/platform_browser/persistence/local_storage.ts","../node_modules/@firebase/auth/src/platform_browser/persistence/session_storage.ts","../node_modules/@firebase/auth/src/platform_browser/messagechannel/promise.ts","../node_modules/@firebase/auth/src/platform_browser/messagechannel/receiver.ts","../node_modules/@firebase/auth/src/core/util/event_id.ts","../node_modules/@firebase/auth/src/platform_browser/messagechannel/sender.ts","../node_modules/@firebase/auth/src/platform_browser/auth_window.ts","../node_modules/@firebase/auth/src/platform_browser/util/worker.ts","../node_modules/@firebase/auth/src/platform_browser/persistence/indexed_db.ts","../node_modules/@firebase/auth/src/api/authentication/mfa.ts","../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_loader.ts","../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_verifier.ts","../node_modules/@firebase/auth/src/platform_browser/strategies/phone.ts","../node_modules/@firebase/auth/src/platform_browser/providers/phone.ts","../node_modules/@firebase/auth/src/core/util/resolver.ts","../node_modules/@firebase/auth/src/core/strategies/idp.ts","../node_modules/@firebase/auth/src/core/strategies/abstract_popup_redirect_operation.ts","../node_modules/@firebase/auth/src/platform_browser/strategies/popup.ts","../node_modules/@firebase/auth/src/core/strategies/redirect.ts","../node_modules/@firebase/auth/src/platform_browser/strategies/redirect.ts","../node_modules/@firebase/auth/src/core/auth/auth_event_manager.ts","../node_modules/@firebase/auth/src/api/project_config/get_project_config.ts","../node_modules/@firebase/auth/src/core/util/validate_origin.ts","../node_modules/@firebase/auth/src/platform_browser/iframe/gapi.ts","../node_modules/@firebase/auth/src/platform_browser/iframe/iframe.ts","../node_modules/@firebase/auth/src/platform_browser/util/popup.ts","../node_modules/@firebase/auth/src/core/util/handler.ts","../node_modules/@firebase/auth/src/platform_browser/popup_redirect.ts","../node_modules/@firebase/auth/src/mfa/mfa_assertion.ts","../node_modules/@firebase/auth/src/platform_browser/mfa/assertions/phone.ts","../node_modules/@firebase/auth/src/mfa/assertions/totp.ts","../node_modules/@firebase/auth/src/core/auth/firebase_internal.ts","../node_modules/@firebase/auth/src/platform_browser/index.ts","../node_modules/@firebase/auth/src/core/auth/register.ts","../node_modules/@firebase/auth/src/core/auth/initialize.ts","../node_modules/@firebase/auth/src/core/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw new DecodeBase64StringError();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * An error encountered while decoding base64 string.\n */\nexport class DecodeBase64StringError extends Error {\n  readonly name = 'DecodeBase64StringError';\n}\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './global';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  /**\n   * Override Firebase's runtime environment detection and\n   * force the SDK to act as if it were in the specified environment.\n   */\n  forceEnvironment?: 'browser' | 'node';\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nexport const getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\nimport { getDefaults } from './defaults';\n\n/**\n * Type placeholder for `WorkerGlobalScope` from `webworker`\n */\ndeclare class WorkerGlobalScope {}\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') {\n    return true;\n  } else if (forceEnvironment === 'browser') {\n    return false;\n  }\n\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof window !== 'undefined' || isWebWorker();\n}\n\n/**\n * Detect Web Worker context\n */\nexport function isWebWorker(): boolean {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    typeof self !== 'undefined' &&\n    self instanceof WorkerGlobalScope\n  );\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    !!navigator.userAgent &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  try {\n    return typeof indexedDB === 'object';\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\nexport interface Observer<T> {\n  // Called once for each value in a stream of values.\n  next: NextFn<T>;\n\n  // A stream terminates by a single call to EITHER error() or complete().\n  error: ErrorFn;\n\n  // No events will be sent to next() once complete() is called.\n  complete: CompleteFn;\n}\n\nexport type PartialObserver<T> = Partial<Observer<T>>;\n\n// TODO: Support also Unsubscribe.unsubscribe?\nexport type Unsubscribe = () => void;\n\n/**\n * The Subscribe interface has two forms - passing the inline function\n * callbacks, or a object interface with callback properties.\n */\nexport interface Subscribe<T> {\n  (next?: NextFn<T>, error?: ErrorFn, complete?: CompleteFn): Unsubscribe;\n  (observer: PartialObserver<T>): Unsubscribe;\n}\n\nexport interface Observable<T> {\n  // Subscribe method\n  subscribe: Subscribe<T>;\n}\n\nexport type Executor<T> = (observer: Observer<T>) => void;\n\n/**\n * Helper to make a Subscribe function (just like Promise helps make a\n * Thenable).\n *\n * @param executor Function which can make calls to a single Observer\n *     as a proxy.\n * @param onNoObservers Callback when count of Observers goes to zero.\n */\nexport function createSubscribe<T>(\n  executor: Executor<T>,\n  onNoObservers?: Executor<T>\n): Subscribe<T> {\n  const proxy = new ObserverProxy<T>(executor, onNoObservers);\n  return proxy.subscribe.bind(proxy);\n}\n\n/**\n * Implement fan-out for any number of Observers attached via a subscribe\n * function.\n */\nclass ObserverProxy<T> implements Observer<T> {\n  private observers: Array<Observer<T>> | undefined = [];\n  private unsubscribes: Unsubscribe[] = [];\n  private onNoObservers: Executor<T> | undefined;\n  private observerCount = 0;\n  // Micro-task scheduling by calling task.then().\n  private task = Promise.resolve();\n  private finalized = false;\n  private finalError?: Error;\n\n  /**\n   * @param executor Function which can make calls to a single Observer\n   *     as a proxy.\n   * @param onNoObservers Callback when count of Observers goes to zero.\n   */\n  constructor(executor: Executor<T>, onNoObservers?: Executor<T>) {\n    this.onNoObservers = onNoObservers;\n    // Call the executor asynchronously so subscribers that are called\n    // synchronously after the creation of the subscribe function\n    // can still receive the very first value generated in the executor.\n    this.task\n      .then(() => {\n        executor(this);\n      })\n      .catch(e => {\n        this.error(e);\n      });\n  }\n\n  next(value: T): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.next(value);\n    });\n  }\n\n  error(error: Error): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.error(error);\n    });\n    this.close(error);\n  }\n\n  complete(): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.complete();\n    });\n    this.close();\n  }\n\n  /**\n   * Subscribe function that can be used to add an Observer to the fan-out list.\n   *\n   * - We require that no event is sent to a subscriber sychronously to their\n   *   call to subscribe().\n   */\n  subscribe(\n    nextOrObserver?: NextFn<T> | PartialObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ): Unsubscribe {\n    let observer: Observer<T>;\n\n    if (\n      nextOrObserver === undefined &&\n      error === undefined &&\n      complete === undefined\n    ) {\n      throw new Error('Missing Observer.');\n    }\n\n    // Assemble an Observer object when passed as callback functions.\n    if (\n      implementsAnyMethods(nextOrObserver as { [key: string]: unknown }, [\n        'next',\n        'error',\n        'complete'\n      ])\n    ) {\n      observer = nextOrObserver as Observer<T>;\n    } else {\n      observer = {\n        next: nextOrObserver as NextFn<T>,\n        error,\n        complete\n      } as Observer<T>;\n    }\n\n    if (observer.next === undefined) {\n      observer.next = noop as NextFn<T>;\n    }\n    if (observer.error === undefined) {\n      observer.error = noop as ErrorFn;\n    }\n    if (observer.complete === undefined) {\n      observer.complete = noop as CompleteFn;\n    }\n\n    const unsub = this.unsubscribeOne.bind(this, this.observers!.length);\n\n    // Attempt to subscribe to a terminated Observable - we\n    // just respond to the Observer with the final error or complete\n    // event.\n    if (this.finalized) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.task.then(() => {\n        try {\n          if (this.finalError) {\n            observer.error(this.finalError);\n          } else {\n            observer.complete();\n          }\n        } catch (e) {\n          // nothing\n        }\n        return;\n      });\n    }\n\n    this.observers!.push(observer as Observer<T>);\n\n    return unsub;\n  }\n\n  // Unsubscribe is synchronous - we guarantee that no events are sent to\n  // any unsubscribed Observer.\n  private unsubscribeOne(i: number): void {\n    if (this.observers === undefined || this.observers[i] === undefined) {\n      return;\n    }\n\n    delete this.observers[i];\n\n    this.observerCount -= 1;\n    if (this.observerCount === 0 && this.onNoObservers !== undefined) {\n      this.onNoObservers(this);\n    }\n  }\n\n  private forEachObserver(fn: (observer: Observer<T>) => void): void {\n    if (this.finalized) {\n      // Already closed by previous event....just eat the additional values.\n      return;\n    }\n\n    // Since sendOne calls asynchronously - there is no chance that\n    // this.observers will become undefined.\n    for (let i = 0; i < this.observers!.length; i++) {\n      this.sendOne(i, fn);\n    }\n  }\n\n  // Call the Observer via one of it's callback function. We are careful to\n  // confirm that the observe has not been unsubscribed since this asynchronous\n  // function had been queued.\n  private sendOne(i: number, fn: (observer: Observer<T>) => void): void {\n    // Execute the callback asynchronously\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      if (this.observers !== undefined && this.observers[i] !== undefined) {\n        try {\n          fn(this.observers[i]);\n        } catch (e) {\n          // Ignore exceptions raised in Observers or missing methods of an\n          // Observer.\n          // Log error to console. b/31404806\n          if (typeof console !== 'undefined' && console.error) {\n            console.error(e);\n          }\n        }\n      }\n    });\n  }\n\n  private close(err?: Error): void {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    if (err !== undefined) {\n      this.finalError = err;\n    }\n    // Proxy is no longer needed - garbage collect references\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      this.observers = undefined;\n      this.onNoObservers = undefined;\n    });\n  }\n}\n\n/** Turn synchronous function into one called asynchronously. */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(fn: Function, onError?: ErrorFn): Function {\n  return (...args: unknown[]) => {\n    Promise.resolve(true)\n      .then(() => {\n        fn(...args);\n      })\n      .catch((error: Error) => {\n        if (onError) {\n          onError(error);\n        }\n      });\n  };\n}\n\n/**\n * Return true if the object passed in implements any of the named methods.\n */\nfunction implementsAnyMethods(\n  obj: { [key: string]: unknown },\n  methods: string[]\n): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  for (const method of methods) {\n    if (method in obj && typeof obj[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction noop(): void {\n  // do nothing\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as vertexName } from '../../../packages/vertexai/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  [vertexName]: 'fire-vertex',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseServerApp\n} from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * @internal\n */\nexport const _serverApps = new Map<string, FirebaseServerApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  for (const serverApp of _serverApps.values()) {\n    _addComponent(serverApp as FirebaseServerAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\n *\n * @returns true if the provide object is of type FirebaseApp.\n *\n * @internal\n */\nexport function _isFirebaseApp(\n  obj: FirebaseApp | FirebaseOptions\n): obj is FirebaseApp {\n  return (obj as FirebaseApp).options !== undefined;\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\nexport function _isFirebaseServerApp(\n  obj: FirebaseApp | FirebaseServerApp\n): obj is FirebaseServerApp {\n  return (obj as FirebaseServerApp).settings !== undefined;\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  SERVER_APP_DELETED = 'server-app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete',\n  FINALIZATION_REGISTRY_NOT_SUPPORTED = 'finalization-registry-not-supported',\n  INVALID_SERVER_APP_ENVIRONMENT = 'invalid-server-app-environment'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call initializeApp() first',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}'\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.SERVER_APP_DELETED]: 'Firebase Server App has been deleted',\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]:\n    'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\n  [AppError.INVALID_SERVER_APP_ENVIRONMENT]:\n    'FirebaseServerApp is not for use in browser environments.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]: { appName?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  protected readonly _options: FirebaseOptions;\n  protected readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  protected _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseServerApp,\n  FirebaseOptions,\n  FirebaseAppSettings,\n  FirebaseServerAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\nimport {\n  _apps,\n  _components,\n  _isFirebaseApp,\n  _registerComponent,\n  _serverApps\n} from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport {\n  deepEqual,\n  getDefaultAppConfig,\n  isBrowser,\n  isWebWorker\n} from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseServerApp} instance.\n *\n * The `FirebaseServerApp` is similar to `FirebaseApp`, but is intended for execution in\n * server side rendering environments only. Initialization will fail if invoked from a\n * browser environment.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize an instance of `FirebaseServerApp`.\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeServerApp({\n *     apiKey: \"AIza....\",                             // Auth / General Use\n *     authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *     databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *     storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *     messagingSenderId: \"123456789\"                  // Cloud Messaging\n *   },\n *   {\n *    authIdToken: \"Your Auth ID Token\"\n *   });\n * ```\n *\n * @param options - `Firebase.AppOptions` to configure the app's services, or a\n *   a `FirebaseApp` instance which contains the `AppOptions` within.\n * @param config - `FirebaseServerApp` configuration.\n *\n * @returns The initialized `FirebaseServerApp`.\n *\n * @public\n */\nexport function initializeServerApp(\n  options: FirebaseOptions | FirebaseApp,\n  config: FirebaseServerAppSettings\n): FirebaseServerApp;\n\nexport function initializeServerApp(\n  _options: FirebaseOptions | FirebaseApp,\n  _serverAppConfig: FirebaseServerAppSettings\n): FirebaseServerApp {\n  if (isBrowser() && !isWebWorker()) {\n    // FirebaseServerApp isn't designed to be run in browsers.\n    throw ERROR_FACTORY.create(AppError.INVALID_SERVER_APP_ENVIRONMENT);\n  }\n\n  if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\n    _serverAppConfig.automaticDataCollectionEnabled = false;\n  }\n\n  let appOptions: FirebaseOptions;\n  if (_isFirebaseApp(_options)) {\n    appOptions = _options.options;\n  } else {\n    appOptions = _options;\n  }\n\n  // Build an app name based on a hash of the configuration options.\n  const nameObj = {\n    ..._serverAppConfig,\n    ...appOptions\n  };\n\n  // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n  // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n  if (nameObj.releaseOnDeref !== undefined) {\n    delete nameObj.releaseOnDeref;\n  }\n\n  const hashCode = (s: string): number => {\n    return [...s].reduce(\n      (hash, c) => (Math.imul(31, hash) + c.charCodeAt(0)) | 0,\n      0\n    );\n  };\n\n  if (_serverAppConfig.releaseOnDeref !== undefined) {\n    if (typeof FinalizationRegistry === 'undefined') {\n      throw ERROR_FACTORY.create(\n        AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED,\n        {}\n      );\n    }\n  }\n\n  const nameString = '' + hashCode(JSON.stringify(nameObj));\n  const existingApp = _serverApps.get(nameString) as FirebaseServerApp;\n  if (existingApp) {\n    (existingApp as FirebaseServerAppImpl).incRefCount(\n      _serverAppConfig.releaseOnDeref\n    );\n    return existingApp;\n  }\n\n  const container = new ComponentContainer(nameString);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseServerAppImpl(\n    appOptions,\n    _serverAppConfig,\n    nameString,\n    container\n  );\n\n  _serverApps.set(nameString, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  let cleanupProviders = false;\n  const name = app.name;\n  if (_apps.has(name)) {\n    cleanupProviders = true;\n    _apps.delete(name);\n  } else if (_serverApps.has(name)) {\n    const firebaseServerApp = app as FirebaseServerAppImpl;\n    if (firebaseServerApp.decRefCount() <= 0) {\n      _serverApps.delete(name);\n      cleanupProviders = true;\n    }\n  }\n\n  if (cleanupProviders) {\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME);\n    const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\n    // We already have the value but tx.done can throw,\n    // so we need to await it here to catch errors\n    await tx.done;\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\nimport { logger } from './logger';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (heartbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    try {\n      const platformLogger = this.container\n        .getProvider('platform-logger')\n        .getImmediate();\n\n      // This is the \"Firebase user agent\" string from the platform logger\n      // service, not the browser user agent.\n      const agent = platformLogger.getPlatformInfoString();\n      const date = getUTCDateString();\n      if (this._heartbeatsCache?.heartbeats == null) {\n        this._heartbeatsCache = await this._heartbeatsCachePromise;\n        // If we failed to construct a heartbeats cache, then return immediately.\n        if (this._heartbeatsCache?.heartbeats == null) {\n          return;\n        }\n      }\n      // Do not store a heartbeat if one is already stored for this day\n      // or if a header has already been sent today.\n      if (\n        this._heartbeatsCache.lastSentHeartbeatDate === date ||\n        this._heartbeatsCache.heartbeats.some(\n          singleDateHeartbeat => singleDateHeartbeat.date === date\n        )\n      ) {\n        return;\n      } else {\n        // There is no entry for this date. Create one.\n        this._heartbeatsCache.heartbeats.push({ date, agent });\n      }\n      // Remove entries older than 30 days.\n      this._heartbeatsCache.heartbeats =\n        this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\n          const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n          const now = Date.now();\n          return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n        });\n      return this._storage.overwrite(this._heartbeatsCache);\n    } catch (e) {\n      logger.warn(e);\n    }\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    try {\n      if (this._heartbeatsCache === null) {\n        await this._heartbeatsCachePromise;\n      }\n      // If it's still null or the array is empty, there is no data to send.\n      if (\n        this._heartbeatsCache?.heartbeats == null ||\n        this._heartbeatsCache.heartbeats.length === 0\n      ) {\n        return '';\n      }\n      const date = getUTCDateString();\n      // Extract as many heartbeats from the cache as will fit under the size limit.\n      const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n        this._heartbeatsCache.heartbeats\n      );\n      const headerString = base64urlEncodeWithoutPadding(\n        JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n      );\n      // Store last sent date to prevent another being logged/sent for the same day.\n      this._heartbeatsCache.lastSentHeartbeatDate = date;\n      if (unsentEntries.length > 0) {\n        // Store any unsent entries if they exist.\n        this._heartbeatsCache.heartbeats = unsentEntries;\n        // This seems more likely than emptying the array (below) to lead to some odd state\n        // since the cache isn't empty and this will be called again on the next request,\n        // and is probably safest if we await it.\n        await this._storage.overwrite(this._heartbeatsCache);\n      } else {\n        this._heartbeatsCache.heartbeats = [];\n        // Do not wait for this, to reduce latency.\n        void this._storage.overwrite(this._heartbeatsCache);\n      }\n      return headerString;\n    } catch (e) {\n      logger.warn(e);\n      return '';\n    }\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      if (idbHeartbeatObject?.heartbeats) {\n        return idbHeartbeatObject;\n      } else {\n        return { heartbeats: [] };\n      }\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorMap, User } from '../model/public_types';\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nimport { IdTokenMfaResponse } from '../api/authentication/mfa';\nimport { AppName } from '../model/auth';\nimport { AuthCredential } from './credentials';\n\n/**\n * Enumeration of Firebase Auth error codes.\n *\n * @internal\n */\nexport const enum AuthErrorCode {\n  ADMIN_ONLY_OPERATION = 'admin-restricted-operation',\n  ARGUMENT_ERROR = 'argument-error',\n  APP_NOT_AUTHORIZED = 'app-not-authorized',\n  APP_NOT_INSTALLED = 'app-not-installed',\n  CAPTCHA_CHECK_FAILED = 'captcha-check-failed',\n  CODE_EXPIRED = 'code-expired',\n  CORDOVA_NOT_READY = 'cordova-not-ready',\n  CORS_UNSUPPORTED = 'cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE = 'credential-already-in-use',\n  CREDENTIAL_MISMATCH = 'custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN = 'requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH = 'dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED = 'dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION = 'email-change-needs-verification',\n  EMAIL_EXISTS = 'email-already-in-use',\n  EMULATOR_CONFIG_FAILED = 'emulator-config-failed',\n  EXPIRED_OOB_CODE = 'expired-action-code',\n  EXPIRED_POPUP_REQUEST = 'cancelled-popup-request',\n  INTERNAL_ERROR = 'internal-error',\n  INVALID_API_KEY = 'invalid-api-key',\n  INVALID_APP_CREDENTIAL = 'invalid-app-credential',\n  INVALID_APP_ID = 'invalid-app-id',\n  INVALID_AUTH = 'invalid-user-token',\n  INVALID_AUTH_EVENT = 'invalid-auth-event',\n  INVALID_CERT_HASH = 'invalid-cert-hash',\n  INVALID_CODE = 'invalid-verification-code',\n  INVALID_CONTINUE_URI = 'invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION = 'invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN = 'invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN = 'invalid-dynamic-link-domain',\n  INVALID_EMAIL = 'invalid-email',\n  INVALID_EMULATOR_SCHEME = 'invalid-emulator-scheme',\n  INVALID_CREDENTIAL = 'invalid-credential',\n  INVALID_MESSAGE_PAYLOAD = 'invalid-message-payload',\n  INVALID_MFA_SESSION = 'invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID = 'invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER = 'invalid-oauth-provider',\n  INVALID_OOB_CODE = 'invalid-action-code',\n  INVALID_ORIGIN = 'unauthorized-domain',\n  INVALID_PASSWORD = 'wrong-password',\n  INVALID_PERSISTENCE = 'invalid-persistence-type',\n  INVALID_PHONE_NUMBER = 'invalid-phone-number',\n  INVALID_PROVIDER_ID = 'invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL = 'invalid-recipient-email',\n  INVALID_SENDER = 'invalid-sender',\n  INVALID_SESSION_INFO = 'invalid-verification-id',\n  INVALID_TENANT_ID = 'invalid-tenant-id',\n  LOGIN_BLOCKED = 'login-blocked',\n  MFA_INFO_NOT_FOUND = 'multi-factor-info-not-found',\n  MFA_REQUIRED = 'multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME = 'missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL = 'missing-app-credential',\n  MISSING_AUTH_DOMAIN = 'auth-domain-config-required',\n  MISSING_CODE = 'missing-verification-code',\n  MISSING_CONTINUE_URI = 'missing-continue-uri',\n  MISSING_IFRAME_START = 'missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID = 'missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE = 'missing-or-invalid-nonce',\n  MISSING_MFA_INFO = 'missing-multi-factor-info',\n  MISSING_MFA_SESSION = 'missing-multi-factor-session',\n  MISSING_PHONE_NUMBER = 'missing-phone-number',\n  MISSING_PASSWORD = 'missing-password',\n  MISSING_SESSION_INFO = 'missing-verification-id',\n  MODULE_DESTROYED = 'app-deleted',\n  NEED_CONFIRMATION = 'account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED = 'network-request-failed',\n  NULL_USER = 'null-user',\n  NO_AUTH_EVENT = 'no-auth-event',\n  NO_SUCH_PROVIDER = 'no-such-provider',\n  OPERATION_NOT_ALLOWED = 'operation-not-allowed',\n  OPERATION_NOT_SUPPORTED = 'operation-not-supported-in-this-environment',\n  POPUP_BLOCKED = 'popup-blocked',\n  POPUP_CLOSED_BY_USER = 'popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED = 'provider-already-linked',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER = 'redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING = 'redirect-operation-pending',\n  REJECTED_CREDENTIAL = 'rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED = 'second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED = 'maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH = 'tenant-id-mismatch',\n  TIMEOUT = 'timeout',\n  TOKEN_EXPIRED = 'user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER = 'too-many-requests',\n  UNAUTHORIZED_DOMAIN = 'unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR = 'unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE = 'unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION = 'unsupported-tenant-operation',\n  UNVERIFIED_EMAIL = 'unverified-email',\n  USER_CANCELLED = 'user-cancelled',\n  USER_DELETED = 'user-not-found',\n  USER_DISABLED = 'user-disabled',\n  USER_MISMATCH = 'user-mismatch',\n  USER_SIGNED_OUT = 'user-signed-out',\n  WEAK_PASSWORD = 'weak-password',\n  WEB_STORAGE_UNSUPPORTED = 'web-storage-unsupported',\n  ALREADY_INITIALIZED = 'already-initialized',\n  RECAPTCHA_NOT_ENABLED = 'recaptcha-not-enabled',\n  MISSING_RECAPTCHA_TOKEN = 'missing-recaptcha-token',\n  INVALID_RECAPTCHA_TOKEN = 'invalid-recaptcha-token',\n  INVALID_RECAPTCHA_ACTION = 'invalid-recaptcha-action',\n  MISSING_CLIENT_TYPE = 'missing-client-type',\n  MISSING_RECAPTCHA_VERSION = 'missing-recaptcha-version',\n  INVALID_RECAPTCHA_VERSION = 'invalid-recaptcha-version',\n  INVALID_REQ_TYPE = 'invalid-req-type',\n  UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION = 'unsupported-password-policy-schema-version',\n  PASSWORD_DOES_NOT_MEET_REQUIREMENTS = 'password-does-not-meet-requirements'\n}\n\nfunction _debugErrorMap(): ErrorMap<AuthErrorCode> {\n  return {\n    [AuthErrorCode.ADMIN_ONLY_OPERATION]:\n      'This operation is restricted to administrators only.',\n    [AuthErrorCode.ARGUMENT_ERROR]: '',\n    [AuthErrorCode.APP_NOT_AUTHORIZED]:\n      \"This app, identified by the domain where it's hosted, is not \" +\n      'authorized to use Firebase Authentication with the provided API key. ' +\n      'Review your key configuration in the Google API console.',\n    [AuthErrorCode.APP_NOT_INSTALLED]:\n      'The requested mobile application corresponding to the identifier (' +\n      'Android package name or iOS bundle ID) provided is not installed on ' +\n      'this device.',\n    [AuthErrorCode.CAPTCHA_CHECK_FAILED]:\n      'The reCAPTCHA response token provided is either invalid, expired, ' +\n      'already used or the domain associated with it does not match the list ' +\n      'of whitelisted domains.',\n    [AuthErrorCode.CODE_EXPIRED]:\n      'The SMS code has expired. Please re-send the verification code to try ' +\n      'again.',\n    [AuthErrorCode.CORDOVA_NOT_READY]: 'Cordova framework is not ready.',\n    [AuthErrorCode.CORS_UNSUPPORTED]: 'This browser is not supported.',\n    [AuthErrorCode.CREDENTIAL_ALREADY_IN_USE]:\n      'This credential is already associated with a different user account.',\n    [AuthErrorCode.CREDENTIAL_MISMATCH]:\n      'The custom token corresponds to a different audience.',\n    [AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN]:\n      'This operation is sensitive and requires recent authentication. Log in ' +\n      'again before retrying this request.',\n    [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]:\n      'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n      'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n      'starting any other Firebase SDK.',\n    [AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED]:\n      'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +\n      'conditions.',\n    [AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION]:\n      'Multi-factor users must always have a verified email.',\n    [AuthErrorCode.EMAIL_EXISTS]:\n      'The email address is already in use by another account.',\n    [AuthErrorCode.EMULATOR_CONFIG_FAILED]:\n      'Auth instance has already been used to make a network call. Auth can ' +\n      'no longer be configured to use the emulator. Try calling ' +\n      '\"connectAuthEmulator()\" sooner.',\n    [AuthErrorCode.EXPIRED_OOB_CODE]: 'The action code has expired.',\n    [AuthErrorCode.EXPIRED_POPUP_REQUEST]:\n      'This operation has been cancelled due to another conflicting popup being opened.',\n    [AuthErrorCode.INTERNAL_ERROR]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.INVALID_APP_CREDENTIAL]:\n      'The phone verification request contains an invalid application verifier.' +\n      ' The reCAPTCHA token response is either invalid or expired.',\n    [AuthErrorCode.INVALID_APP_ID]:\n      'The mobile app identifier is not registered for the current project.',\n    [AuthErrorCode.INVALID_AUTH]:\n      \"This user's credential isn't valid for this project. This can happen \" +\n      \"if the user's token has been tampered with, or if the user isn't for \" +\n      'the project associated with this API key.',\n    [AuthErrorCode.INVALID_AUTH_EVENT]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.INVALID_CODE]:\n      'The SMS verification code used to create the phone auth credential is ' +\n      'invalid. Please resend the verification code sms and be sure to use the ' +\n      'verification code provided by the user.',\n    [AuthErrorCode.INVALID_CONTINUE_URI]:\n      'The continue URL provided in the request is invalid.',\n    [AuthErrorCode.INVALID_CORDOVA_CONFIGURATION]:\n      'The following Cordova plugins must be installed to enable OAuth sign-in: ' +\n      'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +\n      'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +\n      'cordova-plugin-customurlscheme.',\n    [AuthErrorCode.INVALID_CUSTOM_TOKEN]:\n      'The custom token format is incorrect. Please check the documentation.',\n    [AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN]:\n      'The provided dynamic link domain is not configured or authorized for the current project.',\n    [AuthErrorCode.INVALID_EMAIL]: 'The email address is badly formatted.',\n    [AuthErrorCode.INVALID_EMULATOR_SCHEME]:\n      'Emulator URL must start with a valid scheme (http:// or https://).',\n    [AuthErrorCode.INVALID_API_KEY]:\n      'Your API key is invalid, please check you have copied it correctly.',\n    [AuthErrorCode.INVALID_CERT_HASH]:\n      'The SHA-1 certificate hash provided is invalid.',\n    [AuthErrorCode.INVALID_CREDENTIAL]:\n      'The supplied auth credential is incorrect, malformed or has expired.',\n    [AuthErrorCode.INVALID_MESSAGE_PAYLOAD]:\n      'The email template corresponding to this action contains invalid characters in its message. ' +\n      'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [AuthErrorCode.INVALID_MFA_SESSION]:\n      'The request does not contain a valid proof of first factor successful sign-in.',\n    [AuthErrorCode.INVALID_OAUTH_PROVIDER]:\n      'EmailAuthProvider is not supported for this operation. This operation ' +\n      'only supports OAuth providers.',\n    [AuthErrorCode.INVALID_OAUTH_CLIENT_ID]:\n      'The OAuth client ID provided is either invalid or does not match the ' +\n      'specified API key.',\n    [AuthErrorCode.INVALID_ORIGIN]:\n      'This domain is not authorized for OAuth operations for your Firebase ' +\n      'project. Edit the list of authorized domains from the Firebase console.',\n    [AuthErrorCode.INVALID_OOB_CODE]:\n      'The action code is invalid. This can happen if the code is malformed, ' +\n      'expired, or has already been used.',\n    [AuthErrorCode.INVALID_PASSWORD]:\n      'The password is invalid or the user does not have a password.',\n    [AuthErrorCode.INVALID_PERSISTENCE]:\n      'The specified persistence type is invalid. It can only be local, session or none.',\n    [AuthErrorCode.INVALID_PHONE_NUMBER]:\n      'The format of the phone number provided is incorrect. Please enter the ' +\n      'phone number in a format that can be parsed into E.164 format. E.164 ' +\n      'phone numbers are written in the format [+][country code][subscriber ' +\n      'number including area code].',\n    [AuthErrorCode.INVALID_PROVIDER_ID]:\n      'The specified provider ID is invalid.',\n    [AuthErrorCode.INVALID_RECIPIENT_EMAIL]:\n      'The email corresponding to this action failed to send as the provided ' +\n      'recipient email address is invalid.',\n    [AuthErrorCode.INVALID_SENDER]:\n      'The email template corresponding to this action contains an invalid sender email or name. ' +\n      'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [AuthErrorCode.INVALID_SESSION_INFO]:\n      'The verification ID used to create the phone auth credential is invalid.',\n    [AuthErrorCode.INVALID_TENANT_ID]:\n      \"The Auth instance's tenant ID is invalid.\",\n    [AuthErrorCode.LOGIN_BLOCKED]:\n      'Login blocked by user-provided method: {$originalMessage}',\n    [AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME]:\n      'An Android Package Name must be provided if the Android App is required to be installed.',\n    [AuthErrorCode.MISSING_AUTH_DOMAIN]:\n      'Be sure to include authDomain when calling firebase.initializeApp(), ' +\n      'by following the instructions in the Firebase console.',\n    [AuthErrorCode.MISSING_APP_CREDENTIAL]:\n      'The phone verification request is missing an application verifier ' +\n      'assertion. A reCAPTCHA response token needs to be provided.',\n    [AuthErrorCode.MISSING_CODE]:\n      'The phone auth credential was created with an empty SMS verification code.',\n    [AuthErrorCode.MISSING_CONTINUE_URI]:\n      'A continue URL must be provided in the request.',\n    [AuthErrorCode.MISSING_IFRAME_START]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.MISSING_IOS_BUNDLE_ID]:\n      'An iOS Bundle ID must be provided if an App Store ID is provided.',\n    [AuthErrorCode.MISSING_OR_INVALID_NONCE]:\n      'The request does not contain a valid nonce. This can occur if the ' +\n      'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +\n      'in the ID token payload.',\n    [AuthErrorCode.MISSING_PASSWORD]: 'A non-empty password must be provided',\n    [AuthErrorCode.MISSING_MFA_INFO]:\n      'No second factor identifier is provided.',\n    [AuthErrorCode.MISSING_MFA_SESSION]:\n      'The request is missing proof of first factor successful sign-in.',\n    [AuthErrorCode.MISSING_PHONE_NUMBER]:\n      'To send verification codes, provide a phone number for the recipient.',\n    [AuthErrorCode.MISSING_SESSION_INFO]:\n      'The phone auth credential was created with an empty verification ID.',\n    [AuthErrorCode.MODULE_DESTROYED]:\n      'This instance of FirebaseApp has been deleted.',\n    [AuthErrorCode.MFA_INFO_NOT_FOUND]:\n      'The user does not have a second factor matching the identifier provided.',\n    [AuthErrorCode.MFA_REQUIRED]:\n      'Proof of ownership of a second factor is required to complete sign-in.',\n    [AuthErrorCode.NEED_CONFIRMATION]:\n      'An account already exists with the same email address but different ' +\n      'sign-in credentials. Sign in using a provider associated with this ' +\n      'email address.',\n    [AuthErrorCode.NETWORK_REQUEST_FAILED]:\n      'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n    [AuthErrorCode.NO_AUTH_EVENT]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.NO_SUCH_PROVIDER]:\n      'User was not linked to an account with the given provider.',\n    [AuthErrorCode.NULL_USER]:\n      'A null user object was provided as the argument for an operation which ' +\n      'requires a non-null user object.',\n    [AuthErrorCode.OPERATION_NOT_ALLOWED]:\n      'The given sign-in provider is disabled for this Firebase project. ' +\n      'Enable it in the Firebase console, under the sign-in method tab of the ' +\n      'Auth section.',\n    [AuthErrorCode.OPERATION_NOT_SUPPORTED]:\n      'This operation is not supported in the environment this application is ' +\n      'running on. \"location.protocol\" must be http, https or chrome-extension' +\n      ' and web storage must be enabled.',\n    [AuthErrorCode.POPUP_BLOCKED]:\n      'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n    [AuthErrorCode.POPUP_CLOSED_BY_USER]:\n      'The popup has been closed by the user before finalizing the operation.',\n    [AuthErrorCode.PROVIDER_ALREADY_LINKED]:\n      'User can only be linked to one identity for the given provider.',\n    [AuthErrorCode.QUOTA_EXCEEDED]:\n      \"The project's quota for this operation has been exceeded.\",\n    [AuthErrorCode.REDIRECT_CANCELLED_BY_USER]:\n      'The redirect operation has been cancelled by the user before finalizing.',\n    [AuthErrorCode.REDIRECT_OPERATION_PENDING]:\n      'A redirect sign-in operation is already pending.',\n    [AuthErrorCode.REJECTED_CREDENTIAL]:\n      'The request contains malformed or mismatching credentials.',\n    [AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED]:\n      'The second factor is already enrolled on this account.',\n    [AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED]:\n      'The maximum allowed number of second factors on a user has been exceeded.',\n    [AuthErrorCode.TENANT_ID_MISMATCH]:\n      \"The provided tenant ID does not match the Auth instance's tenant ID\",\n    [AuthErrorCode.TIMEOUT]: 'The operation has timed out.',\n    [AuthErrorCode.TOKEN_EXPIRED]:\n      \"The user's credential is no longer valid. The user must sign in again.\",\n    [AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER]:\n      'We have blocked all requests from this device due to unusual activity. ' +\n      'Try again later.',\n    [AuthErrorCode.UNAUTHORIZED_DOMAIN]:\n      'The domain of the continue URL is not whitelisted.  Please whitelist ' +\n      'the domain in the Firebase console.',\n    [AuthErrorCode.UNSUPPORTED_FIRST_FACTOR]:\n      'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n    [AuthErrorCode.UNSUPPORTED_PERSISTENCE]:\n      'The current environment does not support the specified persistence type.',\n    [AuthErrorCode.UNSUPPORTED_TENANT_OPERATION]:\n      'This operation is not supported in a multi-tenant context.',\n    [AuthErrorCode.UNVERIFIED_EMAIL]:\n      'The operation requires a verified email.',\n    [AuthErrorCode.USER_CANCELLED]:\n      'The user did not grant your application the permissions it requested.',\n    [AuthErrorCode.USER_DELETED]:\n      'There is no user record corresponding to this identifier. The user may ' +\n      'have been deleted.',\n    [AuthErrorCode.USER_DISABLED]:\n      'The user account has been disabled by an administrator.',\n    [AuthErrorCode.USER_MISMATCH]:\n      'The supplied credentials do not correspond to the previously signed in user.',\n    [AuthErrorCode.USER_SIGNED_OUT]: '',\n    [AuthErrorCode.WEAK_PASSWORD]:\n      'The password must be 6 characters long or more.',\n    [AuthErrorCode.WEB_STORAGE_UNSUPPORTED]:\n      'This browser is not supported or 3rd party cookies and data may be disabled.',\n    [AuthErrorCode.ALREADY_INITIALIZED]:\n      'initializeAuth() has already been called with ' +\n      'different options. To avoid this error, call initializeAuth() with the ' +\n      'same options as when it was originally called, or call getAuth() to return the' +\n      ' already initialized instance.',\n    [AuthErrorCode.MISSING_RECAPTCHA_TOKEN]:\n      'The reCAPTCHA token is missing when sending request to the backend.',\n    [AuthErrorCode.INVALID_RECAPTCHA_TOKEN]:\n      'The reCAPTCHA token is invalid when sending request to the backend.',\n    [AuthErrorCode.INVALID_RECAPTCHA_ACTION]:\n      'The reCAPTCHA action is invalid when sending request to the backend.',\n    [AuthErrorCode.RECAPTCHA_NOT_ENABLED]:\n      'reCAPTCHA Enterprise integration is not enabled for this project.',\n    [AuthErrorCode.MISSING_CLIENT_TYPE]:\n      'The reCAPTCHA client type is missing when sending request to the backend.',\n    [AuthErrorCode.MISSING_RECAPTCHA_VERSION]:\n      'The reCAPTCHA version is missing when sending request to the backend.',\n    [AuthErrorCode.INVALID_REQ_TYPE]: 'Invalid request parameters.',\n    [AuthErrorCode.INVALID_RECAPTCHA_VERSION]:\n      'The reCAPTCHA version is invalid when sending request to the backend.',\n    [AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION]:\n      'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n    [AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS]:\n      'The password does not meet the requirements.'\n  };\n}\n\nexport interface ErrorMapRetriever extends AuthErrorMap {\n  (): ErrorMap<AuthErrorCode>;\n}\n\nfunction _prodErrorMap(): ErrorMap<AuthErrorCode> {\n  // We will include this one message in the prod error map since by the very\n  // nature of this error, developers will never be able to see the message\n  // using the debugErrorMap (which is installed during auth initialization).\n  return {\n    [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]:\n      'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n      'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n      'starting any other Firebase SDK.'\n  } as ErrorMap<AuthErrorCode>;\n}\n\n/**\n * A verbose error map with detailed descriptions for most error codes.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nexport const debugErrorMap: AuthErrorMap = _debugErrorMap;\n\n/**\n * A minimal error map with all verbose error messages stripped.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nexport const prodErrorMap: AuthErrorMap = _prodErrorMap;\n\nexport interface NamedErrorParams {\n  appName: AppName;\n  credential?: AuthCredential;\n  email?: string;\n  phoneNumber?: string;\n  tenantId?: string;\n  user?: User;\n  _serverResponse?: object;\n}\n\n/**\n * @internal\n */\ntype GenericAuthErrorParams = {\n  [key in Exclude<\n    AuthErrorCode,\n    | AuthErrorCode.ARGUMENT_ERROR\n    | AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH\n    | AuthErrorCode.INTERNAL_ERROR\n    | AuthErrorCode.MFA_REQUIRED\n    | AuthErrorCode.NO_AUTH_EVENT\n    | AuthErrorCode.OPERATION_NOT_SUPPORTED\n  >]: {\n    appName?: AppName;\n    email?: string;\n    phoneNumber?: string;\n    message?: string;\n  };\n};\n\n/**\n * @internal\n */\nexport interface AuthErrorParams extends GenericAuthErrorParams {\n  [AuthErrorCode.ARGUMENT_ERROR]: { appName?: AppName };\n  [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]: { appName?: AppName };\n  [AuthErrorCode.INTERNAL_ERROR]: { appName?: AppName };\n  [AuthErrorCode.LOGIN_BLOCKED]: {\n    appName?: AppName;\n    originalMessage?: string;\n  };\n  [AuthErrorCode.OPERATION_NOT_SUPPORTED]: { appName?: AppName };\n  [AuthErrorCode.NO_AUTH_EVENT]: { appName?: AppName };\n  [AuthErrorCode.MFA_REQUIRED]: {\n    appName: AppName;\n    _serverResponse: IdTokenMfaResponse;\n  };\n  [AuthErrorCode.INVALID_CORDOVA_CONFIGURATION]: {\n    appName: AppName;\n    missingPlugin?: string;\n  };\n}\n\nexport const _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory<\n  AuthErrorCode,\n  AuthErrorParams\n>('auth', 'Firebase', _prodErrorMap());\n\n/**\n * A map of potential `Auth` error codes, for easier comparison with errors\n * thrown by the SDK.\n *\n * @remarks\n * Note that you can't tree-shake individual keys\n * in the map, so by using the map you might substantially increase your\n * bundle size.\n *\n * @public\n */\nexport const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n  ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n  ARGUMENT_ERROR: 'auth/argument-error',\n  APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n  APP_NOT_INSTALLED: 'auth/app-not-installed',\n  CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n  CODE_EXPIRED: 'auth/code-expired',\n  CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n  CORS_UNSUPPORTED: 'auth/cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n  CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n  EMAIL_EXISTS: 'auth/email-already-in-use',\n  EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n  EXPIRED_OOB_CODE: 'auth/expired-action-code',\n  EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n  INTERNAL_ERROR: 'auth/internal-error',\n  INVALID_API_KEY: 'auth/invalid-api-key',\n  INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n  INVALID_APP_ID: 'auth/invalid-app-id',\n  INVALID_AUTH: 'auth/invalid-user-token',\n  INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n  INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n  INVALID_CODE: 'auth/invalid-verification-code',\n  INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n  INVALID_EMAIL: 'auth/invalid-email',\n  INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n  INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n  INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n  INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n  INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n  INVALID_OOB_CODE: 'auth/invalid-action-code',\n  INVALID_ORIGIN: 'auth/unauthorized-domain',\n  INVALID_PASSWORD: 'auth/wrong-password',\n  INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n  INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n  INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n  INVALID_SENDER: 'auth/invalid-sender',\n  INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n  INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n  MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n  MFA_REQUIRED: 'auth/multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n  MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n  MISSING_CODE: 'auth/missing-verification-code',\n  MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n  MISSING_IFRAME_START: 'auth/missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n  MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n  MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n  MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n  MISSING_SESSION_INFO: 'auth/missing-verification-id',\n  MODULE_DESTROYED: 'auth/app-deleted',\n  NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n  NULL_USER: 'auth/null-user',\n  NO_AUTH_EVENT: 'auth/no-auth-event',\n  NO_SUCH_PROVIDER: 'auth/no-such-provider',\n  OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n  OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n  POPUP_BLOCKED: 'auth/popup-blocked',\n  POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n  QUOTA_EXCEEDED: 'auth/quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n  REJECTED_CREDENTIAL: 'auth/rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n  TIMEOUT: 'auth/timeout',\n  TOKEN_EXPIRED: 'auth/user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n  UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n  UNVERIFIED_EMAIL: 'auth/unverified-email',\n  USER_CANCELLED: 'auth/user-cancelled',\n  USER_DELETED: 'auth/user-not-found',\n  USER_DISABLED: 'auth/user-disabled',\n  USER_MISMATCH: 'auth/user-mismatch',\n  USER_SIGNED_OUT: 'auth/user-signed-out',\n  WEAK_PASSWORD: 'auth/weak-password',\n  WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n  ALREADY_INITIALIZED: 'auth/already-initialized',\n  RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n  MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n  INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n  INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n  MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n  MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n  INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n  INVALID_REQ_TYPE: 'auth/invalid-req-type'\n} as const;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SDK_VERSION } from '@firebase/app';\n\nexport { LogLevel };\n\nconst logClient = new Logger('@firebase/auth');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function _getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\nexport function _setLogLevel(newLevel: LogLevel): void {\n  logClient.logLevel = newLevel;\n}\n\nexport function _logDebug(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    logClient.debug(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function _logWarn(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function _logError(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth } from '../../model/public_types';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  _DEFAULT_AUTH_ERROR_FACTORY,\n  AuthErrorCode,\n  AuthErrorParams,\n  prodErrorMap,\n  ErrorMapRetriever\n} from '../errors';\nimport { _logError } from './log';\n\ntype AuthErrorListParams<K> = K extends keyof AuthErrorParams\n  ? [AuthErrorParams[K]]\n  : [];\ntype LessAppName<K extends AuthErrorCode> = Omit<AuthErrorParams[K], 'appName'>;\n\n/**\n * Unconditionally fails, throwing a developer facing INTERNAL_ERROR\n *\n * @example\n * ```javascript\n * fail(auth, AuthErrorCode.MFA_REQUIRED);  // Error: the MFA_REQUIRED error needs more params than appName\n * fail(auth, AuthErrorCode.MFA_REQUIRED, {serverResponse});  // Compiles\n * fail(AuthErrorCode.INTERNAL_ERROR);  // Compiles; internal error does not need appName\n * fail(AuthErrorCode.USER_DELETED);  // Error: USER_DELETED requires app name\n * fail(auth, AuthErrorCode.USER_DELETED);  // Compiles; USER_DELETED _only_ needs app name\n * ```\n *\n * @param appName App name for tagging the error\n * @throws FirebaseError\n */\nexport function _fail<K extends AuthErrorCode>(\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): never;\nexport function _fail<K extends AuthErrorCode>(\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): never;\nexport function _fail<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): never {\n  throw createErrorInternal(authOrCode, ...rest);\n}\n\nexport function _createError<K extends AuthErrorCode>(\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): FirebaseError;\nexport function _createError<K extends AuthErrorCode>(\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): FirebaseError;\nexport function _createError<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): FirebaseError {\n  return createErrorInternal(authOrCode, ...rest);\n}\n\nexport function _errorWithCustomMessage(\n  auth: Auth,\n  code: AuthErrorCode,\n  message: string\n): FirebaseError {\n  const errorMap = {\n    ...(prodErrorMap as ErrorMapRetriever)(),\n    [code]: message\n  };\n  const factory = new ErrorFactory<AuthErrorCode, AuthErrorParams>(\n    'auth',\n    'Firebase',\n    errorMap\n  );\n  return factory.create(code, {\n    appName: auth.name\n  });\n}\n\nexport function _serverAppCurrentUserOperationNotSupportedError(\n  auth: Auth\n): FirebaseError {\n  return _errorWithCustomMessage(\n    auth,\n    AuthErrorCode.OPERATION_NOT_SUPPORTED,\n    'Operations that alter the current user are not supported in conjunction with FirebaseServerApp'\n  );\n}\n\nexport function _assertInstanceOf(\n  auth: Auth,\n  object: object,\n  instance: unknown\n): void {\n  const constructorInstance = instance as { new (...args: unknown[]): unknown };\n  if (!(object instanceof constructorInstance)) {\n    if (constructorInstance.name !== object.constructor.name) {\n      _fail(auth, AuthErrorCode.ARGUMENT_ERROR);\n    }\n\n    throw _errorWithCustomMessage(\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR,\n      `Type of ${object.constructor.name} does not match expected instance.` +\n        `Did you pass a reference from a different Auth SDK?`\n    );\n  }\n}\n\nfunction createErrorInternal<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): FirebaseError {\n  if (typeof authOrCode !== 'string') {\n    const code = rest[0] as K;\n    const fullParams = [...rest.slice(1)] as AuthErrorListParams<K>;\n    if (fullParams[0]) {\n      fullParams[0].appName = authOrCode.name;\n    }\n\n    return (authOrCode as AuthInternal)._errorFactory.create(\n      code,\n      ...fullParams\n    );\n  }\n\n  return _DEFAULT_AUTH_ERROR_FACTORY.create(\n    authOrCode,\n    ...(rest as AuthErrorListParams<K>)\n  );\n}\n\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): asserts assertion;\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): asserts assertion;\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): asserts assertion {\n  if (!assertion) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n}\n\n// We really do want to accept literally any function type here\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype TypeExpectation = Function | string | MapType;\n\ninterface MapType extends Record<string, TypeExpectation | Optional> {}\n\nclass Optional {\n  constructor(readonly type: TypeExpectation) {}\n}\n\nexport function opt(type: TypeExpectation): Optional {\n  return new Optional(type);\n}\n\n/**\n * Asserts the runtime types of arguments. The 'expected' field can be one of\n * a class, a string (representing a \"typeof\" call), or a record map of name\n * to type. Furthermore, the opt() function can be used to mark a field as\n * optional. For example:\n *\n * function foo(auth: Auth, profile: {displayName?: string}, update = false) {\n *   assertTypes(arguments, [AuthImpl, {displayName: opt('string')}, opt('boolean')]);\n * }\n *\n * opt() can be used for any type:\n * function foo(auth?: Auth) {\n *   assertTypes(arguments, [opt(AuthImpl)]);\n * }\n *\n * The string types can be or'd together, and you can use \"null\" as well (note\n * that typeof null === 'object'; this is an edge case). For example:\n *\n * function foo(profile: {displayName?: string | null}) {\n *   assertTypes(arguments, [{displayName: opt('string|null')}]);\n * }\n *\n * @param args\n * @param expected\n */\nexport function assertTypes(\n  args: Omit<IArguments, 'callee'>,\n  ...expected: Array<TypeExpectation | Optional>\n): void {\n  if (args.length > expected.length) {\n    _fail(AuthErrorCode.ARGUMENT_ERROR, {});\n  }\n\n  for (let i = 0; i < expected.length; i++) {\n    let expect = expected[i];\n    const arg = args[i];\n\n    if (expect instanceof Optional) {\n      // If the arg is undefined, then it matches \"optional\" and we can move to\n      // the next arg\n      if (typeof arg === 'undefined') {\n        continue;\n      }\n      expect = expect.type;\n    }\n\n    if (typeof expect === 'string') {\n      // Handle the edge case for null because typeof null === 'object'\n      if (expect.includes('null') && arg === null) {\n        continue;\n      }\n\n      const required = expect.split('|');\n      _assert(required.includes(typeof arg), AuthErrorCode.ARGUMENT_ERROR, {});\n    } else if (typeof expect === 'object') {\n      // Recursively check record arguments\n      const record = arg as Record<string, unknown>;\n      const map = expect as MapType;\n      const keys = Object.keys(expect);\n\n      assertTypes(\n        keys.map(k => record[k]),\n        ...keys.map(k => map[k])\n      );\n    } else {\n      _assert(arg instanceof expect, AuthErrorCode.ARGUMENT_ERROR, {});\n    }\n  }\n}\n\n/**\n * Unconditionally fails, throwing an internal error with the given message.\n *\n * @param failure type of failure encountered\n * @throws Error\n */\nexport function debugFail(failure: string): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message = `INTERNAL ASSERTION FAILED: ` + failure;\n  _logError(message);\n\n  // NOTE: We don't use FirebaseError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * @param assertion\n * @param message\n */\nexport function debugAssert(\n  assertion: unknown,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    debugFail(message);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function _getCurrentUrl(): string {\n  return (typeof self !== 'undefined' && self.location?.href) || '';\n}\n\nexport function _isHttpOrHttps(): boolean {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n\nexport function _getCurrentScheme(): string | null {\n  return (typeof self !== 'undefined' && self.location?.protocol) || null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isMobileCordova, isReactNative } from '@firebase/util';\nimport { _isOnline } from './navigator';\nimport { debugAssert } from './assert';\n\nexport const enum DelayMin {\n  OFFLINE = 5000\n}\n\n/**\n * A structure to help pick between a range of long and short delay durations\n * depending on the current environment. In general, the long delay is used for\n * mobile environments whereas short delays are used for desktop environments.\n */\nexport class Delay {\n  // The default value for the offline delay timeout in ms.\n\n  private readonly isMobile: boolean;\n  constructor(\n    private readonly shortDelay: number,\n    private readonly longDelay: number\n  ) {\n    // Internal error when improperly initialized.\n    debugAssert(\n      longDelay > shortDelay,\n      'Short delay should be less than long delay!'\n    );\n    this.isMobile = isMobileCordova() || isReactNative();\n  }\n\n  get(): number {\n    if (!_isOnline()) {\n      // Pick the shorter timeout.\n      return Math.min(DelayMin.OFFLINE, this.shortDelay);\n    }\n    // If running in a mobile environment, return the long delay, otherwise\n    // return the short delay.\n    // This could be improved in the future to dynamically change based on other\n    // variables instead of just reading the current environment.\n    return this.isMobile ? this.longDelay : this.shortDelay;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isBrowserExtension } from '@firebase/util';\nimport { _isHttpOrHttps } from './location';\n\n/**\n * Determine whether the browser is working online\n */\nexport function _isOnline(): boolean {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator &&\n    'onLine' in navigator &&\n    typeof navigator.onLine === 'boolean' &&\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)\n  ) {\n    return navigator.onLine;\n  }\n  // If we can't determine the state, assume it is online.\n  return true;\n}\n\nexport function _getUserLanguage(): string | null {\n  if (typeof navigator === 'undefined') {\n    return null;\n  }\n  const navigatorLanguage: NavigatorLanguage = navigator;\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language ||\n    // Couldn't determine language.\n    null\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConfigInternal } from '../../model/auth';\nimport { debugAssert } from './assert';\n\nexport function _emulatorUrl(config: ConfigInternal, path?: string): string {\n  debugAssert(config.emulator, 'Emulator should always be set here');\n  const { url } = config.emulator;\n\n  if (!path) {\n    return url;\n  }\n\n  return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugFail } from './assert';\n\nexport class FetchProvider {\n  private static fetchImpl: typeof fetch | null;\n  private static headersImpl: typeof Headers | null;\n  private static responseImpl: typeof Response | null;\n\n  static initialize(\n    fetchImpl: typeof fetch,\n    headersImpl?: typeof Headers,\n    responseImpl?: typeof Response\n  ): void {\n    this.fetchImpl = fetchImpl;\n    if (headersImpl) {\n      this.headersImpl = headersImpl;\n    }\n    if (responseImpl) {\n      this.responseImpl = responseImpl;\n    }\n  }\n\n  static fetch(): typeof fetch {\n    if (this.fetchImpl) {\n      return this.fetchImpl;\n    }\n    if (typeof self !== 'undefined' && 'fetch' in self) {\n      return self.fetch;\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n      return globalThis.fetch;\n    }\n    if (typeof fetch !== 'undefined') {\n      return fetch;\n    }\n    debugFail(\n      'Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n\n  static headers(): typeof Headers {\n    if (this.headersImpl) {\n      return this.headersImpl;\n    }\n    if (typeof self !== 'undefined' && 'Headers' in self) {\n      return self.Headers;\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n      return globalThis.Headers;\n    }\n    if (typeof Headers !== 'undefined') {\n      return Headers;\n    }\n    debugFail(\n      'Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n\n  static response(): typeof Response {\n    if (this.responseImpl) {\n      return this.responseImpl;\n    }\n    if (typeof self !== 'undefined' && 'Response' in self) {\n      return self.Response;\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.Response) {\n      return globalThis.Response;\n    }\n    if (typeof Response !== 'undefined') {\n      return Response;\n    }\n    debugFail(\n      'Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../core/errors';\n\n/**\n * Errors that can be returned by the backend\n */\nexport const enum ServerError {\n  ADMIN_ONLY_OPERATION = 'ADMIN_ONLY_OPERATION',\n  BLOCKING_FUNCTION_ERROR_RESPONSE = 'BLOCKING_FUNCTION_ERROR_RESPONSE',\n  CAPTCHA_CHECK_FAILED = 'CAPTCHA_CHECK_FAILED',\n  CORS_UNSUPPORTED = 'CORS_UNSUPPORTED',\n  CREDENTIAL_MISMATCH = 'CREDENTIAL_MISMATCH',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN = 'CREDENTIAL_TOO_OLD_LOGIN_AGAIN',\n  DYNAMIC_LINK_NOT_ACTIVATED = 'DYNAMIC_LINK_NOT_ACTIVATED',\n  EMAIL_CHANGE_NEEDS_VERIFICATION = 'EMAIL_CHANGE_NEEDS_VERIFICATION',\n  EMAIL_EXISTS = 'EMAIL_EXISTS',\n  EMAIL_NOT_FOUND = 'EMAIL_NOT_FOUND',\n  EXPIRED_OOB_CODE = 'EXPIRED_OOB_CODE',\n  FEDERATED_USER_ID_ALREADY_LINKED = 'FEDERATED_USER_ID_ALREADY_LINKED',\n  INVALID_APP_CREDENTIAL = 'INVALID_APP_CREDENTIAL',\n  INVALID_APP_ID = 'INVALID_APP_ID',\n  INVALID_CERT_HASH = 'INVALID_CERT_HASH',\n  INVALID_CODE = 'INVALID_CODE',\n  INVALID_CONTINUE_URI = 'INVALID_CONTINUE_URI',\n  INVALID_CUSTOM_TOKEN = 'INVALID_CUSTOM_TOKEN',\n  INVALID_DYNAMIC_LINK_DOMAIN = 'INVALID_DYNAMIC_LINK_DOMAIN',\n  INVALID_EMAIL = 'INVALID_EMAIL',\n  INVALID_ID_TOKEN = 'INVALID_ID_TOKEN',\n  INVALID_IDP_RESPONSE = 'INVALID_IDP_RESPONSE',\n  INVALID_IDENTIFIER = 'INVALID_IDENTIFIER',\n  INVALID_LOGIN_CREDENTIALS = 'INVALID_LOGIN_CREDENTIALS',\n  INVALID_MESSAGE_PAYLOAD = 'INVALID_MESSAGE_PAYLOAD',\n  INVALID_MFA_PENDING_CREDENTIAL = 'INVALID_MFA_PENDING_CREDENTIAL',\n  INVALID_OAUTH_CLIENT_ID = 'INVALID_OAUTH_CLIENT_ID',\n  INVALID_OOB_CODE = 'INVALID_OOB_CODE',\n  INVALID_PASSWORD = 'INVALID_PASSWORD',\n  INVALID_PENDING_TOKEN = 'INVALID_PENDING_TOKEN',\n  INVALID_PHONE_NUMBER = 'INVALID_PHONE_NUMBER',\n  INVALID_PROVIDER_ID = 'INVALID_PROVIDER_ID',\n  INVALID_RECIPIENT_EMAIL = 'INVALID_RECIPIENT_EMAIL',\n  INVALID_SENDER = 'INVALID_SENDER',\n  INVALID_SESSION_INFO = 'INVALID_SESSION_INFO',\n  INVALID_TEMPORARY_PROOF = 'INVALID_TEMPORARY_PROOF',\n  INVALID_TENANT_ID = 'INVALID_TENANT_ID',\n  MFA_ENROLLMENT_NOT_FOUND = 'MFA_ENROLLMENT_NOT_FOUND',\n  MISSING_ANDROID_PACKAGE_NAME = 'MISSING_ANDROID_PACKAGE_NAME',\n  MISSING_APP_CREDENTIAL = 'MISSING_APP_CREDENTIAL',\n  MISSING_CODE = 'MISSING_CODE',\n  MISSING_CONTINUE_URI = 'MISSING_CONTINUE_URI',\n  MISSING_CUSTOM_TOKEN = 'MISSING_CUSTOM_TOKEN',\n  MISSING_IOS_BUNDLE_ID = 'MISSING_IOS_BUNDLE_ID',\n  MISSING_MFA_ENROLLMENT_ID = 'MISSING_MFA_ENROLLMENT_ID',\n  MISSING_MFA_PENDING_CREDENTIAL = 'MISSING_MFA_PENDING_CREDENTIAL',\n  MISSING_OOB_CODE = 'MISSING_OOB_CODE',\n  MISSING_OR_INVALID_NONCE = 'MISSING_OR_INVALID_NONCE',\n  MISSING_PASSWORD = 'MISSING_PASSWORD',\n  MISSING_REQ_TYPE = 'MISSING_REQ_TYPE',\n  MISSING_PHONE_NUMBER = 'MISSING_PHONE_NUMBER',\n  MISSING_SESSION_INFO = 'MISSING_SESSION_INFO',\n  OPERATION_NOT_ALLOWED = 'OPERATION_NOT_ALLOWED',\n  PASSWORD_LOGIN_DISABLED = 'PASSWORD_LOGIN_DISABLED',\n  QUOTA_EXCEEDED = 'QUOTA_EXCEEDED',\n  RESET_PASSWORD_EXCEED_LIMIT = 'RESET_PASSWORD_EXCEED_LIMIT',\n  REJECTED_CREDENTIAL = 'REJECTED_CREDENTIAL',\n  SECOND_FACTOR_EXISTS = 'SECOND_FACTOR_EXISTS',\n  SECOND_FACTOR_LIMIT_EXCEEDED = 'SECOND_FACTOR_LIMIT_EXCEEDED',\n  SESSION_EXPIRED = 'SESSION_EXPIRED',\n  TENANT_ID_MISMATCH = 'TENANT_ID_MISMATCH',\n  TOKEN_EXPIRED = 'TOKEN_EXPIRED',\n  TOO_MANY_ATTEMPTS_TRY_LATER = 'TOO_MANY_ATTEMPTS_TRY_LATER',\n  UNSUPPORTED_FIRST_FACTOR = 'UNSUPPORTED_FIRST_FACTOR',\n  UNSUPPORTED_TENANT_OPERATION = 'UNSUPPORTED_TENANT_OPERATION',\n  UNAUTHORIZED_DOMAIN = 'UNAUTHORIZED_DOMAIN',\n  UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL',\n  USER_CANCELLED = 'USER_CANCELLED',\n  USER_DISABLED = 'USER_DISABLED',\n  USER_NOT_FOUND = 'USER_NOT_FOUND',\n  WEAK_PASSWORD = 'WEAK_PASSWORD',\n  RECAPTCHA_NOT_ENABLED = 'RECAPTCHA_NOT_ENABLED',\n  MISSING_RECAPTCHA_TOKEN = 'MISSING_RECAPTCHA_TOKEN',\n  INVALID_RECAPTCHA_TOKEN = 'INVALID_RECAPTCHA_TOKEN',\n  INVALID_RECAPTCHA_ACTION = 'INVALID_RECAPTCHA_ACTION',\n  MISSING_CLIENT_TYPE = 'MISSING_CLIENT_TYPE',\n  MISSING_RECAPTCHA_VERSION = 'MISSING_RECAPTCHA_VERSION',\n  INVALID_RECAPTCHA_VERSION = 'INVALID_RECAPTCHA_VERSION',\n  INVALID_REQ_TYPE = 'INVALID_REQ_TYPE',\n  PASSWORD_DOES_NOT_MEET_REQUIREMENTS = 'PASSWORD_DOES_NOT_MEET_REQUIREMENTS'\n}\n\n/**\n * API Response in the event of an error\n */\nexport interface JsonError {\n  error: {\n    code: number;\n    message: string;\n    errors?: [\n      {\n        message: ServerError;\n        domain: string;\n        reason: string;\n      }\n    ];\n  };\n}\n\n/**\n * Type definition for a map from server errors to developer visible errors\n */\nexport declare type ServerErrorMap<ApiError extends string> = {\n  readonly [K in ApiError]: AuthErrorCode;\n};\n\n/**\n * Map from errors returned by the server to errors to developer visible errors\n */\nexport const SERVER_ERROR_MAP: Partial<ServerErrorMap<ServerError>> = {\n  // Custom token errors.\n  [ServerError.CREDENTIAL_MISMATCH]: AuthErrorCode.CREDENTIAL_MISMATCH,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_CUSTOM_TOKEN]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Create Auth URI errors.\n  [ServerError.INVALID_IDENTIFIER]: AuthErrorCode.INVALID_EMAIL,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_CONTINUE_URI]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Sign in with email and password errors (some apply to sign up too).\n  [ServerError.INVALID_PASSWORD]: AuthErrorCode.INVALID_PASSWORD,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_PASSWORD]: AuthErrorCode.MISSING_PASSWORD,\n  // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\n  // invalid.\n  [ServerError.INVALID_LOGIN_CREDENTIALS]: AuthErrorCode.INVALID_CREDENTIAL,\n\n  // Sign up with email and password errors.\n  [ServerError.EMAIL_EXISTS]: AuthErrorCode.EMAIL_EXISTS,\n  [ServerError.PASSWORD_LOGIN_DISABLED]: AuthErrorCode.OPERATION_NOT_ALLOWED,\n\n  // Verify assertion for sign in with credential errors:\n  [ServerError.INVALID_IDP_RESPONSE]: AuthErrorCode.INVALID_CREDENTIAL,\n  [ServerError.INVALID_PENDING_TOKEN]: AuthErrorCode.INVALID_CREDENTIAL,\n  [ServerError.FEDERATED_USER_ID_ALREADY_LINKED]:\n    AuthErrorCode.CREDENTIAL_ALREADY_IN_USE,\n\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_REQ_TYPE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Send Password reset email errors:\n  [ServerError.EMAIL_NOT_FOUND]: AuthErrorCode.USER_DELETED,\n  [ServerError.RESET_PASSWORD_EXCEED_LIMIT]:\n    AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER,\n\n  [ServerError.EXPIRED_OOB_CODE]: AuthErrorCode.EXPIRED_OOB_CODE,\n  [ServerError.INVALID_OOB_CODE]: AuthErrorCode.INVALID_OOB_CODE,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_OOB_CODE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Operations that require ID token in request:\n  [ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN]:\n    AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN,\n  [ServerError.INVALID_ID_TOKEN]: AuthErrorCode.INVALID_AUTH,\n  [ServerError.TOKEN_EXPIRED]: AuthErrorCode.TOKEN_EXPIRED,\n  [ServerError.USER_NOT_FOUND]: AuthErrorCode.TOKEN_EXPIRED,\n\n  // Other errors.\n  [ServerError.TOO_MANY_ATTEMPTS_TRY_LATER]:\n    AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER,\n  [ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS]:\n    AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS,\n\n  // Phone Auth related errors.\n  [ServerError.INVALID_CODE]: AuthErrorCode.INVALID_CODE,\n  [ServerError.INVALID_SESSION_INFO]: AuthErrorCode.INVALID_SESSION_INFO,\n  [ServerError.INVALID_TEMPORARY_PROOF]: AuthErrorCode.INVALID_CREDENTIAL,\n  [ServerError.MISSING_SESSION_INFO]: AuthErrorCode.MISSING_SESSION_INFO,\n  [ServerError.SESSION_EXPIRED]: AuthErrorCode.CODE_EXPIRED,\n\n  // Other action code errors when additional settings passed.\n  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n  // This is OK as this error will be caught by client side validation.\n  [ServerError.MISSING_ANDROID_PACKAGE_NAME]:\n    AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME,\n  [ServerError.UNAUTHORIZED_DOMAIN]: AuthErrorCode.UNAUTHORIZED_DOMAIN,\n\n  // getProjectConfig errors when clientId is passed.\n  [ServerError.INVALID_OAUTH_CLIENT_ID]: AuthErrorCode.INVALID_OAUTH_CLIENT_ID,\n\n  // User actions (sign-up or deletion) disabled errors.\n  [ServerError.ADMIN_ONLY_OPERATION]: AuthErrorCode.ADMIN_ONLY_OPERATION,\n\n  // Multi factor related errors.\n  [ServerError.INVALID_MFA_PENDING_CREDENTIAL]:\n    AuthErrorCode.INVALID_MFA_SESSION,\n  [ServerError.MFA_ENROLLMENT_NOT_FOUND]: AuthErrorCode.MFA_INFO_NOT_FOUND,\n  [ServerError.MISSING_MFA_ENROLLMENT_ID]: AuthErrorCode.MISSING_MFA_INFO,\n  [ServerError.MISSING_MFA_PENDING_CREDENTIAL]:\n    AuthErrorCode.MISSING_MFA_SESSION,\n  [ServerError.SECOND_FACTOR_EXISTS]:\n    AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED,\n  [ServerError.SECOND_FACTOR_LIMIT_EXCEEDED]:\n    AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED,\n\n  // Blocking functions related errors.\n  [ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Recaptcha related errors.\n  [ServerError.RECAPTCHA_NOT_ENABLED]: AuthErrorCode.RECAPTCHA_NOT_ENABLED,\n  [ServerError.MISSING_RECAPTCHA_TOKEN]: AuthErrorCode.MISSING_RECAPTCHA_TOKEN,\n  [ServerError.INVALID_RECAPTCHA_TOKEN]: AuthErrorCode.INVALID_RECAPTCHA_TOKEN,\n  [ServerError.INVALID_RECAPTCHA_ACTION]:\n    AuthErrorCode.INVALID_RECAPTCHA_ACTION,\n  [ServerError.MISSING_CLIENT_TYPE]: AuthErrorCode.MISSING_CLIENT_TYPE,\n  [ServerError.MISSING_RECAPTCHA_VERSION]:\n    AuthErrorCode.MISSING_RECAPTCHA_VERSION,\n  [ServerError.INVALID_RECAPTCHA_VERSION]:\n    AuthErrorCode.INVALID_RECAPTCHA_VERSION,\n  [ServerError.INVALID_REQ_TYPE]: AuthErrorCode.INVALID_REQ_TYPE\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError, querystring } from '@firebase/util';\n\nimport { AuthErrorCode, NamedErrorParams } from '../core/errors';\nimport {\n  _createError,\n  _errorWithCustomMessage,\n  _fail\n} from '../core/util/assert';\nimport { Delay } from '../core/util/delay';\nimport { _emulatorUrl } from '../core/util/emulator';\nimport { FetchProvider } from '../core/util/fetch_provider';\nimport { Auth } from '../model/public_types';\nimport { AuthInternal, ConfigInternal } from '../model/auth';\nimport { IdTokenResponse, TaggedWithTokenResponse } from '../model/id_token';\nimport { IdTokenMfaResponse } from './authentication/mfa';\nimport { SERVER_ERROR_MAP, ServerError, ServerErrorMap } from './errors';\n\nexport const enum HttpMethod {\n  POST = 'POST',\n  GET = 'GET'\n}\n\nexport const enum HttpHeader {\n  CONTENT_TYPE = 'Content-Type',\n  X_FIREBASE_LOCALE = 'X-Firebase-Locale',\n  X_CLIENT_VERSION = 'X-Client-Version',\n  X_FIREBASE_GMPID = 'X-Firebase-gmpid',\n  X_FIREBASE_CLIENT = 'X-Firebase-Client',\n  X_FIREBASE_APP_CHECK = 'X-Firebase-AppCheck'\n}\n\nexport const enum Endpoint {\n  CREATE_AUTH_URI = '/v1/accounts:createAuthUri',\n  DELETE_ACCOUNT = '/v1/accounts:delete',\n  RESET_PASSWORD = '/v1/accounts:resetPassword',\n  SIGN_UP = '/v1/accounts:signUp',\n  SIGN_IN_WITH_CUSTOM_TOKEN = '/v1/accounts:signInWithCustomToken',\n  SIGN_IN_WITH_EMAIL_LINK = '/v1/accounts:signInWithEmailLink',\n  SIGN_IN_WITH_IDP = '/v1/accounts:signInWithIdp',\n  SIGN_IN_WITH_PASSWORD = '/v1/accounts:signInWithPassword',\n  SIGN_IN_WITH_PHONE_NUMBER = '/v1/accounts:signInWithPhoneNumber',\n  SEND_VERIFICATION_CODE = '/v1/accounts:sendVerificationCode',\n  SEND_OOB_CODE = '/v1/accounts:sendOobCode',\n  SET_ACCOUNT_INFO = '/v1/accounts:update',\n  GET_ACCOUNT_INFO = '/v1/accounts:lookup',\n  GET_RECAPTCHA_PARAM = '/v1/recaptchaParams',\n  START_MFA_ENROLLMENT = '/v2/accounts/mfaEnrollment:start',\n  FINALIZE_MFA_ENROLLMENT = '/v2/accounts/mfaEnrollment:finalize',\n  START_MFA_SIGN_IN = '/v2/accounts/mfaSignIn:start',\n  FINALIZE_MFA_SIGN_IN = '/v2/accounts/mfaSignIn:finalize',\n  WITHDRAW_MFA = '/v2/accounts/mfaEnrollment:withdraw',\n  GET_PROJECT_CONFIG = '/v1/projects',\n  GET_RECAPTCHA_CONFIG = '/v2/recaptchaConfig',\n  GET_PASSWORD_POLICY = '/v2/passwordPolicy',\n  TOKEN = '/v1/token',\n  REVOKE_TOKEN = '/v2/accounts:revokeToken'\n}\n\nexport const enum RecaptchaClientType {\n  WEB = 'CLIENT_TYPE_WEB',\n  ANDROID = 'CLIENT_TYPE_ANDROID',\n  IOS = 'CLIENT_TYPE_IOS'\n}\n\nexport const enum RecaptchaVersion {\n  ENTERPRISE = 'RECAPTCHA_ENTERPRISE'\n}\n\nexport const enum RecaptchaActionName {\n  SIGN_IN_WITH_PASSWORD = 'signInWithPassword',\n  GET_OOB_CODE = 'getOobCode',\n  SIGN_UP_PASSWORD = 'signUpPassword'\n}\n\nexport const enum EnforcementState {\n  ENFORCE = 'ENFORCE',\n  AUDIT = 'AUDIT',\n  OFF = 'OFF',\n  ENFORCEMENT_STATE_UNSPECIFIED = 'ENFORCEMENT_STATE_UNSPECIFIED'\n}\n\n// Providers that have reCAPTCHA Enterprise support.\nexport const enum RecaptchaProvider {\n  EMAIL_PASSWORD_PROVIDER = 'EMAIL_PASSWORD_PROVIDER'\n}\n\nexport const DEFAULT_API_TIMEOUT_MS = new Delay(30_000, 60_000);\n\nexport function _addTidIfNecessary<T extends { tenantId?: string }>(\n  auth: Auth,\n  request: T\n): T {\n  if (auth.tenantId && !request.tenantId) {\n    return {\n      ...request,\n      tenantId: auth.tenantId\n    };\n  }\n  return request;\n}\n\nexport async function _performApiRequest<T, V>(\n  auth: Auth,\n  method: HttpMethod,\n  path: Endpoint,\n  request?: T,\n  customErrorMap: Partial<ServerErrorMap<ServerError>> = {}\n): Promise<V> {\n  return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n    let body = {};\n    let params = {};\n    if (request) {\n      if (method === HttpMethod.GET) {\n        params = request;\n      } else {\n        body = {\n          body: JSON.stringify(request)\n        };\n      }\n    }\n\n    const query = querystring({\n      key: auth.config.apiKey,\n      ...params\n    }).slice(1);\n\n    const headers = await (auth as AuthInternal)._getAdditionalHeaders();\n    headers[HttpHeader.CONTENT_TYPE] = 'application/json';\n\n    if (auth.languageCode) {\n      headers[HttpHeader.X_FIREBASE_LOCALE] = auth.languageCode;\n    }\n\n    return FetchProvider.fetch()(\n      _getFinalTarget(auth, auth.config.apiHost, path, query),\n      {\n        method,\n        headers,\n        referrerPolicy: 'no-referrer',\n        ...body\n      }\n    );\n  });\n}\n\nexport async function _performFetchWithErrorHandling<V>(\n  auth: Auth,\n  customErrorMap: Partial<ServerErrorMap<ServerError>>,\n  fetchFn: () => Promise<Response>\n): Promise<V> {\n  (auth as AuthInternal)._canInitEmulator = false;\n  const errorMap = { ...SERVER_ERROR_MAP, ...customErrorMap };\n  try {\n    const networkTimeout = new NetworkTimeout<Response>(auth);\n    const response: Response = await Promise.race<Promise<Response>>([\n      fetchFn(),\n      networkTimeout.promise\n    ]);\n\n    // If we've reached this point, the fetch succeeded and the networkTimeout\n    // didn't throw; clear the network timeout delay so that Node won't hang\n    networkTimeout.clearNetworkTimeout();\n\n    const json = await response.json();\n    if ('needConfirmation' in json) {\n      throw _makeTaggedError(auth, AuthErrorCode.NEED_CONFIRMATION, json);\n    }\n\n    if (response.ok && !('errorMessage' in json)) {\n      return json;\n    } else {\n      const errorMessage = response.ok ? json.errorMessage : json.error.message;\n      const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n      if (serverErrorCode === ServerError.FEDERATED_USER_ID_ALREADY_LINKED) {\n        throw _makeTaggedError(\n          auth,\n          AuthErrorCode.CREDENTIAL_ALREADY_IN_USE,\n          json\n        );\n      } else if (serverErrorCode === ServerError.EMAIL_EXISTS) {\n        throw _makeTaggedError(auth, AuthErrorCode.EMAIL_EXISTS, json);\n      } else if (serverErrorCode === ServerError.USER_DISABLED) {\n        throw _makeTaggedError(auth, AuthErrorCode.USER_DISABLED, json);\n      }\n      const authError =\n        errorMap[serverErrorCode as ServerError] ||\n        (serverErrorCode\n          .toLowerCase()\n          .replace(/[_\\s]+/g, '-') as unknown as AuthErrorCode);\n      if (serverErrorMessage) {\n        throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n      } else {\n        _fail(auth, authError);\n      }\n    }\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      throw e;\n    }\n    // Changing this to a different error code will log user out when there is a network error\n    // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n    // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n    _fail(auth, AuthErrorCode.NETWORK_REQUEST_FAILED, { 'message': String(e) });\n  }\n}\n\nexport async function _performSignInRequest<T, V extends IdTokenResponse>(\n  auth: Auth,\n  method: HttpMethod,\n  path: Endpoint,\n  request?: T,\n  customErrorMap: Partial<ServerErrorMap<ServerError>> = {}\n): Promise<V> {\n  const serverResponse = (await _performApiRequest<T, V | IdTokenMfaResponse>(\n    auth,\n    method,\n    path,\n    request,\n    customErrorMap\n  )) as V;\n  if ('mfaPendingCredential' in serverResponse) {\n    _fail(auth, AuthErrorCode.MFA_REQUIRED, {\n      _serverResponse: serverResponse\n    });\n  }\n\n  return serverResponse;\n}\n\nexport function _getFinalTarget(\n  auth: Auth,\n  host: string,\n  path: string,\n  query: string\n): string {\n  const base = `${host}${path}?${query}`;\n\n  if (!(auth as AuthInternal).config.emulator) {\n    return `${auth.config.apiScheme}://${base}`;\n  }\n\n  return _emulatorUrl(auth.config as ConfigInternal, base);\n}\n\nexport function _parseEnforcementState(\n  enforcementStateStr: string\n): EnforcementState {\n  switch (enforcementStateStr) {\n    case 'ENFORCE':\n      return EnforcementState.ENFORCE;\n    case 'AUDIT':\n      return EnforcementState.AUDIT;\n    case 'OFF':\n      return EnforcementState.OFF;\n    default:\n      return EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED;\n  }\n}\n\nclass NetworkTimeout<T> {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timer: any | null = null;\n  readonly promise = new Promise<T>((_, reject) => {\n    this.timer = setTimeout(() => {\n      return reject(\n        _createError(this.auth, AuthErrorCode.NETWORK_REQUEST_FAILED)\n      );\n    }, DEFAULT_API_TIMEOUT_MS.get());\n  });\n\n  clearNetworkTimeout(): void {\n    clearTimeout(this.timer);\n  }\n\n  constructor(private readonly auth: Auth) {}\n}\n\ninterface PotentialResponse extends IdTokenResponse {\n  email?: string;\n  phoneNumber?: string;\n}\n\nexport function _makeTaggedError(\n  auth: Auth,\n  code: AuthErrorCode,\n  response: PotentialResponse\n): FirebaseError {\n  const errorParams: NamedErrorParams = {\n    appName: auth.name\n  };\n\n  if (response.email) {\n    errorParams.email = response.email;\n  }\n  if (response.phoneNumber) {\n    errorParams.phoneNumber = response.phoneNumber;\n  }\n\n  const error = _createError(auth, code, errorParams);\n\n  // We know customData is defined on error because errorParams is defined\n  (error.customData! as TaggedWithTokenResponse)._tokenResponse = response;\n  return error;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RecaptchaParameters } from '../../model/public_types';\nimport {\n  GetRecaptchaConfigResponse,\n  RecaptchaEnforcementProviderState\n} from '../../api/authentication/recaptcha';\nimport { EnforcementState, _parseEnforcementState } from '../../api/index';\n\n// reCAPTCHA v2 interface\nexport interface Recaptcha {\n  render: (container: HTMLElement, parameters: RecaptchaParameters) => number;\n  getResponse: (id: number) => string;\n  execute: (id: number) => unknown;\n  reset: (id: number) => unknown;\n}\n\nexport function isV2(\n  grecaptcha: Recaptcha | GreCAPTCHA | undefined\n): grecaptcha is Recaptcha {\n  return (\n    grecaptcha !== undefined &&\n    (grecaptcha as Recaptcha).getResponse !== undefined\n  );\n}\n\n// reCAPTCHA Enterprise & v3 shared interface\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\n// reCAPTCHA Enterprise interface\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n\nexport function isEnterprise(\n  grecaptcha: Recaptcha | GreCAPTCHA | undefined\n): grecaptcha is GreCAPTCHATopLevel {\n  return (\n    grecaptcha !== undefined &&\n    (grecaptcha as GreCAPTCHATopLevel).enterprise !== undefined\n  );\n}\n\n// TODO(chuanr): Replace this with the AuthWindow after resolving the dependency issue in Node.js env.\ndeclare global {\n  interface Window {\n    grecaptcha?: Recaptcha | GreCAPTCHATopLevel;\n  }\n}\n\nexport class RecaptchaConfig {\n  /**\n   * The reCAPTCHA site key.\n   */\n  siteKey: string = '';\n\n  /**\n   * The list of providers and their enablement status for reCAPTCHA Enterprise.\n   */\n  recaptchaEnforcementState: RecaptchaEnforcementProviderState[] = [];\n\n  constructor(response: GetRecaptchaConfigResponse) {\n    if (response.recaptchaKey === undefined) {\n      throw new Error('recaptchaKey undefined');\n    }\n    // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n    this.siteKey = response.recaptchaKey.split('/')[3];\n    this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n  }\n\n  /**\n   * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n   *\n   * @param providerStr - The provider whose enforcement state is to be returned.\n   * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n   */\n  getProviderEnforcementState(providerStr: string): EnforcementState | null {\n    if (\n      !this.recaptchaEnforcementState ||\n      this.recaptchaEnforcementState.length === 0\n    ) {\n      return null;\n    }\n\n    for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\n      if (\n        recaptchaEnforcementState.provider &&\n        recaptchaEnforcementState.provider === providerStr\n      ) {\n        return _parseEnforcementState(\n          recaptchaEnforcementState.enforcementState\n        );\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n   *\n   * @param providerStr - The provider whose enablement state is to be returned.\n   * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n   */\n  isProviderEnabled(providerStr: string): boolean {\n    return (\n      this.getProviderEnforcementState(providerStr) ===\n        EnforcementState.ENFORCE ||\n      this.getProviderEnforcementState(providerStr) === EnforcementState.AUDIT\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _performApiRequest,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\ninterface GetRecaptchaParamResponse {\n  recaptchaSiteKey?: string;\n}\n\nexport async function getRecaptchaParams(auth: Auth): Promise<string> {\n  return (\n    (\n      await _performApiRequest<void, GetRecaptchaParamResponse>(\n        auth,\n        HttpMethod.GET,\n        Endpoint.GET_RECAPTCHA_PARAM\n      )\n    ).recaptchaSiteKey || ''\n  );\n}\n\n// The following functions are for reCAPTCHA enterprise integration.\ninterface GetRecaptchaConfigRequest {\n  tenantId?: string;\n  clientType?: RecaptchaClientType;\n  version?: RecaptchaVersion;\n}\n\nexport interface RecaptchaEnforcementProviderState {\n  provider: string;\n  enforcementState: string;\n}\n\nexport interface GetRecaptchaConfigResponse {\n  recaptchaKey: string;\n  recaptchaEnforcementState: RecaptchaEnforcementProviderState[];\n}\n\nexport async function getRecaptchaConfig(\n  auth: Auth,\n  request: GetRecaptchaConfigRequest\n): Promise<GetRecaptchaConfigResponse> {\n  return _performApiRequest<\n    GetRecaptchaConfigRequest,\n    GetRecaptchaConfigResponse\n  >(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_RECAPTCHA_CONFIG,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Endpoint, HttpMethod, _performApiRequest } from '../index';\nimport { MfaEnrollment } from './mfa';\nimport { Auth } from '../../model/public_types';\n\nexport interface DeleteAccountRequest {\n  idToken: string;\n}\n\nexport async function deleteAccount(\n  auth: Auth,\n  request: DeleteAccountRequest\n): Promise<void> {\n  return _performApiRequest<DeleteAccountRequest, void>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.DELETE_ACCOUNT,\n    request\n  );\n}\n\nexport interface ProviderUserInfo {\n  providerId: string;\n  rawId?: string;\n  email?: string;\n  displayName?: string;\n  photoUrl?: string;\n  phoneNumber?: string;\n}\n\nexport interface DeleteLinkedAccountsRequest {\n  idToken: string;\n  deleteProvider: string[];\n}\n\nexport interface DeleteLinkedAccountsResponse {\n  providerUserInfo: ProviderUserInfo[];\n}\n\nexport async function deleteLinkedAccounts(\n  auth: Auth,\n  request: DeleteLinkedAccountsRequest\n): Promise<DeleteLinkedAccountsResponse> {\n  return _performApiRequest<\n    DeleteLinkedAccountsRequest,\n    DeleteLinkedAccountsResponse\n  >(auth, HttpMethod.POST, Endpoint.SET_ACCOUNT_INFO, request);\n}\n\nexport interface APIUserInfo {\n  localId?: string;\n  displayName?: string;\n  photoUrl?: string;\n  email?: string;\n  emailVerified?: boolean;\n  phoneNumber?: string;\n  lastLoginAt?: number;\n  createdAt?: number;\n  tenantId?: string;\n  passwordHash?: string;\n  providerUserInfo?: ProviderUserInfo[];\n  mfaInfo?: MfaEnrollment[];\n}\n\nexport interface GetAccountInfoRequest {\n  idToken: string;\n}\n\nexport interface GetAccountInfoResponse {\n  users: APIUserInfo[];\n}\n\nexport async function getAccountInfo(\n  auth: Auth,\n  request: GetAccountInfoRequest\n): Promise<GetAccountInfoResponse> {\n  return _performApiRequest<GetAccountInfoRequest, GetAccountInfoResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.GET_ACCOUNT_INFO,\n    request\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function utcTimestampToDateString(\n  utcTimestamp?: string | number\n): string | undefined {\n  if (!utcTimestamp) {\n    return undefined;\n  }\n  try {\n    // Convert to date object.\n    const date = new Date(Number(utcTimestamp));\n    // Test date is valid.\n    if (!isNaN(date.getTime())) {\n      // Convert to UTC date string.\n      return date.toUTCString();\n    }\n  } catch (e) {\n    // Do nothing. undefined will be returned.\n  }\n  return undefined;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdTokenResult, ParsedToken, User } from '../../model/public_types';\nimport { base64Decode, getModularInstance } from '@firebase/util';\n\nimport { UserInternal } from '../../model/user';\nimport { _assert } from '../util/assert';\nimport { _logError } from '../util/log';\nimport { utcTimestampToDateString } from '../util/time';\nimport { AuthErrorCode } from '../errors';\n\n/**\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport function getIdToken(user: User, forceRefresh = false): Promise<string> {\n  return getModularInstance(user).getIdToken(forceRefresh);\n}\n\n/**\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getIdTokenResult(\n  user: User,\n  forceRefresh = false\n): Promise<IdTokenResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const token = await userInternal.getIdToken(forceRefresh);\n  const claims = _parseToken(token);\n\n  _assert(\n    claims && claims.exp && claims.auth_time && claims.iat,\n    userInternal.auth,\n    AuthErrorCode.INTERNAL_ERROR\n  );\n  const firebase =\n    typeof claims.firebase === 'object' ? claims.firebase : undefined;\n\n  const signInProvider: string | undefined = firebase?.['sign_in_provider'];\n\n  return {\n    claims,\n    token,\n    authTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.auth_time)\n    )!,\n    issuedAtTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.iat)\n    )!,\n    expirationTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.exp)\n    )!,\n    signInProvider: signInProvider || null,\n    signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n  };\n}\n\nfunction secondsStringToMilliseconds(seconds: string): number {\n  return Number(seconds) * 1000;\n}\n\nexport function _parseToken(token: string): ParsedToken | null {\n  const [algorithm, payload, signature] = token.split('.');\n  if (\n    algorithm === undefined ||\n    payload === undefined ||\n    signature === undefined\n  ) {\n    _logError('JWT malformed, contained fewer than 3 sections');\n    return null;\n  }\n\n  try {\n    const decoded = base64Decode(payload);\n    if (!decoded) {\n      _logError('Failed to decode base64 JWT payload');\n      return null;\n    }\n    return JSON.parse(decoded);\n  } catch (e) {\n    _logError(\n      'Caught error parsing JWT payload as JSON',\n      (e as Error)?.toString()\n    );\n    return null;\n  }\n}\n\n/**\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n */\nexport function _tokenExpiresIn(token: string): number {\n  const parsedToken = _parseToken(token);\n  _assert(parsedToken, AuthErrorCode.INTERNAL_ERROR);\n  _assert(typeof parsedToken.exp !== 'undefined', AuthErrorCode.INTERNAL_ERROR);\n  _assert(typeof parsedToken.iat !== 'undefined', AuthErrorCode.INTERNAL_ERROR);\n  return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\n\nexport async function _logoutIfInvalidated<T>(\n  user: UserInternal,\n  promise: Promise<T>,\n  bypassAuthState = false\n): Promise<T> {\n  if (bypassAuthState) {\n    return promise;\n  }\n  try {\n    return await promise;\n  } catch (e) {\n    if (e instanceof FirebaseError && isUserInvalidated(e)) {\n      if (user.auth.currentUser === user) {\n        await user.auth.signOut();\n      }\n    }\n\n    throw e;\n  }\n}\n\nfunction isUserInvalidated({ code }: FirebaseError): boolean {\n  return (\n    code === `auth/${AuthErrorCode.USER_DISABLED}` ||\n    code === `auth/${AuthErrorCode.TOKEN_EXPIRED}`\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\n\n// Refresh the token five minutes before expiration\nexport const enum Duration {\n  OFFSET = 5 * 1000 * 60,\n  RETRY_BACKOFF_MIN = 30 * 1000,\n  RETRY_BACKOFF_MAX = 16 * 60 * 1000\n}\n\nexport class ProactiveRefresh {\n  private isRunning = false;\n\n  // Node timers and browser timers return fundamentally different types.\n  // We don't actually care what the value is but TS won't accept unknown and\n  // we can't cast properly in both environments.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timerId: any | null = null;\n  private errorBackoff = Duration.RETRY_BACKOFF_MIN;\n\n  constructor(private readonly user: UserInternal) {}\n\n  _start(): void {\n    if (this.isRunning) {\n      return;\n    }\n\n    this.isRunning = true;\n    this.schedule();\n  }\n\n  _stop(): void {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.isRunning = false;\n    if (this.timerId !== null) {\n      clearTimeout(this.timerId);\n    }\n  }\n\n  private getInterval(wasError: boolean): number {\n    if (wasError) {\n      const interval = this.errorBackoff;\n      this.errorBackoff = Math.min(\n        this.errorBackoff * 2,\n        Duration.RETRY_BACKOFF_MAX\n      );\n      return interval;\n    } else {\n      // Reset the error backoff\n      this.errorBackoff = Duration.RETRY_BACKOFF_MIN;\n      const expTime = this.user.stsTokenManager.expirationTime ?? 0;\n      const interval = expTime - Date.now() - Duration.OFFSET;\n\n      return Math.max(0, interval);\n    }\n  }\n\n  private schedule(wasError = false): void {\n    if (!this.isRunning) {\n      // Just in case...\n      return;\n    }\n\n    const interval = this.getInterval(wasError);\n    this.timerId = setTimeout(async () => {\n      await this.iteration();\n    }, interval);\n  }\n\n  private async iteration(): Promise<void> {\n    try {\n      await this.user.getIdToken(true);\n    } catch (e) {\n      // Only retry on network errors\n      if (\n        (e as FirebaseError)?.code ===\n        `auth/${AuthErrorCode.NETWORK_REQUEST_FAILED}`\n      ) {\n        this.schedule(/* wasError */ true);\n      }\n\n      return;\n    }\n    this.schedule();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserMetadata as UserMetadataType } from '../../model/public_types';\n\nimport { utcTimestampToDateString } from '../util/time';\n\nexport class UserMetadata implements UserMetadataType {\n  creationTime?: string;\n  lastSignInTime?: string;\n\n  constructor(\n    private createdAt?: string | number,\n    private lastLoginAt?: string | number\n  ) {\n    this._initializeTime();\n  }\n\n  private _initializeTime(): void {\n    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n    this.creationTime = utcTimestampToDateString(this.createdAt);\n  }\n\n  _copy(metadata: UserMetadata): void {\n    this.createdAt = metadata.createdAt;\n    this.lastLoginAt = metadata.lastLoginAt;\n    this._initializeTime();\n  }\n\n  toJSON(): object {\n    return {\n      createdAt: this.createdAt,\n      lastLoginAt: this.lastLoginAt\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User, UserInfo } from '../../model/public_types';\n\nimport {\n  getAccountInfo,\n  ProviderUserInfo\n} from '../../api/account_management/account';\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { UserMetadata } from './user_metadata';\nimport { getModularInstance } from '@firebase/util';\n\nexport async function _reloadWithoutSaving(user: UserInternal): Promise<void> {\n  const auth = user.auth;\n  const idToken = await user.getIdToken();\n  const response = await _logoutIfInvalidated(\n    user,\n    getAccountInfo(auth, { idToken })\n  );\n\n  _assert(response?.users.length, auth, AuthErrorCode.INTERNAL_ERROR);\n\n  const coreAccount = response.users[0];\n\n  user._notifyReloadListener(coreAccount);\n\n  const newProviderData = coreAccount.providerUserInfo?.length\n    ? extractProviderData(coreAccount.providerUserInfo)\n    : [];\n\n  const providerData = mergeProviderData(user.providerData, newProviderData);\n\n  // Preserves the non-nonymous status of the stored user, even if no more\n  // credentials (federated or email/password) are linked to the user. If\n  // the user was previously anonymous, then use provider data to update.\n  // On the other hand, if it was not anonymous before, it should never be\n  // considered anonymous now.\n  const oldIsAnonymous = user.isAnonymous;\n  const newIsAnonymous =\n    !(user.email && coreAccount.passwordHash) && !providerData?.length;\n  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n\n  const updates: Partial<UserInternal> = {\n    uid: coreAccount.localId,\n    displayName: coreAccount.displayName || null,\n    photoURL: coreAccount.photoUrl || null,\n    email: coreAccount.email || null,\n    emailVerified: coreAccount.emailVerified || false,\n    phoneNumber: coreAccount.phoneNumber || null,\n    tenantId: coreAccount.tenantId || null,\n    providerData,\n    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n    isAnonymous\n  };\n\n  Object.assign(user, updates);\n}\n\n/**\n * Reloads user account data, if signed in.\n *\n * @param user - The user.\n *\n * @public\n */\nexport async function reload(user: User): Promise<void> {\n  const userInternal: UserInternal = getModularInstance(user) as UserInternal;\n  await _reloadWithoutSaving(userInternal);\n\n  // Even though the current user hasn't changed, update\n  // current user will trigger a persistence update w/ the\n  // new info.\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  userInternal.auth._notifyListenersIfCurrent(userInternal);\n}\n\nfunction mergeProviderData(\n  original: UserInfo[],\n  newData: UserInfo[]\n): UserInfo[] {\n  const deduped = original.filter(\n    o => !newData.some(n => n.providerId === o.providerId)\n  );\n  return [...deduped, ...newData];\n}\n\nexport function extractProviderData(providers: ProviderUserInfo[]): UserInfo[] {\n  return providers.map(({ providerId, ...provider }) => {\n    return {\n      providerId,\n      uid: provider.rawId || '',\n      displayName: provider.displayName || null,\n      email: provider.email || null,\n      phoneNumber: provider.phoneNumber || null,\n      photoURL: provider.photoUrl || null\n    };\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable camelcase */\n\nimport { querystring } from '@firebase/util';\n\nimport {\n  _getFinalTarget,\n  _performFetchWithErrorHandling,\n  _performApiRequest,\n  _addTidIfNecessary,\n  HttpMethod,\n  HttpHeader,\n  Endpoint\n} from '../index';\nimport { FetchProvider } from '../../core/util/fetch_provider';\nimport { Auth } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\n\nexport const enum TokenType {\n  REFRESH_TOKEN = 'REFRESH_TOKEN',\n  ACCESS_TOKEN = 'ACCESS_TOKEN'\n}\n\n/** The server responses with snake_case; we convert to camelCase */\ninterface RequestStsTokenServerResponse {\n  access_token: string;\n  expires_in: string;\n  refresh_token: string;\n}\n\nexport interface RequestStsTokenResponse {\n  accessToken: string;\n  expiresIn: string;\n  refreshToken: string;\n}\n\nexport interface RevokeTokenRequest {\n  providerId: string;\n  tokenType: TokenType;\n  token: string;\n  idToken: string;\n  tenantId?: string;\n}\n\nexport interface RevokeTokenResponse {}\n\nexport async function requestStsToken(\n  auth: Auth,\n  refreshToken: string\n): Promise<RequestStsTokenResponse> {\n  const response =\n    await _performFetchWithErrorHandling<RequestStsTokenServerResponse>(\n      auth,\n      {},\n      async () => {\n        const body = querystring({\n          'grant_type': 'refresh_token',\n          'refresh_token': refreshToken\n        }).slice(1);\n        const { tokenApiHost, apiKey } = auth.config;\n        const url = _getFinalTarget(\n          auth,\n          tokenApiHost,\n          Endpoint.TOKEN,\n          `key=${apiKey}`\n        );\n\n        const headers = await (auth as AuthInternal)._getAdditionalHeaders();\n        headers[HttpHeader.CONTENT_TYPE] = 'application/x-www-form-urlencoded';\n\n        return FetchProvider.fetch()(url, {\n          method: HttpMethod.POST,\n          headers,\n          body\n        });\n      }\n    );\n\n  // The response comes back in snake_case. Convert to camel:\n  return {\n    accessToken: response.access_token,\n    expiresIn: response.expires_in,\n    refreshToken: response.refresh_token\n  };\n}\n\nexport async function revokeToken(\n  auth: Auth,\n  request: RevokeTokenRequest\n): Promise<RevokeTokenResponse> {\n  return _performApiRequest<RevokeTokenRequest, RevokeTokenResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.REVOKE_TOKEN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\nimport { requestStsToken } from '../../api/authentication/token';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { PersistedBlob } from '../persistence';\nimport { _assert, debugFail } from '../util/assert';\nimport { _tokenExpiresIn } from './id_token_result';\n\n/**\n * The number of milliseconds before the official expiration time of a token\n * to refresh that token, to provide a buffer for RPCs to complete.\n */\nexport const enum Buffer {\n  TOKEN_REFRESH = 30_000\n}\n\n/**\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nexport class StsTokenManager {\n  refreshToken: string | null = null;\n  accessToken: string | null = null;\n  expirationTime: number | null = null;\n\n  get isExpired(): boolean {\n    return (\n      !this.expirationTime ||\n      Date.now() > this.expirationTime - Buffer.TOKEN_REFRESH\n    );\n  }\n\n  updateFromServerResponse(\n    response: IdTokenResponse | FinalizeMfaResponse\n  ): void {\n    _assert(response.idToken, AuthErrorCode.INTERNAL_ERROR);\n    _assert(\n      typeof response.idToken !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    _assert(\n      typeof response.refreshToken !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const expiresIn =\n      'expiresIn' in response && typeof response.expiresIn !== 'undefined'\n        ? Number(response.expiresIn)\n        : _tokenExpiresIn(response.idToken);\n    this.updateTokensAndExpiration(\n      response.idToken,\n      response.refreshToken,\n      expiresIn\n    );\n  }\n\n  updateFromIdToken(idToken: string): void {\n    _assert(idToken.length !== 0, AuthErrorCode.INTERNAL_ERROR);\n    const expiresIn = _tokenExpiresIn(idToken);\n    this.updateTokensAndExpiration(idToken, null, expiresIn);\n  }\n\n  async getToken(\n    auth: AuthInternal,\n    forceRefresh = false\n  ): Promise<string | null> {\n    if (!forceRefresh && this.accessToken && !this.isExpired) {\n      return this.accessToken;\n    }\n\n    _assert(this.refreshToken, auth, AuthErrorCode.TOKEN_EXPIRED);\n\n    if (this.refreshToken) {\n      await this.refresh(auth, this.refreshToken!);\n      return this.accessToken;\n    }\n\n    return null;\n  }\n\n  clearRefreshToken(): void {\n    this.refreshToken = null;\n  }\n\n  private async refresh(auth: AuthInternal, oldToken: string): Promise<void> {\n    const { accessToken, refreshToken, expiresIn } = await requestStsToken(\n      auth,\n      oldToken\n    );\n    this.updateTokensAndExpiration(\n      accessToken,\n      refreshToken,\n      Number(expiresIn)\n    );\n  }\n\n  private updateTokensAndExpiration(\n    accessToken: string,\n    refreshToken: string | null,\n    expiresInSec: number\n  ): void {\n    this.refreshToken = refreshToken || null;\n    this.accessToken = accessToken || null;\n    this.expirationTime = Date.now() + expiresInSec * 1000;\n  }\n\n  static fromJSON(appName: string, object: PersistedBlob): StsTokenManager {\n    const { refreshToken, accessToken, expirationTime } = object;\n\n    const manager = new StsTokenManager();\n    if (refreshToken) {\n      _assert(typeof refreshToken === 'string', AuthErrorCode.INTERNAL_ERROR, {\n        appName\n      });\n      manager.refreshToken = refreshToken;\n    }\n    if (accessToken) {\n      _assert(typeof accessToken === 'string', AuthErrorCode.INTERNAL_ERROR, {\n        appName\n      });\n      manager.accessToken = accessToken;\n    }\n    if (expirationTime) {\n      _assert(\n        typeof expirationTime === 'number',\n        AuthErrorCode.INTERNAL_ERROR,\n        {\n          appName\n        }\n      );\n      manager.expirationTime = expirationTime;\n    }\n    return manager;\n  }\n\n  toJSON(): object {\n    return {\n      refreshToken: this.refreshToken,\n      accessToken: this.accessToken,\n      expirationTime: this.expirationTime\n    };\n  }\n\n  _assign(stsTokenManager: StsTokenManager): void {\n    this.accessToken = stsTokenManager.accessToken;\n    this.refreshToken = stsTokenManager.refreshToken;\n    this.expirationTime = stsTokenManager.expirationTime;\n  }\n\n  _clone(): StsTokenManager {\n    return Object.assign(new StsTokenManager(), this.toJSON());\n  }\n\n  _performRefresh(): never {\n    return debugFail('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdTokenResult, UserInfo } from '../../model/public_types';\nimport { NextFn } from '@firebase/util';\nimport {\n  APIUserInfo,\n  GetAccountInfoResponse,\n  deleteAccount\n} from '../../api/account_management/account';\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport {\n  MutableUserInfo,\n  UserInternal,\n  UserParameters\n} from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { PersistedBlob } from '../persistence';\nimport {\n  _assert,\n  _serverAppCurrentUserOperationNotSupportedError\n} from '../util/assert';\nimport { getIdTokenResult } from './id_token_result';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { ProactiveRefresh } from './proactive_refresh';\nimport { extractProviderData, _reloadWithoutSaving, reload } from './reload';\nimport { StsTokenManager } from './token_manager';\nimport { UserMetadata } from './user_metadata';\nimport { ProviderId } from '../../model/enums';\nimport { _isFirebaseServerApp } from '@firebase/app';\n\nfunction assertStringOrUndefined(\n  assertion: unknown,\n  appName: string\n): asserts assertion is string | undefined {\n  _assert(\n    typeof assertion === 'string' || typeof assertion === 'undefined',\n    AuthErrorCode.INTERNAL_ERROR,\n    { appName }\n  );\n}\n\nexport class UserImpl implements UserInternal {\n  // For the user object, provider is always Firebase.\n  readonly providerId = ProviderId.FIREBASE;\n  stsTokenManager: StsTokenManager;\n  // Last known accessToken so we know when it changes\n  private accessToken: string | null;\n\n  uid: string;\n  auth: AuthInternal;\n  emailVerified: boolean;\n  isAnonymous: boolean;\n  tenantId: string | null;\n  readonly metadata: UserMetadata;\n  providerData: MutableUserInfo[];\n\n  // Optional fields from UserInfo\n  displayName: string | null;\n  email: string | null;\n  phoneNumber: string | null;\n  photoURL: string | null;\n\n  _redirectEventId?: string;\n  private readonly proactiveRefresh = new ProactiveRefresh(this);\n\n  constructor({ uid, auth, stsTokenManager, ...opt }: UserParameters) {\n    this.uid = uid;\n    this.auth = auth;\n    this.stsTokenManager = stsTokenManager;\n    this.accessToken = stsTokenManager.accessToken;\n    this.displayName = opt.displayName || null;\n    this.email = opt.email || null;\n    this.emailVerified = opt.emailVerified || false;\n    this.phoneNumber = opt.phoneNumber || null;\n    this.photoURL = opt.photoURL || null;\n    this.isAnonymous = opt.isAnonymous || false;\n    this.tenantId = opt.tenantId || null;\n    this.providerData = opt.providerData ? [...opt.providerData] : [];\n    this.metadata = new UserMetadata(\n      opt.createdAt || undefined,\n      opt.lastLoginAt || undefined\n    );\n  }\n\n  async getIdToken(forceRefresh?: boolean): Promise<string> {\n    const accessToken = await _logoutIfInvalidated(\n      this,\n      this.stsTokenManager.getToken(this.auth, forceRefresh)\n    );\n    _assert(accessToken, this.auth, AuthErrorCode.INTERNAL_ERROR);\n\n    if (this.accessToken !== accessToken) {\n      this.accessToken = accessToken;\n      await this.auth._persistUserIfCurrent(this);\n      this.auth._notifyListenersIfCurrent(this);\n    }\n\n    return accessToken;\n  }\n\n  getIdTokenResult(forceRefresh?: boolean): Promise<IdTokenResult> {\n    return getIdTokenResult(this, forceRefresh);\n  }\n\n  reload(): Promise<void> {\n    return reload(this);\n  }\n\n  private reloadUserInfo: APIUserInfo | null = null;\n  private reloadListener: NextFn<APIUserInfo> | null = null;\n\n  _assign(user: UserInternal): void {\n    if (this === user) {\n      return;\n    }\n    _assert(this.uid === user.uid, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.displayName = user.displayName;\n    this.photoURL = user.photoURL;\n    this.email = user.email;\n    this.emailVerified = user.emailVerified;\n    this.phoneNumber = user.phoneNumber;\n    this.isAnonymous = user.isAnonymous;\n    this.tenantId = user.tenantId;\n    this.providerData = user.providerData.map(userInfo => ({ ...userInfo }));\n    this.metadata._copy(user.metadata);\n    this.stsTokenManager._assign(user.stsTokenManager);\n  }\n\n  _clone(auth: AuthInternal): UserInternal {\n    const newUser = new UserImpl({\n      ...this,\n      auth,\n      stsTokenManager: this.stsTokenManager._clone()\n    });\n    newUser.metadata._copy(this.metadata);\n    return newUser;\n  }\n\n  _onReload(callback: NextFn<APIUserInfo>): void {\n    // There should only ever be one listener, and that is a single instance of MultiFactorUser\n    _assert(!this.reloadListener, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.reloadListener = callback;\n    if (this.reloadUserInfo) {\n      this._notifyReloadListener(this.reloadUserInfo);\n      this.reloadUserInfo = null;\n    }\n  }\n\n  _notifyReloadListener(userInfo: APIUserInfo): void {\n    if (this.reloadListener) {\n      this.reloadListener(userInfo);\n    } else {\n      // If no listener is subscribed yet, save the result so it's available when they do subscribe\n      this.reloadUserInfo = userInfo;\n    }\n  }\n\n  _startProactiveRefresh(): void {\n    this.proactiveRefresh._start();\n  }\n\n  _stopProactiveRefresh(): void {\n    this.proactiveRefresh._stop();\n  }\n\n  async _updateTokensIfNecessary(\n    response: IdTokenResponse | FinalizeMfaResponse,\n    reload = false\n  ): Promise<void> {\n    let tokensRefreshed = false;\n    if (\n      response.idToken &&\n      response.idToken !== this.stsTokenManager.accessToken\n    ) {\n      this.stsTokenManager.updateFromServerResponse(response);\n      tokensRefreshed = true;\n    }\n\n    if (reload) {\n      await _reloadWithoutSaving(this);\n    }\n\n    await this.auth._persistUserIfCurrent(this);\n    if (tokensRefreshed) {\n      this.auth._notifyListenersIfCurrent(this);\n    }\n  }\n\n  async delete(): Promise<void> {\n    if (_isFirebaseServerApp(this.auth.app)) {\n      return Promise.reject(\n        _serverAppCurrentUserOperationNotSupportedError(this.auth)\n      );\n    }\n    const idToken = await this.getIdToken();\n    await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));\n    this.stsTokenManager.clearRefreshToken();\n\n    // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n    //       cancels pending actions...\n\n    return this.auth.signOut();\n  }\n\n  toJSON(): PersistedBlob {\n    return {\n      uid: this.uid,\n      email: this.email || undefined,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName || undefined,\n      isAnonymous: this.isAnonymous,\n      photoURL: this.photoURL || undefined,\n      phoneNumber: this.phoneNumber || undefined,\n      tenantId: this.tenantId || undefined,\n      providerData: this.providerData.map(userInfo => ({ ...userInfo })),\n      stsTokenManager: this.stsTokenManager.toJSON(),\n      // Redirect event ID must be maintained in case there is a pending\n      // redirect event.\n      _redirectEventId: this._redirectEventId,\n      ...this.metadata.toJSON(),\n\n      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n      apiKey: this.auth.config.apiKey,\n      appName: this.auth.name\n      // Missing authDomain will be tolerated by the legacy SDK.\n      // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n    };\n  }\n\n  get refreshToken(): string {\n    return this.stsTokenManager.refreshToken || '';\n  }\n\n  static _fromJSON(auth: AuthInternal, object: PersistedBlob): UserInternal {\n    const displayName = object.displayName ?? undefined;\n    const email = object.email ?? undefined;\n    const phoneNumber = object.phoneNumber ?? undefined;\n    const photoURL = object.photoURL ?? undefined;\n    const tenantId = object.tenantId ?? undefined;\n    const _redirectEventId = object._redirectEventId ?? undefined;\n    const createdAt = object.createdAt ?? undefined;\n    const lastLoginAt = object.lastLoginAt ?? undefined;\n    const {\n      uid,\n      emailVerified,\n      isAnonymous,\n      providerData,\n      stsTokenManager: plainObjectTokenManager\n    } = object;\n\n    _assert(uid && plainObjectTokenManager, auth, AuthErrorCode.INTERNAL_ERROR);\n\n    const stsTokenManager = StsTokenManager.fromJSON(\n      this.name,\n      plainObjectTokenManager as PersistedBlob\n    );\n\n    _assert(typeof uid === 'string', auth, AuthErrorCode.INTERNAL_ERROR);\n    assertStringOrUndefined(displayName, auth.name);\n    assertStringOrUndefined(email, auth.name);\n    _assert(\n      typeof emailVerified === 'boolean',\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    _assert(\n      typeof isAnonymous === 'boolean',\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    assertStringOrUndefined(phoneNumber, auth.name);\n    assertStringOrUndefined(photoURL, auth.name);\n    assertStringOrUndefined(tenantId, auth.name);\n    assertStringOrUndefined(_redirectEventId, auth.name);\n    assertStringOrUndefined(createdAt, auth.name);\n    assertStringOrUndefined(lastLoginAt, auth.name);\n    const user = new UserImpl({\n      uid,\n      auth,\n      email,\n      emailVerified,\n      displayName,\n      isAnonymous,\n      photoURL,\n      phoneNumber,\n      tenantId,\n      stsTokenManager,\n      createdAt,\n      lastLoginAt\n    });\n\n    if (providerData && Array.isArray(providerData)) {\n      user.providerData = providerData.map(userInfo => ({ ...userInfo }));\n    }\n\n    if (_redirectEventId) {\n      user._redirectEventId = _redirectEventId;\n    }\n\n    return user;\n  }\n\n  /**\n   * Initialize a User from an idToken server response\n   * @param auth\n   * @param idTokenResponse\n   */\n  static async _fromIdTokenResponse(\n    auth: AuthInternal,\n    idTokenResponse: IdTokenResponse,\n    isAnonymous: boolean = false\n  ): Promise<UserInternal> {\n    const stsTokenManager = new StsTokenManager();\n    stsTokenManager.updateFromServerResponse(idTokenResponse);\n\n    // Initialize the Firebase Auth user.\n    const user = new UserImpl({\n      uid: idTokenResponse.localId,\n      auth,\n      stsTokenManager,\n      isAnonymous\n    });\n\n    // Updates the user info and data and resolves with a user instance.\n    await _reloadWithoutSaving(user);\n    return user;\n  }\n\n  /**\n   * Initialize a User from an idToken server response\n   * @param auth\n   * @param idTokenResponse\n   */\n  static async _fromGetAccountInfoResponse(\n    auth: AuthInternal,\n    response: GetAccountInfoResponse,\n    idToken: string\n  ): Promise<UserInternal> {\n    const coreAccount = response.users[0];\n    _assert(coreAccount.localId !== undefined, AuthErrorCode.INTERNAL_ERROR);\n\n    const providerData: UserInfo[] =\n      coreAccount.providerUserInfo !== undefined\n        ? extractProviderData(coreAccount.providerUserInfo)\n        : [];\n\n    const isAnonymous =\n      !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length;\n\n    const stsTokenManager = new StsTokenManager();\n    stsTokenManager.updateFromIdToken(idToken);\n\n    // Initialize the Firebase Auth user.\n    const user = new UserImpl({\n      uid: coreAccount.localId,\n      auth,\n      stsTokenManager,\n      isAnonymous\n    });\n\n    // update the user with data from the GetAccountInfo response.\n    const updates: Partial<UserInternal> = {\n      uid: coreAccount.localId,\n      displayName: coreAccount.displayName || null,\n      photoURL: coreAccount.photoUrl || null,\n      email: coreAccount.email || null,\n      emailVerified: coreAccount.emailVerified || false,\n      phoneNumber: coreAccount.phoneNumber || null,\n      tenantId: coreAccount.tenantId || null,\n      providerData,\n      metadata: new UserMetadata(\n        coreAccount.createdAt,\n        coreAccount.lastLoginAt\n      ),\n      isAnonymous:\n        !(coreAccount.email && coreAccount.passwordHash) &&\n        !providerData?.length\n    };\n\n    Object.assign(user, updates);\n    return user;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\n/**\n * Our API has a lot of one-off constants that are used to do things.\n * Unfortunately we can't export these as classes instantiated directly since\n * the constructor may side effect and therefore can't be proven to be safely\n * culled. Instead, we export these classes themselves as a lowerCamelCase\n * constant, and instantiate them under the hood.\n */\nexport interface SingletonInstantiator<T> {\n  new (): T;\n}\n\nconst instanceCache: Map<unknown, unknown> = new Map();\n\nexport function _getInstance<T>(cls: unknown): T {\n  debugAssert(cls instanceof Function, 'Expected a class definition');\n  let instance = instanceCache.get(cls) as T | undefined;\n\n  if (instance) {\n    debugAssert(\n      instance instanceof cls,\n      'Instance stored in cache mismatched with class'\n    );\n    return instance;\n  }\n\n  instance = new (cls as SingletonInstantiator<T>)();\n  instanceCache.set(cls, instance);\n  return instance;\n}\n\nexport function _clearInstanceMap(): void {\n  instanceCache.clear();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport {\n  PersistenceInternal,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener\n} from '../persistence';\n\nexport class InMemoryPersistence implements PersistenceInternal {\n  static type: 'NONE' = 'NONE';\n  readonly type = PersistenceType.NONE;\n  storage: Record<string, PersistenceValue> = {};\n\n  async _isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    this.storage[key] = value;\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const value = this.storage[key];\n    return value === undefined ? null : (value as T);\n  }\n\n  async _remove(key: string): Promise<void> {\n    delete this.storage[key];\n  }\n\n  _addListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n\n  _removeListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type 'NONE'.\n *\n * @public\n */\nexport const inMemoryPersistence: Persistence = InMemoryPersistence;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiKey, AppName, AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { PersistedBlob, PersistenceInternal } from '../persistence';\nimport { UserImpl } from '../user/user_impl';\nimport { _getInstance } from '../util/instantiator';\nimport { inMemoryPersistence } from './in_memory';\n\nexport const enum KeyName {\n  AUTH_USER = 'authUser',\n  AUTH_EVENT = 'authEvent',\n  REDIRECT_USER = 'redirectUser',\n  PERSISTENCE_USER = 'persistence'\n}\nexport const enum Namespace {\n  PERSISTENCE = 'firebase'\n}\n\nexport function _persistenceKeyName(\n  key: string,\n  apiKey: ApiKey,\n  appName: AppName\n): string {\n  return `${Namespace.PERSISTENCE}:${key}:${apiKey}:${appName}`;\n}\n\nexport class PersistenceUserManager {\n  private readonly fullUserKey: string;\n  private readonly fullPersistenceKey: string;\n  private readonly boundEventHandler: () => void;\n\n  private constructor(\n    public persistence: PersistenceInternal,\n    private readonly auth: AuthInternal,\n    private readonly userKey: string\n  ) {\n    const { config, name } = this.auth;\n    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n    this.fullPersistenceKey = _persistenceKeyName(\n      KeyName.PERSISTENCE_USER,\n      config.apiKey,\n      name\n    );\n    this.boundEventHandler = auth._onStorageEvent.bind(auth);\n    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n  }\n\n  setCurrentUser(user: UserInternal): Promise<void> {\n    return this.persistence._set(this.fullUserKey, user.toJSON());\n  }\n\n  async getCurrentUser(): Promise<UserInternal | null> {\n    const blob = await this.persistence._get<PersistedBlob>(this.fullUserKey);\n    return blob ? UserImpl._fromJSON(this.auth, blob) : null;\n  }\n\n  removeCurrentUser(): Promise<void> {\n    return this.persistence._remove(this.fullUserKey);\n  }\n\n  savePersistenceForRedirect(): Promise<void> {\n    return this.persistence._set(\n      this.fullPersistenceKey,\n      this.persistence.type\n    );\n  }\n\n  async setPersistence(newPersistence: PersistenceInternal): Promise<void> {\n    if (this.persistence === newPersistence) {\n      return;\n    }\n\n    const currentUser = await this.getCurrentUser();\n    await this.removeCurrentUser();\n\n    this.persistence = newPersistence;\n\n    if (currentUser) {\n      return this.setCurrentUser(currentUser);\n    }\n  }\n\n  delete(): void {\n    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n  }\n\n  static async create(\n    auth: AuthInternal,\n    persistenceHierarchy: PersistenceInternal[],\n    userKey = KeyName.AUTH_USER\n  ): Promise<PersistenceUserManager> {\n    if (!persistenceHierarchy.length) {\n      return new PersistenceUserManager(\n        _getInstance(inMemoryPersistence),\n        auth,\n        userKey\n      );\n    }\n\n    // Eliminate any persistences that are not available\n    const availablePersistences = (\n      await Promise.all(\n        persistenceHierarchy.map(async persistence => {\n          if (await persistence._isAvailable()) {\n            return persistence;\n          }\n          return undefined;\n        })\n      )\n    ).filter(persistence => persistence) as PersistenceInternal[];\n\n    // Fall back to the first persistence listed, or in memory if none available\n    let selectedPersistence =\n      availablePersistences[0] ||\n      _getInstance<PersistenceInternal>(inMemoryPersistence);\n\n    const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n\n    // Pull out the existing user, setting the chosen persistence to that\n    // persistence if the user exists.\n    let userToMigrate: UserInternal | null = null;\n    // Note, here we check for a user in _all_ persistences, not just the\n    // ones deemed available. If we can migrate a user out of a broken\n    // persistence, we will (but only if that persistence supports migration).\n    for (const persistence of persistenceHierarchy) {\n      try {\n        const blob = await persistence._get<PersistedBlob>(key);\n        if (blob) {\n          const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n          if (persistence !== selectedPersistence) {\n            userToMigrate = user;\n          }\n          selectedPersistence = persistence;\n          break;\n        }\n      } catch {}\n    }\n\n    // If we find the user in a persistence that does support migration, use\n    // that migration path (of only persistences that support migration)\n    const migrationHierarchy = availablePersistences.filter(\n      p => p._shouldAllowMigration\n    );\n\n    // If the persistence does _not_ allow migration, just finish off here\n    if (\n      !selectedPersistence._shouldAllowMigration ||\n      !migrationHierarchy.length\n    ) {\n      return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n\n    selectedPersistence = migrationHierarchy[0];\n    if (userToMigrate) {\n      // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n      // we'll just let it bubble to surface the error.\n      await selectedPersistence._set(key, userToMigrate.toJSON());\n    }\n\n    // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n    // such as users getting stuck with a previous account after signing out and refreshing the tab.\n    await Promise.all(\n      persistenceHierarchy.map(async persistence => {\n        if (persistence !== selectedPersistence) {\n          try {\n            await persistence._remove(key);\n          } catch {}\n        }\n      })\n    );\n    return new PersistenceUserManager(selectedPersistence, auth, userKey);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isIE, getUA } from '@firebase/util';\n\ninterface NavigatorStandalone extends Navigator {\n  standalone?: unknown;\n}\n\ninterface Document {\n  documentMode?: number;\n}\n\n/**\n * Enums for Browser name.\n */\nexport const enum BrowserName {\n  ANDROID = 'Android',\n  BLACKBERRY = 'Blackberry',\n  EDGE = 'Edge',\n  FIREFOX = 'Firefox',\n  IE = 'IE',\n  IEMOBILE = 'IEMobile',\n  OPERA = 'Opera',\n  OTHER = 'Other',\n  CHROME = 'Chrome',\n  SAFARI = 'Safari',\n  SILK = 'Silk',\n  WEBOS = 'Webos'\n}\n\n/**\n * Determine the browser for the purposes of reporting usage to the API\n */\nexport function _getBrowserName(userAgent: string): BrowserName | string {\n  const ua = userAgent.toLowerCase();\n  if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n    return BrowserName.OPERA;\n  } else if (_isIEMobile(ua)) {\n    // Windows phone IEMobile browser.\n    return BrowserName.IEMOBILE;\n  } else if (ua.includes('msie') || ua.includes('trident/')) {\n    return BrowserName.IE;\n  } else if (ua.includes('edge/')) {\n    return BrowserName.EDGE;\n  } else if (_isFirefox(ua)) {\n    return BrowserName.FIREFOX;\n  } else if (ua.includes('silk/')) {\n    return BrowserName.SILK;\n  } else if (_isBlackBerry(ua)) {\n    // Blackberry browser.\n    return BrowserName.BLACKBERRY;\n  } else if (_isWebOS(ua)) {\n    // WebOS default browser.\n    return BrowserName.WEBOS;\n  } else if (_isSafari(ua)) {\n    return BrowserName.SAFARI;\n  } else if (\n    (ua.includes('chrome/') || _isChromeIOS(ua)) &&\n    !ua.includes('edge/')\n  ) {\n    return BrowserName.CHROME;\n  } else if (_isAndroid(ua)) {\n    // Android stock browser.\n    return BrowserName.ANDROID;\n  } else {\n    // Most modern browsers have name/version at end of user agent string.\n    const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n    const matches = userAgent.match(re);\n    if (matches?.length === 2) {\n      return matches[1];\n    }\n  }\n  return BrowserName.OTHER;\n}\n\nexport function _isFirefox(ua = getUA()): boolean {\n  return /firefox\\//i.test(ua);\n}\n\nexport function _isSafari(userAgent = getUA()): boolean {\n  const ua = userAgent.toLowerCase();\n  return (\n    ua.includes('safari/') &&\n    !ua.includes('chrome/') &&\n    !ua.includes('crios/') &&\n    !ua.includes('android')\n  );\n}\n\nexport function _isChromeIOS(ua = getUA()): boolean {\n  return /crios\\//i.test(ua);\n}\n\nexport function _isIEMobile(ua = getUA()): boolean {\n  return /iemobile/i.test(ua);\n}\n\nexport function _isAndroid(ua = getUA()): boolean {\n  return /android/i.test(ua);\n}\n\nexport function _isBlackBerry(ua = getUA()): boolean {\n  return /blackberry/i.test(ua);\n}\n\nexport function _isWebOS(ua = getUA()): boolean {\n  return /webos/i.test(ua);\n}\n\nexport function _isIOS(ua = getUA()): boolean {\n  return (\n    /iphone|ipad|ipod/i.test(ua) ||\n    (/macintosh/i.test(ua) && /mobile/i.test(ua))\n  );\n}\n\nexport function _isIOS7Or8(ua = getUA()): boolean {\n  return (\n    /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) ||\n    /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua)\n  );\n}\n\nexport function _isIOSStandalone(ua = getUA()): boolean {\n  return _isIOS(ua) && !!(window.navigator as NavigatorStandalone)?.standalone;\n}\n\nexport function _isIE10(): boolean {\n  return isIE() && (document as Document).documentMode === 10;\n}\n\nexport function _isMobileBrowser(ua: string = getUA()): boolean {\n  // TODO: implement getBrowserName equivalent for OS.\n  return (\n    _isIOS(ua) ||\n    _isAndroid(ua) ||\n    _isWebOS(ua) ||\n    _isBlackBerry(ua) ||\n    /windows phone/i.test(ua) ||\n    _isIEMobile(ua)\n  );\n}\n\nexport function _isIframe(): boolean {\n  try {\n    // Check that the current window is not the top window.\n    // If so, return true.\n    return !!(window && window !== window.top);\n  } catch (e) {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { _getBrowserName } from './browser';\nimport { getUA } from '@firebase/util';\n\nexport const enum ClientImplementation {\n  CORE = 'JsCore'\n}\n\n/**\n * @internal\n */\nexport const enum ClientPlatform {\n  BROWSER = 'Browser',\n  NODE = 'Node',\n  REACT_NATIVE = 'ReactNative',\n  CORDOVA = 'Cordova',\n  WORKER = 'Worker',\n  WEB_EXTENSION = 'WebExtension'\n}\n\n/*\n * Determine the SDK version string\n */\nexport function _getClientVersion(\n  clientPlatform: ClientPlatform,\n  frameworks: readonly string[] = []\n): string {\n  let reportedPlatform: string;\n  switch (clientPlatform) {\n    case ClientPlatform.BROWSER:\n      // In a browser environment, report the browser name.\n      reportedPlatform = _getBrowserName(getUA());\n      break;\n    case ClientPlatform.WORKER:\n      // Technically a worker runs from a browser but we need to differentiate a\n      // worker from a browser.\n      // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n      reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;\n      break;\n    default:\n      reportedPlatform = clientPlatform;\n  }\n  const reportedFrameworks = frameworks.length\n    ? frameworks.join(',')\n    : 'FirebaseCore-web'; /* default value if no other framework is used */\n  return `${reportedPlatform}/${ClientImplementation.CORE}/${SDK_VERSION}/${reportedFrameworks}`;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthInternal } from '../../model/auth';\nimport { Unsubscribe, User } from '../../model/public_types';\nimport { AuthErrorCode } from '../errors';\n\ninterface MiddlewareEntry {\n  (user: User | null): Promise<void>;\n  onAbort?: () => void;\n}\n\nexport class AuthMiddlewareQueue {\n  private readonly queue: MiddlewareEntry[] = [];\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  pushCallback(\n    callback: (user: User | null) => void | Promise<void>,\n    onAbort?: () => void\n  ): Unsubscribe {\n    // The callback could be sync or async. Wrap it into a\n    // function that is always async.\n    const wrappedCallback: MiddlewareEntry = (\n      user: User | null\n    ): Promise<void> =>\n      new Promise((resolve, reject) => {\n        try {\n          const result = callback(user);\n          // Either resolve with existing promise or wrap a non-promise\n          // return value into a promise.\n          resolve(result);\n        } catch (e) {\n          // Sync callback throws.\n          reject(e);\n        }\n      });\n    // Attach the onAbort if present\n    wrappedCallback.onAbort = onAbort;\n    this.queue.push(wrappedCallback);\n\n    const index = this.queue.length - 1;\n    return () => {\n      // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n      // indexing of other elements.\n      this.queue[index] = () => Promise.resolve();\n    };\n  }\n\n  async runMiddleware(nextUser: User | null): Promise<void> {\n    if (this.auth.currentUser === nextUser) {\n      return;\n    }\n\n    // While running the middleware, build a temporary stack of onAbort\n    // callbacks to call if one middleware callback rejects.\n\n    const onAbortStack: Array<() => void> = [];\n    try {\n      for (const beforeStateCallback of this.queue) {\n        await beforeStateCallback(nextUser);\n\n        // Only push the onAbort if the callback succeeds\n        if (beforeStateCallback.onAbort) {\n          onAbortStack.push(beforeStateCallback.onAbort);\n        }\n      }\n    } catch (e) {\n      // Run all onAbort, with separate try/catch to ignore any errors and\n      // continue\n      onAbortStack.reverse();\n      for (const onAbort of onAbortStack) {\n        try {\n          onAbort();\n        } catch (_) {\n          /* swallow error */\n        }\n      }\n\n      throw this.auth._errorFactory.create(AuthErrorCode.LOGIN_BLOCKED, {\n        originalMessage: (e as Error)?.message\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performApiRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\n/**\n * Request object for fetching the password policy.\n */\nexport interface GetPasswordPolicyRequest {\n  tenantId?: string;\n}\n\n/**\n * Response object for fetching the password policy.\n */\nexport interface GetPasswordPolicyResponse {\n  customStrengthOptions: {\n    minPasswordLength?: number;\n    maxPasswordLength?: number;\n    containsLowercaseCharacter?: boolean;\n    containsUppercaseCharacter?: boolean;\n    containsNumericCharacter?: boolean;\n    containsNonAlphanumericCharacter?: boolean;\n  };\n  allowedNonAlphanumericCharacters?: string[];\n  enforcementState: string;\n  forceUpgradeOnSignin?: boolean;\n  schemaVersion: number;\n}\n\n/**\n * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n *\n * @param auth Auth object.\n * @param request Password policy request.\n * @returns Password policy response.\n */\nexport async function _getPasswordPolicy(\n  auth: Auth,\n  request: GetPasswordPolicyRequest = {}\n): Promise<GetPasswordPolicyResponse> {\n  return _performApiRequest<\n    GetPasswordPolicyRequest,\n    GetPasswordPolicyResponse\n  >(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_PASSWORD_POLICY,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GetPasswordPolicyResponse } from '../../api/password_policy/get_password_policy';\nimport {\n  PasswordPolicyCustomStrengthOptions,\n  PasswordPolicyInternal,\n  PasswordValidationStatusInternal\n} from '../../model/password_policy';\nimport { PasswordValidationStatus } from '../../model/public_types';\n\n// Minimum min password length enforced by the backend, even if no minimum length is set.\nconst MINIMUM_MIN_PASSWORD_LENGTH = 6;\n\n/**\n * Stores password policy requirements and provides password validation against the policy.\n *\n * @internal\n */\nexport class PasswordPolicyImpl implements PasswordPolicyInternal {\n  readonly customStrengthOptions: PasswordPolicyCustomStrengthOptions;\n  readonly allowedNonAlphanumericCharacters: string;\n  readonly enforcementState: string;\n  readonly forceUpgradeOnSignin: boolean;\n  readonly schemaVersion: number;\n\n  constructor(response: GetPasswordPolicyResponse) {\n    // Only include custom strength options defined in the response.\n    const responseOptions = response.customStrengthOptions;\n    this.customStrengthOptions = {};\n    // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n    this.customStrengthOptions.minPasswordLength =\n      responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;\n    if (responseOptions.maxPasswordLength) {\n      this.customStrengthOptions.maxPasswordLength =\n        responseOptions.maxPasswordLength;\n    }\n    if (responseOptions.containsLowercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsLowercaseLetter =\n        responseOptions.containsLowercaseCharacter;\n    }\n    if (responseOptions.containsUppercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsUppercaseLetter =\n        responseOptions.containsUppercaseCharacter;\n    }\n    if (responseOptions.containsNumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNumericCharacter =\n        responseOptions.containsNumericCharacter;\n    }\n    if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNonAlphanumericCharacter =\n        responseOptions.containsNonAlphanumericCharacter;\n    }\n\n    this.enforcementState = response.enforcementState;\n    if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n      this.enforcementState = 'OFF';\n    }\n\n    // Use an empty string if no non-alphanumeric characters are specified in the response.\n    this.allowedNonAlphanumericCharacters =\n      response.allowedNonAlphanumericCharacters?.join('') ?? '';\n\n    this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;\n    this.schemaVersion = response.schemaVersion;\n  }\n\n  validatePassword(password: string): PasswordValidationStatus {\n    const status: PasswordValidationStatusInternal = {\n      isValid: true,\n      passwordPolicy: this\n    };\n\n    // Check the password length and character options.\n    this.validatePasswordLengthOptions(password, status);\n    this.validatePasswordCharacterOptions(password, status);\n\n    // Combine the status into single isValid property.\n    status.isValid &&= status.meetsMinPasswordLength ?? true;\n    status.isValid &&= status.meetsMaxPasswordLength ?? true;\n    status.isValid &&= status.containsLowercaseLetter ?? true;\n    status.isValid &&= status.containsUppercaseLetter ?? true;\n    status.isValid &&= status.containsNumericCharacter ?? true;\n    status.isValid &&= status.containsNonAlphanumericCharacter ?? true;\n\n    return status;\n  }\n\n  /**\n   * Validates that the password meets the length options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  private validatePasswordLengthOptions(\n    password: string,\n    status: PasswordValidationStatusInternal\n  ): void {\n    const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n    const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n    if (minPasswordLength) {\n      status.meetsMinPasswordLength = password.length >= minPasswordLength;\n    }\n    if (maxPasswordLength) {\n      status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n    }\n  }\n\n  /**\n   * Validates that the password meets the character options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  private validatePasswordCharacterOptions(\n    password: string,\n    status: PasswordValidationStatusInternal\n  ): void {\n    // Assign statuses for requirements even if the password is an empty string.\n    this.updatePasswordCharacterOptionsStatuses(\n      status,\n      /* containsLowercaseCharacter= */ false,\n      /* containsUppercaseCharacter= */ false,\n      /* containsNumericCharacter= */ false,\n      /* containsNonAlphanumericCharacter= */ false\n    );\n\n    let passwordChar;\n    for (let i = 0; i < password.length; i++) {\n      passwordChar = password.charAt(i);\n      this.updatePasswordCharacterOptionsStatuses(\n        status,\n        /* containsLowercaseCharacter= */ passwordChar >= 'a' &&\n          passwordChar <= 'z',\n        /* containsUppercaseCharacter= */ passwordChar >= 'A' &&\n          passwordChar <= 'Z',\n        /* containsNumericCharacter= */ passwordChar >= '0' &&\n          passwordChar <= '9',\n        /* containsNonAlphanumericCharacter= */ this.allowedNonAlphanumericCharacters.includes(\n          passwordChar\n        )\n      );\n    }\n  }\n\n  /**\n   * Updates the running validation status with the statuses for the character options.\n   * Expected to be called each time a character is processed to update each option status\n   * based on the current character.\n   *\n   * @param status Validation status.\n   * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n   * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n   * @param containsNumericCharacter Whether the character is a numeric character.\n   * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n   */\n  private updatePasswordCharacterOptionsStatuses(\n    status: PasswordValidationStatusInternal,\n    containsLowercaseCharacter: boolean,\n    containsUppercaseCharacter: boolean,\n    containsNumericCharacter: boolean,\n    containsNonAlphanumericCharacter: boolean\n  ): void {\n    if (this.customStrengthOptions.containsLowercaseLetter) {\n      status.containsLowercaseLetter ||= containsLowercaseCharacter;\n    }\n    if (this.customStrengthOptions.containsUppercaseLetter) {\n      status.containsUppercaseLetter ||= containsUppercaseCharacter;\n    }\n    if (this.customStrengthOptions.containsNumericCharacter) {\n      status.containsNumericCharacter ||= containsNumericCharacter;\n    }\n    if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n      status.containsNonAlphanumericCharacter ||=\n        containsNonAlphanumericCharacter;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _isFirebaseServerApp,\n  _FirebaseService,\n  FirebaseApp\n} from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport {\n  Auth,\n  AuthErrorMap,\n  AuthSettings,\n  EmulatorConfig,\n  NextOrObserver,\n  Persistence,\n  PopupRedirectResolver,\n  User,\n  UserCredential,\n  CompleteFn,\n  ErrorFn,\n  NextFn,\n  Unsubscribe,\n  PasswordValidationStatus\n} from '../../model/public_types';\nimport {\n  createSubscribe,\n  ErrorFactory,\n  FirebaseError,\n  getModularInstance,\n  Observer,\n  Subscribe\n} from '@firebase/util';\n\nimport { AuthInternal, ConfigInternal } from '../../model/auth';\nimport { PopupRedirectResolverInternal } from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport {\n  AuthErrorCode,\n  AuthErrorParams,\n  ErrorMapRetriever,\n  _DEFAULT_AUTH_ERROR_FACTORY\n} from '../errors';\nimport { PersistenceInternal } from '../persistence';\nimport {\n  KeyName,\n  PersistenceUserManager\n} from '../persistence/persistence_user_manager';\nimport { _reloadWithoutSaving } from '../user/reload';\nimport {\n  _assert,\n  _serverAppCurrentUserOperationNotSupportedError\n} from '../util/assert';\nimport { _getInstance } from '../util/instantiator';\nimport { _getUserLanguage } from '../util/navigator';\nimport { _getClientVersion } from '../util/version';\nimport { HttpHeader } from '../../api';\nimport {\n  RevokeTokenRequest,\n  TokenType,\n  revokeToken\n} from '../../api/authentication/token';\nimport { AuthMiddlewareQueue } from './middleware';\nimport { RecaptchaConfig } from '../../platform_browser/recaptcha/recaptcha';\nimport { _logWarn } from '../util/log';\nimport { _getPasswordPolicy } from '../../api/password_policy/get_password_policy';\nimport { PasswordPolicyInternal } from '../../model/password_policy';\nimport { PasswordPolicyImpl } from './password_policy_impl';\nimport { getAccountInfo } from '../../api/account_management/account';\nimport { UserImpl } from '../user/user_impl';\n\ninterface AsyncAction {\n  (): Promise<void>;\n}\n\nexport const enum DefaultConfig {\n  TOKEN_API_HOST = 'securetoken.googleapis.com',\n  API_HOST = 'identitytoolkit.googleapis.com',\n  API_SCHEME = 'https'\n}\n\nexport class AuthImpl implements AuthInternal, _FirebaseService {\n  currentUser: User | null = null;\n  emulatorConfig: EmulatorConfig | null = null;\n  private operations = Promise.resolve();\n  private persistenceManager?: PersistenceUserManager;\n  private redirectPersistenceManager?: PersistenceUserManager;\n  private authStateSubscription = new Subscription<User>(this);\n  private idTokenSubscription = new Subscription<User>(this);\n  private readonly beforeStateQueue = new AuthMiddlewareQueue(this);\n  private redirectUser: UserInternal | null = null;\n  private isProactiveRefreshEnabled = false;\n  private readonly EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION: number = 1;\n\n  // Any network calls will set this to true and prevent subsequent emulator\n  // initialization\n  _canInitEmulator = true;\n  _isInitialized = false;\n  _deleted = false;\n  _initializationPromise: Promise<void> | null = null;\n  _popupRedirectResolver: PopupRedirectResolverInternal | null = null;\n  _errorFactory: ErrorFactory<AuthErrorCode, AuthErrorParams> =\n    _DEFAULT_AUTH_ERROR_FACTORY;\n  _agentRecaptchaConfig: RecaptchaConfig | null = null;\n  _tenantRecaptchaConfigs: Record<string, RecaptchaConfig> = {};\n  _projectPasswordPolicy: PasswordPolicyInternal | null = null;\n  _tenantPasswordPolicies: Record<string, PasswordPolicyInternal> = {};\n  readonly name: string;\n\n  // Tracks the last notified UID for state change listeners to prevent\n  // repeated calls to the callbacks. Undefined means it's never been\n  // called, whereas null means it's been called with a signed out user\n  private lastNotifiedUid: string | null | undefined = undefined;\n\n  languageCode: string | null = null;\n  tenantId: string | null = null;\n  settings: AuthSettings = { appVerificationDisabledForTesting: false };\n\n  constructor(\n    public readonly app: FirebaseApp,\n    private readonly heartbeatServiceProvider: Provider<'heartbeat'>,\n    private readonly appCheckServiceProvider: Provider<AppCheckInternalComponentName>,\n    public readonly config: ConfigInternal\n  ) {\n    this.name = app.name;\n    this.clientVersion = config.sdkClientVersion;\n  }\n\n  _initializeWithPersistence(\n    persistenceHierarchy: PersistenceInternal[],\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    if (popupRedirectResolver) {\n      this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n    }\n\n    // Have to check for app deletion throughout initialization (after each\n    // promise resolution)\n    this._initializationPromise = this.queue(async () => {\n      if (this._deleted) {\n        return;\n      }\n\n      this.persistenceManager = await PersistenceUserManager.create(\n        this,\n        persistenceHierarchy\n      );\n\n      if (this._deleted) {\n        return;\n      }\n\n      // Initialize the resolver early if necessary (only applicable to web:\n      // this will cause the iframe to load immediately in certain cases)\n      if (this._popupRedirectResolver?._shouldInitProactively) {\n        // If this fails, don't halt auth loading\n        try {\n          await this._popupRedirectResolver._initialize(this);\n        } catch (e) {\n          /* Ignore the error */\n        }\n      }\n\n      await this.initializeCurrentUser(popupRedirectResolver);\n\n      this.lastNotifiedUid = this.currentUser?.uid || null;\n\n      if (this._deleted) {\n        return;\n      }\n\n      this._isInitialized = true;\n    });\n\n    return this._initializationPromise;\n  }\n\n  /**\n   * If the persistence is changed in another window, the user manager will let us know\n   */\n  async _onStorageEvent(): Promise<void> {\n    if (this._deleted) {\n      return;\n    }\n\n    const user = await this.assertedPersistence.getCurrentUser();\n\n    if (!this.currentUser && !user) {\n      // No change, do nothing (was signed out and remained signed out).\n      return;\n    }\n\n    // If the same user is to be synchronized.\n    if (this.currentUser && user && this.currentUser.uid === user.uid) {\n      // Data update, simply copy data changes.\n      this._currentUser._assign(user);\n      // If tokens changed from previous user tokens, this will trigger\n      // notifyAuthListeners_.\n      await this.currentUser.getIdToken();\n      return;\n    }\n\n    // Update current Auth state. Either a new login or logout.\n    // Skip blocking callbacks, they should not apply to a change in another tab.\n    await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);\n  }\n\n  private async initializeCurrentUserFromIdToken(\n    idToken: string\n  ): Promise<void> {\n    try {\n      const response = await getAccountInfo(this, { idToken });\n      const user = await UserImpl._fromGetAccountInfoResponse(\n        this,\n        response,\n        idToken\n      );\n      await this.directlySetCurrentUser(user);\n    } catch (err) {\n      console.warn(\n        'FirebaseServerApp could not login user with provided authIdToken: ',\n        err\n      );\n      await this.directlySetCurrentUser(null);\n    }\n  }\n\n  private async initializeCurrentUser(\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    if (_isFirebaseServerApp(this.app)) {\n      const idToken = this.app.settings.authIdToken;\n      if (idToken) {\n        // Start the auth operation in the next tick to allow a moment for the customer's app to\n        // attach an emulator, if desired.\n        return new Promise<void>(resolve => {\n          setTimeout(() =>\n            this.initializeCurrentUserFromIdToken(idToken).then(\n              resolve,\n              resolve\n            )\n          );\n        });\n      } else {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    // First check to see if we have a pending redirect event.\n    const previouslyStoredUser =\n      (await this.assertedPersistence.getCurrentUser()) as UserInternal | null;\n    let futureCurrentUser = previouslyStoredUser;\n    let needsTocheckMiddleware = false;\n    if (popupRedirectResolver && this.config.authDomain) {\n      await this.getOrInitRedirectPersistenceManager();\n      const redirectUserEventId = this.redirectUser?._redirectEventId;\n      const storedUserEventId = futureCurrentUser?._redirectEventId;\n      const result = await this.tryRedirectSignIn(popupRedirectResolver);\n\n      // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n      // matches the redirect user, then we want to initially sign in with the\n      // new user object from result.\n      // TODO(samgho): More thoroughly test all of this\n      if (\n        (!redirectUserEventId || redirectUserEventId === storedUserEventId) &&\n        result?.user\n      ) {\n        futureCurrentUser = result.user as UserInternal;\n        needsTocheckMiddleware = true;\n      }\n    }\n\n    // If no user in persistence, there is no current user. Set to null.\n    if (!futureCurrentUser) {\n      return this.directlySetCurrentUser(null);\n    }\n\n    if (!futureCurrentUser._redirectEventId) {\n      // This isn't a redirect link operation, we can reload and bail.\n      // First though, ensure that we check the middleware is happy.\n      if (needsTocheckMiddleware) {\n        try {\n          await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n        } catch (e) {\n          futureCurrentUser = previouslyStoredUser;\n          // We know this is available since the bit is only set when the\n          // resolver is available\n          this._popupRedirectResolver!._overrideRedirectResult(this, () =>\n            Promise.reject(e)\n          );\n        }\n      }\n\n      if (futureCurrentUser) {\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n      } else {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    _assert(this._popupRedirectResolver, this, AuthErrorCode.ARGUMENT_ERROR);\n    await this.getOrInitRedirectPersistenceManager();\n\n    // If the redirect user's event ID matches the current user's event ID,\n    // DO NOT reload the current user, otherwise they'll be cleared from storage.\n    // This is important for the reauthenticateWithRedirect() flow.\n    if (\n      this.redirectUser &&\n      this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId\n    ) {\n      return this.directlySetCurrentUser(futureCurrentUser);\n    }\n\n    return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n  }\n\n  private async tryRedirectSignIn(\n    redirectResolver: PopupRedirectResolver\n  ): Promise<UserCredential | null> {\n    // The redirect user needs to be checked (and signed in if available)\n    // during auth initialization. All of the normal sign in and link/reauth\n    // flows call back into auth and push things onto the promise queue. We\n    // need to await the result of the redirect sign in *inside the promise\n    // queue*. This presents a problem: we run into deadlock. See:\n    //    ┌> [Initialization] ─────┐\n    //    ┌> [<other queue tasks>] │\n    //    └─ [getRedirectResult] <─┘\n    //    where [] are tasks on the queue and arrows denote awaits\n    // Initialization will never complete because it's waiting on something\n    // that's waiting for initialization to complete!\n    //\n    // Instead, this method calls getRedirectResult() (stored in\n    // _completeRedirectFn) with an optional parameter that instructs all of\n    // the underlying auth operations to skip anything that mutates auth state.\n\n    let result: UserCredential | null = null;\n    try {\n      // We know this._popupRedirectResolver is set since redirectResolver\n      // is passed in. The _completeRedirectFn expects the unwrapped extern.\n      result = await this._popupRedirectResolver!._completeRedirectFn(\n        this,\n        redirectResolver,\n        true\n      );\n    } catch (e) {\n      // Swallow any errors here; the code can retrieve them in\n      // getRedirectResult().\n      await this._setRedirectUser(null);\n    }\n\n    return result;\n  }\n\n  private async reloadAndSetCurrentUserOrClear(\n    user: UserInternal\n  ): Promise<void> {\n    try {\n      await _reloadWithoutSaving(user);\n    } catch (e) {\n      if (\n        (e as FirebaseError)?.code !==\n        `auth/${AuthErrorCode.NETWORK_REQUEST_FAILED}`\n      ) {\n        // Something's wrong with the user's token. Log them out and remove\n        // them from storage\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    return this.directlySetCurrentUser(user);\n  }\n\n  useDeviceLanguage(): void {\n    this.languageCode = _getUserLanguage();\n  }\n\n  async _delete(): Promise<void> {\n    this._deleted = true;\n  }\n\n  async updateCurrentUser(userExtern: User | null): Promise<void> {\n    if (_isFirebaseServerApp(this.app)) {\n      return Promise.reject(\n        _serverAppCurrentUserOperationNotSupportedError(this)\n      );\n    }\n    // The public updateCurrentUser method needs to make a copy of the user,\n    // and also check that the project matches\n    const user = userExtern\n      ? (getModularInstance(userExtern) as UserInternal)\n      : null;\n    if (user) {\n      _assert(\n        user.auth.config.apiKey === this.config.apiKey,\n        this,\n        AuthErrorCode.INVALID_AUTH\n      );\n    }\n    return this._updateCurrentUser(user && user._clone(this));\n  }\n\n  async _updateCurrentUser(\n    user: User | null,\n    skipBeforeStateCallbacks: boolean = false\n  ): Promise<void> {\n    if (this._deleted) {\n      return;\n    }\n    if (user) {\n      _assert(\n        this.tenantId === user.tenantId,\n        this,\n        AuthErrorCode.TENANT_ID_MISMATCH\n      );\n    }\n\n    if (!skipBeforeStateCallbacks) {\n      await this.beforeStateQueue.runMiddleware(user);\n    }\n\n    return this.queue(async () => {\n      await this.directlySetCurrentUser(user as UserInternal | null);\n      this.notifyAuthListeners();\n    });\n  }\n\n  async signOut(): Promise<void> {\n    if (_isFirebaseServerApp(this.app)) {\n      return Promise.reject(\n        _serverAppCurrentUserOperationNotSupportedError(this)\n      );\n    }\n    // Run first, to block _setRedirectUser() if any callbacks fail.\n    await this.beforeStateQueue.runMiddleware(null);\n    // Clear the redirect user when signOut is called\n    if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n      await this._setRedirectUser(null);\n    }\n\n    // Prevent callbacks from being called again in _updateCurrentUser, as\n    // they were already called in the first line.\n    return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);\n  }\n\n  setPersistence(persistence: Persistence): Promise<void> {\n    if (_isFirebaseServerApp(this.app)) {\n      return Promise.reject(\n        _serverAppCurrentUserOperationNotSupportedError(this)\n      );\n    }\n    return this.queue(async () => {\n      await this.assertedPersistence.setPersistence(_getInstance(persistence));\n    });\n  }\n\n  _getRecaptchaConfig(): RecaptchaConfig | null {\n    if (this.tenantId == null) {\n      return this._agentRecaptchaConfig;\n    } else {\n      return this._tenantRecaptchaConfigs[this.tenantId];\n    }\n  }\n\n  async validatePassword(password: string): Promise<PasswordValidationStatus> {\n    if (!this._getPasswordPolicyInternal()) {\n      await this._updatePasswordPolicy();\n    }\n\n    // Password policy will be defined after fetching.\n    const passwordPolicy: PasswordPolicyInternal =\n      this._getPasswordPolicyInternal()!;\n\n    // Check that the policy schema version is supported by the SDK.\n    // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n    if (\n      passwordPolicy.schemaVersion !==\n      this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION\n    ) {\n      return Promise.reject(\n        this._errorFactory.create(\n          AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION,\n          {}\n        )\n      );\n    }\n\n    return passwordPolicy.validatePassword(password);\n  }\n\n  _getPasswordPolicyInternal(): PasswordPolicyInternal | null {\n    if (this.tenantId === null) {\n      return this._projectPasswordPolicy;\n    } else {\n      return this._tenantPasswordPolicies[this.tenantId];\n    }\n  }\n\n  async _updatePasswordPolicy(): Promise<void> {\n    const response = await _getPasswordPolicy(this);\n\n    const passwordPolicy: PasswordPolicyInternal = new PasswordPolicyImpl(\n      response\n    );\n\n    if (this.tenantId === null) {\n      this._projectPasswordPolicy = passwordPolicy;\n    } else {\n      this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n    }\n  }\n\n  _getPersistence(): string {\n    return this.assertedPersistence.persistence.type;\n  }\n\n  _updateErrorMap(errorMap: AuthErrorMap): void {\n    this._errorFactory = new ErrorFactory<AuthErrorCode, AuthErrorParams>(\n      'auth',\n      'Firebase',\n      (errorMap as ErrorMapRetriever)()\n    );\n  }\n\n  onAuthStateChanged(\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    return this.registerStateListener(\n      this.authStateSubscription,\n      nextOrObserver,\n      error,\n      completed\n    );\n  }\n\n  beforeAuthStateChanged(\n    callback: (user: User | null) => void | Promise<void>,\n    onAbort?: () => void\n  ): Unsubscribe {\n    return this.beforeStateQueue.pushCallback(callback, onAbort);\n  }\n\n  onIdTokenChanged(\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    return this.registerStateListener(\n      this.idTokenSubscription,\n      nextOrObserver,\n      error,\n      completed\n    );\n  }\n\n  authStateReady(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.currentUser) {\n        resolve();\n      } else {\n        const unsubscribe = this.onAuthStateChanged(() => {\n          unsubscribe();\n          resolve();\n        }, reject);\n      }\n    });\n  }\n\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   */\n  async revokeAccessToken(token: string): Promise<void> {\n    if (this.currentUser) {\n      const idToken = await this.currentUser.getIdToken();\n      // Generalize this to accept other providers once supported.\n      const request: RevokeTokenRequest = {\n        providerId: 'apple.com',\n        tokenType: TokenType.ACCESS_TOKEN,\n        token,\n        idToken\n      };\n      if (this.tenantId != null) {\n        request.tenantId = this.tenantId;\n      }\n      await revokeToken(this, request);\n    }\n  }\n\n  toJSON(): object {\n    return {\n      apiKey: this.config.apiKey,\n      authDomain: this.config.authDomain,\n      appName: this.name,\n      currentUser: this._currentUser?.toJSON()\n    };\n  }\n\n  async _setRedirectUser(\n    user: UserInternal | null,\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    const redirectManager = await this.getOrInitRedirectPersistenceManager(\n      popupRedirectResolver\n    );\n    return user === null\n      ? redirectManager.removeCurrentUser()\n      : redirectManager.setCurrentUser(user);\n  }\n\n  private async getOrInitRedirectPersistenceManager(\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<PersistenceUserManager> {\n    if (!this.redirectPersistenceManager) {\n      const resolver: PopupRedirectResolverInternal | null =\n        (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||\n        this._popupRedirectResolver;\n      _assert(resolver, this, AuthErrorCode.ARGUMENT_ERROR);\n      this.redirectPersistenceManager = await PersistenceUserManager.create(\n        this,\n        [_getInstance(resolver._redirectPersistence)],\n        KeyName.REDIRECT_USER\n      );\n      this.redirectUser =\n        await this.redirectPersistenceManager.getCurrentUser();\n    }\n\n    return this.redirectPersistenceManager;\n  }\n\n  async _redirectUserForId(id: string): Promise<UserInternal | null> {\n    // Make sure we've cleared any pending persistence actions if we're not in\n    // the initializer\n    if (this._isInitialized) {\n      await this.queue(async () => {});\n    }\n\n    if (this._currentUser?._redirectEventId === id) {\n      return this._currentUser;\n    }\n\n    if (this.redirectUser?._redirectEventId === id) {\n      return this.redirectUser;\n    }\n\n    return null;\n  }\n\n  async _persistUserIfCurrent(user: UserInternal): Promise<void> {\n    if (user === this.currentUser) {\n      return this.queue(async () => this.directlySetCurrentUser(user));\n    }\n  }\n\n  /** Notifies listeners only if the user is current */\n  _notifyListenersIfCurrent(user: UserInternal): void {\n    if (user === this.currentUser) {\n      this.notifyAuthListeners();\n    }\n  }\n\n  _key(): string {\n    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n  }\n\n  _startProactiveRefresh(): void {\n    this.isProactiveRefreshEnabled = true;\n    if (this.currentUser) {\n      this._currentUser._startProactiveRefresh();\n    }\n  }\n\n  _stopProactiveRefresh(): void {\n    this.isProactiveRefreshEnabled = false;\n    if (this.currentUser) {\n      this._currentUser._stopProactiveRefresh();\n    }\n  }\n\n  /** Returns the current user cast as the internal type */\n  get _currentUser(): UserInternal {\n    return this.currentUser as UserInternal;\n  }\n\n  private notifyAuthListeners(): void {\n    if (!this._isInitialized) {\n      return;\n    }\n\n    this.idTokenSubscription.next(this.currentUser);\n\n    const currentUid = this.currentUser?.uid ?? null;\n    if (this.lastNotifiedUid !== currentUid) {\n      this.lastNotifiedUid = currentUid;\n      this.authStateSubscription.next(this.currentUser);\n    }\n  }\n\n  private registerStateListener(\n    subscription: Subscription<User>,\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    if (this._deleted) {\n      return () => {};\n    }\n\n    const cb =\n      typeof nextOrObserver === 'function'\n        ? nextOrObserver\n        : nextOrObserver.next.bind(nextOrObserver);\n\n    let isUnsubscribed = false;\n\n    const promise = this._isInitialized\n      ? Promise.resolve()\n      : this._initializationPromise;\n    _assert(promise, this, AuthErrorCode.INTERNAL_ERROR);\n    // The callback needs to be called asynchronously per the spec.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    promise.then(() => {\n      if (isUnsubscribed) {\n        return;\n      }\n      cb(this.currentUser);\n    });\n\n    if (typeof nextOrObserver === 'function') {\n      const unsubscribe = subscription.addObserver(\n        nextOrObserver,\n        error,\n        completed\n      );\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    } else {\n      const unsubscribe = subscription.addObserver(nextOrObserver);\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    }\n  }\n\n  /**\n   * Unprotected (from race conditions) method to set the current user. This\n   * should only be called from within a queued callback. This is necessary\n   * because the queue shouldn't rely on another queued callback.\n   */\n  private async directlySetCurrentUser(\n    user: UserInternal | null\n  ): Promise<void> {\n    if (this.currentUser && this.currentUser !== user) {\n      this._currentUser._stopProactiveRefresh();\n    }\n    if (user && this.isProactiveRefreshEnabled) {\n      user._startProactiveRefresh();\n    }\n\n    this.currentUser = user;\n\n    if (user) {\n      await this.assertedPersistence.setCurrentUser(user);\n    } else {\n      await this.assertedPersistence.removeCurrentUser();\n    }\n  }\n\n  private queue(action: AsyncAction): Promise<void> {\n    // In case something errors, the callback still should be called in order\n    // to keep the promise chain alive\n    this.operations = this.operations.then(action, action);\n    return this.operations;\n  }\n\n  private get assertedPersistence(): PersistenceUserManager {\n    _assert(this.persistenceManager, this, AuthErrorCode.INTERNAL_ERROR);\n    return this.persistenceManager;\n  }\n\n  private frameworks: string[] = [];\n  private clientVersion: string;\n  _logFramework(framework: string): void {\n    if (!framework || this.frameworks.includes(framework)) {\n      return;\n    }\n    this.frameworks.push(framework);\n\n    // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n    // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n    this.frameworks.sort();\n    this.clientVersion = _getClientVersion(\n      this.config.clientPlatform,\n      this._getFrameworks()\n    );\n  }\n  _getFrameworks(): readonly string[] {\n    return this.frameworks;\n  }\n  async _getAdditionalHeaders(): Promise<Record<string, string>> {\n    // Additional headers on every request\n    const headers: Record<string, string> = {\n      [HttpHeader.X_CLIENT_VERSION]: this.clientVersion\n    };\n\n    if (this.app.options.appId) {\n      headers[HttpHeader.X_FIREBASE_GMPID] = this.app.options.appId;\n    }\n\n    // If the heartbeat service exists, add the heartbeat string\n    const heartbeatsHeader = await this.heartbeatServiceProvider\n      .getImmediate({\n        optional: true\n      })\n      ?.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers[HttpHeader.X_FIREBASE_CLIENT] = heartbeatsHeader;\n    }\n\n    // If the App Check service exists, add the App Check token in the headers\n    const appCheckToken = await this._getAppCheckToken();\n    if (appCheckToken) {\n      headers[HttpHeader.X_FIREBASE_APP_CHECK] = appCheckToken;\n    }\n\n    return headers;\n  }\n\n  async _getAppCheckToken(): Promise<string | undefined> {\n    const appCheckTokenResult = await this.appCheckServiceProvider\n      .getImmediate({ optional: true })\n      ?.getToken();\n    if (appCheckTokenResult?.error) {\n      // Context: appCheck.getToken() will never throw even if an error happened.\n      // In the error case, a dummy token will be returned along with an error field describing\n      // the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      _logWarn(\n        `Error while retrieving App Check token: ${appCheckTokenResult.error}`\n      );\n    }\n    return appCheckTokenResult?.token;\n  }\n}\n\n/**\n * Method to be used to cast down to our private implementation of Auth.\n * It will also handle unwrapping from the compat type if necessary\n *\n * @param auth Auth object passed in from developer\n */\nexport function _castAuth(auth: Auth): AuthInternal {\n  return getModularInstance(auth) as AuthInternal;\n}\n\n/** Helper class to wrap subscriber logic */\nclass Subscription<T> {\n  private observer: Observer<T | null> | null = null;\n  readonly addObserver: Subscribe<T | null> = createSubscribe(\n    observer => (this.observer = observer)\n  );\n\n  constructor(readonly auth: AuthInternal) {}\n\n  get next(): NextFn<T | null> {\n    _assert(this.observer, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return this.observer.next.bind(this.observer);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ninterface ExternalJSProvider {\n  loadJS(url: string): Promise<Event>;\n  recaptchaV2Script: string;\n  recaptchaEnterpriseScript: string;\n  gapiScript: string;\n}\n\nlet externalJSProvider: ExternalJSProvider = {\n  async loadJS() {\n    throw new Error('Unable to load external scripts');\n  },\n\n  recaptchaV2Script: '',\n  recaptchaEnterpriseScript: '',\n  gapiScript: ''\n};\n\nexport function _setExternalJSProvider(p: ExternalJSProvider): void {\n  externalJSProvider = p;\n}\n\nexport function _loadJS(url: string): Promise<Event> {\n  return externalJSProvider.loadJS(url);\n}\n\nexport function _recaptchaV2ScriptUrl(): string {\n  return externalJSProvider.recaptchaV2Script;\n}\n\nexport function _recaptchaEnterpriseScriptUrl(): string {\n  return externalJSProvider.recaptchaEnterpriseScript;\n}\n\nexport function _gapiScriptUrl(): string {\n  return externalJSProvider.gapiScript;\n}\n\nexport function _generateCallbackName(prefix: string): string {\n  return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n}\n","/* eslint-disable @typescript-eslint/no-require-imports */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isEnterprise, RecaptchaConfig } from './recaptcha';\nimport { getRecaptchaConfig } from '../../api/authentication/recaptcha';\nimport {\n  RecaptchaClientType,\n  RecaptchaVersion,\n  RecaptchaActionName,\n  RecaptchaProvider\n} from '../../api';\n\nimport { Auth } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport * as jsHelpers from '../load_js';\nimport { AuthErrorCode } from '../../core/errors';\n\nexport const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\nexport const FAKE_TOKEN = 'NO_RECAPTCHA';\n\nexport class RecaptchaEnterpriseVerifier {\n  /**\n   * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n   */\n  readonly type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n\n  private readonly auth: AuthInternal;\n\n  /**\n   *\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   */\n  constructor(authExtern: Auth) {\n    this.auth = _castAuth(authExtern);\n  }\n\n  /**\n   * Executes the verification process.\n   *\n   * @returns A Promise for a token that can be used to assert the validity of a request.\n   */\n  async verify(\n    action: string = 'verify',\n    forceRefresh = false\n  ): Promise<string> {\n    async function retrieveSiteKey(auth: AuthInternal): Promise<string> {\n      if (!forceRefresh) {\n        if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n          return auth._agentRecaptchaConfig.siteKey;\n        }\n        if (\n          auth.tenantId != null &&\n          auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined\n        ) {\n          return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n        }\n      }\n\n      return new Promise<string>(async (resolve, reject) => {\n        getRecaptchaConfig(auth, {\n          clientType: RecaptchaClientType.WEB,\n          version: RecaptchaVersion.ENTERPRISE\n        })\n          .then(response => {\n            if (response.recaptchaKey === undefined) {\n              reject(new Error('recaptcha Enterprise site key undefined'));\n            } else {\n              const config = new RecaptchaConfig(response);\n              if (auth.tenantId == null) {\n                auth._agentRecaptchaConfig = config;\n              } else {\n                auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n              }\n              return resolve(config.siteKey);\n            }\n          })\n          .catch(error => {\n            reject(error);\n          });\n      });\n    }\n\n    function retrieveRecaptchaToken(\n      siteKey: string,\n      resolve: (value: string | PromiseLike<string>) => void,\n      reject: (reason?: unknown) => void\n    ): void {\n      const grecaptcha = window.grecaptcha;\n      if (isEnterprise(grecaptcha)) {\n        grecaptcha.enterprise.ready(() => {\n          grecaptcha.enterprise\n            .execute(siteKey, { action })\n            .then(token => {\n              resolve(token);\n            })\n            .catch(() => {\n              resolve(FAKE_TOKEN);\n            });\n        });\n      } else {\n        reject(Error('No reCAPTCHA enterprise script loaded.'));\n      }\n    }\n\n    return new Promise<string>((resolve, reject) => {\n      retrieveSiteKey(this.auth)\n        .then(siteKey => {\n          if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          } else {\n            if (typeof window === 'undefined') {\n              reject(\n                new Error('RecaptchaVerifier is only supported in browser')\n              );\n              return;\n            }\n            let url = jsHelpers._recaptchaEnterpriseScriptUrl();\n            if (url.length !== 0) {\n              url += siteKey;\n            }\n            jsHelpers\n              ._loadJS(url)\n              .then(() => {\n                retrieveRecaptchaToken(siteKey, resolve, reject);\n              })\n              .catch(error => {\n                reject(error);\n              });\n          }\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n}\n\nexport async function injectRecaptchaFields<T>(\n  auth: AuthInternal,\n  request: T,\n  action: RecaptchaActionName,\n  captchaResp = false\n): Promise<T> {\n  const verifier = new RecaptchaEnterpriseVerifier(auth);\n  let captchaResponse;\n  try {\n    captchaResponse = await verifier.verify(action);\n  } catch (error) {\n    captchaResponse = await verifier.verify(action, true);\n  }\n  const newRequest = { ...request };\n  if (!captchaResp) {\n    Object.assign(newRequest, { captchaResponse });\n  } else {\n    Object.assign(newRequest, { 'captchaResp': captchaResponse });\n  }\n  Object.assign(newRequest, { 'clientType': RecaptchaClientType.WEB });\n  Object.assign(newRequest, {\n    'recaptchaVersion': RecaptchaVersion.ENTERPRISE\n  });\n  return newRequest;\n}\n\ntype ActionMethod<TRequest, TResponse> = (\n  auth: Auth,\n  request: TRequest\n) => Promise<TResponse>;\n\nexport async function handleRecaptchaFlow<TRequest, TResponse>(\n  authInstance: AuthInternal,\n  request: TRequest,\n  actionName: RecaptchaActionName,\n  actionMethod: ActionMethod<TRequest, TResponse>\n): Promise<TResponse> {\n  if (\n    authInstance\n      ._getRecaptchaConfig()\n      ?.isProviderEnabled(RecaptchaProvider.EMAIL_PASSWORD_PROVIDER)\n  ) {\n    const requestWithRecaptcha = await injectRecaptchaFields(\n      authInstance,\n      request,\n      actionName,\n      actionName === RecaptchaActionName.GET_OOB_CODE\n    );\n    return actionMethod(authInstance, requestWithRecaptcha);\n  } else {\n    return actionMethod(authInstance, request).catch(async error => {\n      if (error.code === `auth/${AuthErrorCode.MISSING_RECAPTCHA_TOKEN}`) {\n        console.log(\n          `${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`\n        );\n        const requestWithRecaptcha = await injectRecaptchaFields(\n          authInstance,\n          request,\n          actionName,\n          actionName === RecaptchaActionName.GET_OOB_CODE\n        );\n        return actionMethod(authInstance, requestWithRecaptcha);\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n}\n\nexport async function _initializeRecaptchaConfig(auth: Auth): Promise<void> {\n  const authInternal = _castAuth(auth);\n\n  const response = await getRecaptchaConfig(authInternal, {\n    clientType: RecaptchaClientType.WEB,\n    version: RecaptchaVersion.ENTERPRISE\n  });\n\n  const config = new RecaptchaConfig(response);\n  if (authInternal.tenantId == null) {\n    authInternal._agentRecaptchaConfig = config;\n  } else {\n    authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n  }\n\n  if (config.isProviderEnabled(RecaptchaProvider.EMAIL_PASSWORD_PROVIDER)) {\n    const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n    void verifier.verify();\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Auth } from '../../model/public_types';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _castAuth } from './auth_impl';\n\n/**\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n * Firebase Auth services.\n *\n * @remarks\n * This must be called synchronously immediately following the first call to\n * {@link initializeAuth}.  Do not use with production credentials as emulator\n * traffic is not encrypted.\n *\n *\n * @example\n * ```javascript\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n * `true` to disable the warning banner attached to the DOM.\n *\n * @public\n */\nexport function connectAuthEmulator(\n  auth: Auth,\n  url: string,\n  options?: { disableWarnings: boolean }\n): void {\n  const authInternal = _castAuth(auth);\n  _assert(\n    authInternal._canInitEmulator,\n    authInternal,\n    AuthErrorCode.EMULATOR_CONFIG_FAILED\n  );\n\n  _assert(\n    /^https?:\\/\\//.test(url),\n    authInternal,\n    AuthErrorCode.INVALID_EMULATOR_SCHEME\n  );\n\n  const disableWarnings = !!options?.disableWarnings;\n\n  const protocol = extractProtocol(url);\n  const { host, port } = extractHostAndPort(url);\n  const portStr = port === null ? '' : `:${port}`;\n\n  // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n  authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };\n  authInternal.settings.appVerificationDisabledForTesting = true;\n  authInternal.emulatorConfig = Object.freeze({\n    host,\n    port,\n    protocol: protocol.replace(':', ''),\n    options: Object.freeze({ disableWarnings })\n  });\n\n  if (!disableWarnings) {\n    emitEmulatorWarning();\n  }\n}\n\nfunction extractProtocol(url: string): string {\n  const protocolEnd = url.indexOf(':');\n  return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n}\n\nfunction extractHostAndPort(url: string): {\n  host: string;\n  port: number | null;\n} {\n  const protocol = extractProtocol(url);\n  const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n  if (!authority) {\n    return { host: '', port: null };\n  }\n  const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n  const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n  if (bracketedIPv6) {\n    const host = bracketedIPv6[1];\n    return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };\n  } else {\n    const [host, port] = hostAndPort.split(':');\n    return { host, port: parsePort(port) };\n  }\n}\n\nfunction parsePort(portStr: string): number | null {\n  if (!portStr) {\n    return null;\n  }\n  const port = Number(portStr);\n  if (isNaN(port)) {\n    return null;\n  }\n  return port;\n}\n\nfunction emitEmulatorWarning(): void {\n  function attachBanner(): void {\n    const el = document.createElement('p');\n    const sty = el.style;\n    el.innerText =\n      'Running in emulator mode. Do not use with production credentials.';\n    sty.position = 'fixed';\n    sty.width = '100%';\n    sty.backgroundColor = '#ffffff';\n    sty.border = '.1em solid #000000';\n    sty.color = '#b50000';\n    sty.bottom = '0px';\n    sty.left = '0px';\n    sty.margin = '0px';\n    sty.zIndex = '10000';\n    sty.textAlign = 'center';\n    el.classList.add('firebase-emulator-warning');\n    document.body.appendChild(el);\n  }\n\n  if (typeof console !== 'undefined' && typeof console.info === 'function') {\n    console.info(\n      'WARNING: You are using the Auth Emulator,' +\n        ' which is intended for local testing only.  Do not use with' +\n        ' production credentials.'\n    );\n  }\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    if (document.readyState === 'loading') {\n      window.addEventListener('DOMContentLoaded', attachBanner);\n    } else {\n      attachBanner();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { debugFail } from '../util/assert';\n\n/**\n * Interface that represents the credentials returned by an {@link AuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nexport class AuthCredential {\n  /** @internal */\n  protected constructor(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    readonly providerId: string,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    readonly signInMethod: string\n  ) {}\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object {\n    return debugFail('not implemented');\n  }\n\n  /** @internal */\n  _getIdTokenResponse(_auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _linkToIdToken(\n    _auth: AuthInternal,\n    _idToken: string\n  ): Promise<IdTokenResponse> {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _getReauthenticationResolver(_auth: AuthInternal): Promise<IdTokenResponse> {\n    return debugFail('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeOperation, Auth } from '../../model/public_types';\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { MfaEnrollment } from './mfa';\nimport { SignUpRequest, SignUpResponse } from '../authentication/sign_up';\n\nexport interface ResetPasswordRequest {\n  oobCode: string;\n  newPassword?: string;\n  tenantId?: string;\n}\n\nexport interface ResetPasswordResponse {\n  email: string;\n  newEmail?: string;\n  requestType?: ActionCodeOperation;\n  mfaInfo?: MfaEnrollment;\n}\n\nexport async function resetPassword(\n  auth: Auth,\n  request: ResetPasswordRequest\n): Promise<ResetPasswordResponse> {\n  return _performApiRequest<ResetPasswordRequest, ResetPasswordResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.RESET_PASSWORD,\n    _addTidIfNecessary(auth, request)\n  );\n}\nexport interface UpdateEmailPasswordRequest {\n  idToken: string;\n  returnSecureToken?: boolean;\n  email?: string;\n  password?: string;\n}\n\nexport interface UpdateEmailPasswordResponse extends IdTokenResponse {}\n\nexport async function updateEmailPassword(\n  auth: Auth,\n  request: UpdateEmailPasswordRequest\n): Promise<UpdateEmailPasswordResponse> {\n  return _performApiRequest<\n    UpdateEmailPasswordRequest,\n    UpdateEmailPasswordResponse\n  >(auth, HttpMethod.POST, Endpoint.SET_ACCOUNT_INFO, request);\n}\n\n// Used for linking an email/password account to an existing idToken. Uses the same request/response\n// format as updateEmailPassword.\nexport async function linkEmailPassword(\n  auth: Auth,\n  request: SignUpRequest\n): Promise<SignUpResponse> {\n  return _performApiRequest<SignUpRequest, SignUpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_UP,\n    request\n  );\n}\n\nexport interface ApplyActionCodeRequest {\n  oobCode: string;\n  tenantId?: string;\n}\n\nexport interface ApplyActionCodeResponse {}\n\nexport async function applyActionCode(\n  auth: Auth,\n  request: ApplyActionCodeRequest\n): Promise<ApplyActionCodeResponse> {\n  return _performApiRequest<ApplyActionCodeRequest, ApplyActionCodeResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SET_ACCOUNT_INFO,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeOperation, Auth } from '../../model/public_types';\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary,\n  _performApiRequest,\n  _performSignInRequest\n} from '../index';\nimport { IdToken, IdTokenResponse } from '../../model/id_token';\n\nexport interface SignInWithPasswordRequest {\n  returnSecureToken?: boolean;\n  email: string;\n  password: string;\n  tenantId?: string;\n  captchaResponse?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface SignInWithPasswordResponse extends IdTokenResponse {\n  email: string;\n  displayName: string;\n}\n\nexport async function signInWithPassword(\n  auth: Auth,\n  request: SignInWithPasswordRequest\n): Promise<SignInWithPasswordResponse> {\n  return _performSignInRequest<\n    SignInWithPasswordRequest,\n    SignInWithPasswordResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PASSWORD,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface GetOobCodeRequest {\n  email?: string; // Everything except VERIFY_AND_CHANGE_EMAIL\n  continueUrl?: string;\n  iOSBundleId?: string;\n  iosAppStoreId?: string;\n  androidPackageName?: string;\n  androidInstallApp?: boolean;\n  androidMinimumVersionCode?: string;\n  canHandleCodeInApp?: boolean;\n  dynamicLinkDomain?: string;\n  tenantId?: string;\n  targetProjectid?: string;\n}\n\nexport interface VerifyEmailRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.VERIFY_EMAIL;\n  idToken: IdToken;\n}\n\nexport interface PasswordResetRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.PASSWORD_RESET;\n  email: string;\n  captchaResp?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface EmailSignInRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.EMAIL_SIGNIN;\n  email: string;\n  captchaResp?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface VerifyAndChangeEmailRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL;\n  idToken: IdToken;\n  newEmail: string;\n}\n\ninterface GetOobCodeResponse {\n  email: string;\n}\n\nexport interface VerifyEmailResponse extends GetOobCodeResponse {}\nexport interface PasswordResetResponse extends GetOobCodeResponse {}\nexport interface EmailSignInResponse extends GetOobCodeResponse {}\nexport interface VerifyAndChangeEmailResponse extends GetOobCodeRequest {}\n\nasync function sendOobCode(\n  auth: Auth,\n  request: GetOobCodeRequest\n): Promise<GetOobCodeResponse> {\n  return _performApiRequest<GetOobCodeRequest, GetOobCodeResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SEND_OOB_CODE,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport async function sendEmailVerification(\n  auth: Auth,\n  request: VerifyEmailRequest\n): Promise<VerifyEmailResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function sendPasswordResetEmail(\n  auth: Auth,\n  request: PasswordResetRequest\n): Promise<PasswordResetResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function sendSignInLinkToEmail(\n  auth: Auth,\n  request: EmailSignInRequest\n): Promise<EmailSignInResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function verifyAndChangeEmail(\n  auth: Auth,\n  request: VerifyAndChangeEmailRequest\n): Promise<VerifyAndChangeEmailResponse> {\n  return sendOobCode(auth, request);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performSignInRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithEmailLinkRequest {\n  email: string;\n  oobCode: string;\n  tenantId?: string;\n}\n\nexport interface SignInWithEmailLinkResponse extends IdTokenResponse {\n  email: string;\n  isNewUser: boolean;\n}\n\nexport async function signInWithEmailLink(\n  auth: Auth,\n  request: SignInWithEmailLinkRequest\n): Promise<SignInWithEmailLinkResponse> {\n  return _performSignInRequest<\n    SignInWithEmailLinkRequest,\n    SignInWithEmailLinkResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_EMAIL_LINK,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface SignInWithEmailLinkForLinkingRequest\n  extends SignInWithEmailLinkRequest {\n  idToken: string;\n}\n\nexport async function signInWithEmailLinkForLinking(\n  auth: Auth,\n  request: SignInWithEmailLinkForLinkingRequest\n): Promise<SignInWithEmailLinkResponse> {\n  return _performSignInRequest<\n    SignInWithEmailLinkForLinkingRequest,\n    SignInWithEmailLinkResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_EMAIL_LINK,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\nimport { linkEmailPassword } from '../../api/account_management/email_and_password';\nimport {\n  signInWithPassword,\n  SignInWithPasswordRequest\n} from '../../api/authentication/email_and_password';\nimport {\n  signInWithEmailLink,\n  signInWithEmailLinkForLinking\n} from '../../api/authentication/email_link';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from '../util/assert';\nimport { AuthCredential } from './auth_credential';\nimport { handleRecaptchaFlow } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { RecaptchaActionName, RecaptchaClientType } from '../../api';\nimport { SignUpRequest } from '../../api/authentication/sign_up';\n/**\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n * {@link ProviderId}.PASSWORD\n *\n * @remarks\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @public\n */\nexport class EmailAuthCredential extends AuthCredential {\n  /** @internal */\n  private constructor(\n    /** @internal */\n    readonly _email: string,\n    /** @internal */\n    readonly _password: string,\n    signInMethod: SignInMethod,\n    /** @internal */\n    readonly _tenantId: string | null = null\n  ) {\n    super(ProviderId.PASSWORD, signInMethod);\n  }\n\n  /** @internal */\n  static _fromEmailAndPassword(\n    email: string,\n    password: string\n  ): EmailAuthCredential {\n    return new EmailAuthCredential(\n      email,\n      password,\n      SignInMethod.EMAIL_PASSWORD\n    );\n  }\n\n  /** @internal */\n  static _fromEmailAndCode(\n    email: string,\n    oobCode: string,\n    tenantId: string | null = null\n  ): EmailAuthCredential {\n    return new EmailAuthCredential(\n      email,\n      oobCode,\n      SignInMethod.EMAIL_LINK,\n      tenantId\n    );\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON(): object {\n    return {\n      email: this._email,\n      password: this._password,\n      signInMethod: this.signInMethod,\n      tenantId: this._tenantId\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n   *\n   * @param json - Either `object` or the stringified representation of the object. When string is\n   * provided, `JSON.parse` would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n   */\n  static fromJSON(json: object | string): EmailAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    if (obj?.email && obj?.password) {\n      if (obj.signInMethod === SignInMethod.EMAIL_PASSWORD) {\n        return this._fromEmailAndPassword(obj.email, obj.password);\n      } else if (obj.signInMethod === SignInMethod.EMAIL_LINK) {\n        return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n      }\n    }\n    return null;\n  }\n\n  /** @internal */\n  async _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    switch (this.signInMethod) {\n      case SignInMethod.EMAIL_PASSWORD:\n        const request: SignInWithPasswordRequest = {\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: RecaptchaClientType.WEB\n        };\n        return handleRecaptchaFlow(\n          auth,\n          request,\n          RecaptchaActionName.SIGN_IN_WITH_PASSWORD,\n          signInWithPassword\n        );\n      case SignInMethod.EMAIL_LINK:\n        return signInWithEmailLink(auth, {\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  /** @internal */\n  async _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    switch (this.signInMethod) {\n      case SignInMethod.EMAIL_PASSWORD:\n        const request: SignUpRequest = {\n          idToken,\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: RecaptchaClientType.WEB\n        };\n        return handleRecaptchaFlow(\n          auth,\n          request,\n          RecaptchaActionName.SIGN_UP_PASSWORD,\n          linkEmailPassword\n        );\n      case SignInMethod.EMAIL_LINK:\n        return signInWithEmailLinkForLinking(auth, {\n          idToken,\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return this._getIdTokenResponse(auth);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdToken, IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithIdpRequest {\n  requestUri: string;\n  postBody?: string;\n  sessionId?: string;\n  tenantId?: string;\n  returnSecureToken: boolean;\n  returnIdpCredential?: boolean;\n  idToken?: IdToken;\n  autoCreate?: boolean;\n  pendingToken?: string;\n}\n\n/**\n * @internal\n */\nexport interface SignInWithIdpResponse extends IdTokenResponse {\n  oauthAccessToken?: string;\n  oauthTokenSecret?: string;\n  nonce?: string;\n  oauthIdToken?: string;\n  pendingToken?: string;\n}\n\nexport async function signInWithIdp(\n  auth: Auth,\n  request: SignInWithIdpRequest\n): Promise<SignInWithIdpResponse> {\n  return _performSignInRequest<SignInWithIdpRequest, SignInWithIdpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_IDP,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystring } from '@firebase/util';\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from '../util/assert';\nimport { AuthCredential } from './auth_credential';\n\nconst IDP_REQUEST_URI = 'http://localhost';\n\nexport interface OAuthCredentialParams {\n  // OAuth 2 uses either id token or access token\n  idToken?: string | null;\n  accessToken?: string | null;\n\n  // These fields are used with OAuth 1\n  oauthToken?: string;\n  secret?: string;\n  oauthTokenSecret?: string;\n\n  // Nonce is only set if pendingToken is not present\n  nonce?: string;\n  pendingToken?: string;\n\n  // Utilities\n  providerId: string;\n  signInMethod: string;\n}\n\n/**\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nexport class OAuthCredential extends AuthCredential {\n  /**\n   * The OAuth ID token associated with the credential if it belongs to an OIDC provider,\n   * such as `google.com`.\n   * @readonly\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token associated with the credential if it belongs to an\n   * {@link OAuthProvider}, such as `facebook.com`, `twitter.com`, etc.\n   * @readonly\n   */\n  accessToken?: string;\n  /**\n   * The OAuth access token secret associated with the credential if it belongs to an OAuth 1.0\n   * provider, such as `twitter.com`.\n   * @readonly\n   */\n  secret?: string;\n\n  private nonce?: string;\n  private pendingToken: string | null = null;\n\n  /** @internal */\n  static _fromParams(params: OAuthCredentialParams): OAuthCredential {\n    const cred = new OAuthCredential(params.providerId, params.signInMethod);\n\n    if (params.idToken || params.accessToken) {\n      // OAuth 2 and either ID token or access token.\n      if (params.idToken) {\n        cred.idToken = params.idToken;\n      }\n\n      if (params.accessToken) {\n        cred.accessToken = params.accessToken;\n      }\n\n      // Add nonce if available and no pendingToken is present.\n      if (params.nonce && !params.pendingToken) {\n        cred.nonce = params.nonce;\n      }\n\n      if (params.pendingToken) {\n        cred.pendingToken = params.pendingToken;\n      }\n    } else if (params.oauthToken && params.oauthTokenSecret) {\n      // OAuth 1 and OAuth token with token secret\n      cred.accessToken = params.oauthToken;\n      cred.secret = params.oauthTokenSecret;\n    } else {\n      _fail(AuthErrorCode.ARGUMENT_ERROR);\n    }\n\n    return cred;\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON(): object {\n    return {\n      idToken: this.idToken,\n      accessToken: this.accessToken,\n      secret: this.secret,\n      nonce: this.nonce,\n      pendingToken: this.pendingToken,\n      providerId: this.providerId,\n      signInMethod: this.signInMethod\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json: string | object): OAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const { providerId, signInMethod, ...rest }: OAuthCredentialParams = obj;\n    if (!providerId || !signInMethod) {\n      return null;\n    }\n\n    const cred = new OAuthCredential(providerId, signInMethod);\n    cred.idToken = rest.idToken || undefined;\n    cred.accessToken = rest.accessToken || undefined;\n    cred.secret = rest.secret;\n    cred.nonce = rest.nonce;\n    cred.pendingToken = rest.pendingToken || null;\n    return cred;\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n\n  private buildRequest(): SignInWithIdpRequest {\n    const request: SignInWithIdpRequest = {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true\n    };\n\n    if (this.pendingToken) {\n      request.pendingToken = this.pendingToken;\n    } else {\n      const postBody: Record<string, string> = {};\n      if (this.idToken) {\n        postBody['id_token'] = this.idToken;\n      }\n      if (this.accessToken) {\n        postBody['access_token'] = this.accessToken;\n      }\n      if (this.secret) {\n        postBody['oauth_token_secret'] = this.secret;\n      }\n\n      postBody['providerId'] = this.providerId;\n      if (this.nonce && !this.pendingToken) {\n        postBody['nonce'] = this.nonce;\n      }\n\n      request.postBody = querystring(postBody);\n    }\n\n    return request;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _makeTaggedError,\n  _performApiRequest,\n  _performSignInRequest\n} from '../index';\nimport { AuthErrorCode } from '../../core/errors';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { ServerError, ServerErrorMap } from '../errors';\nimport { Auth } from '../../model/public_types';\n\nexport interface SendPhoneVerificationCodeRequest {\n  phoneNumber: string;\n  recaptchaToken: string;\n  tenantId?: string;\n}\n\nexport interface SendPhoneVerificationCodeResponse {\n  sessionInfo: string;\n}\n\nexport async function sendPhoneVerificationCode(\n  auth: Auth,\n  request: SendPhoneVerificationCodeRequest\n): Promise<SendPhoneVerificationCodeResponse> {\n  return _performApiRequest<\n    SendPhoneVerificationCodeRequest,\n    SendPhoneVerificationCodeResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SEND_VERIFICATION_CODE,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\n/**\n * @internal\n */\nexport interface SignInWithPhoneNumberRequest {\n  temporaryProof?: string;\n  phoneNumber?: string;\n  sessionInfo?: string;\n  code?: string;\n  tenantId?: string;\n}\n\nexport interface LinkWithPhoneNumberRequest\n  extends SignInWithPhoneNumberRequest {\n  idToken: string;\n}\n\n/**\n * @internal\n */\nexport interface SignInWithPhoneNumberResponse extends IdTokenResponse {\n  temporaryProof?: string;\n  phoneNumber?: string;\n}\n\nexport async function signInWithPhoneNumber(\n  auth: Auth,\n  request: SignInWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  return _performSignInRequest<\n    SignInWithPhoneNumberRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport async function linkWithPhoneNumber(\n  auth: Auth,\n  request: LinkWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  const response = await _performSignInRequest<\n    LinkWithPhoneNumberRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, request)\n  );\n  if (response.temporaryProof) {\n    throw _makeTaggedError(auth, AuthErrorCode.NEED_CONFIRMATION, response);\n  }\n  return response;\n}\n\ninterface VerifyPhoneNumberForExistingRequest\n  extends SignInWithPhoneNumberRequest {\n  operation: 'REAUTH';\n}\n\nconst VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_: Partial<\n  ServerErrorMap<ServerError>\n> = {\n  [ServerError.USER_NOT_FOUND]: AuthErrorCode.USER_DELETED\n};\n\nexport async function verifyPhoneNumberForExisting(\n  auth: Auth,\n  request: SignInWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  const apiRequest: VerifyPhoneNumberForExistingRequest = {\n    ...request,\n    operation: 'REAUTH'\n  };\n  return _performSignInRequest<\n    VerifyPhoneNumberForExistingRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, apiRequest),\n    VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport {\n  linkWithPhoneNumber,\n  signInWithPhoneNumber,\n  SignInWithPhoneNumberRequest,\n  verifyPhoneNumberForExisting\n} from '../../api/authentication/sms';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthCredential } from './auth_credential';\n\nexport interface PhoneAuthCredentialParameters {\n  verificationId?: string;\n  verificationCode?: string;\n  phoneNumber?: string;\n  temporaryProof?: string;\n}\n\n/**\n * Represents the credentials returned by {@link PhoneAuthProvider}.\n *\n * @public\n */\nexport class PhoneAuthCredential extends AuthCredential {\n  private constructor(private readonly params: PhoneAuthCredentialParameters) {\n    super(ProviderId.PHONE, SignInMethod.PHONE);\n  }\n\n  /** @internal */\n  static _fromVerification(\n    verificationId: string,\n    verificationCode: string\n  ): PhoneAuthCredential {\n    return new PhoneAuthCredential({ verificationId, verificationCode });\n  }\n\n  /** @internal */\n  static _fromTokenResponse(\n    phoneNumber: string,\n    temporaryProof: string\n  ): PhoneAuthCredential {\n    return new PhoneAuthCredential({ phoneNumber, temporaryProof });\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return signInWithPhoneNumber(auth, this._makeVerificationRequest());\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    return linkWithPhoneNumber(auth, {\n      idToken,\n      ...this._makeVerificationRequest()\n    });\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n  }\n\n  /** @internal */\n  _makeVerificationRequest(): SignInWithPhoneNumberRequest {\n    const { temporaryProof, phoneNumber, verificationId, verificationCode } =\n      this.params;\n    if (temporaryProof && phoneNumber) {\n      return { temporaryProof, phoneNumber };\n    }\n\n    return {\n      sessionInfo: verificationId,\n      code: verificationCode\n    };\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON(): object {\n    const obj: Record<string, string> = {\n      providerId: this.providerId\n    };\n    if (this.params.phoneNumber) {\n      obj.phoneNumber = this.params.phoneNumber;\n    }\n    if (this.params.temporaryProof) {\n      obj.temporaryProof = this.params.temporaryProof;\n    }\n    if (this.params.verificationCode) {\n      obj.verificationCode = this.params.verificationCode;\n    }\n    if (this.params.verificationId) {\n      obj.verificationId = this.params.verificationId;\n    }\n\n    return obj;\n  }\n\n  /** Generates a phone credential based on a plain object or a JSON string. */\n  static fromJSON(json: object | string): PhoneAuthCredential | null {\n    if (typeof json === 'string') {\n      json = JSON.parse(json);\n    }\n\n    const { verificationId, verificationCode, phoneNumber, temporaryProof } =\n      json as { [key: string]: string };\n    if (\n      !verificationCode &&\n      !verificationId &&\n      !phoneNumber &&\n      !temporaryProof\n    ) {\n      return null;\n    }\n\n    return new PhoneAuthCredential({\n      verificationId,\n      verificationCode,\n      phoneNumber,\n      temporaryProof\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { extractQuerystring, querystringDecode } from '@firebase/util';\nimport { ActionCodeOperation } from '../model/public_types';\nimport { AuthErrorCode } from './errors';\nimport { _assert } from './util/assert';\n\n/**\n * Enums for fields in URL query string.\n *\n * @enum {string}\n */\nconst enum QueryField {\n  API_KEY = 'apiKey',\n  CODE = 'oobCode',\n  CONTINUE_URL = 'continueUrl',\n  LANGUAGE_CODE = 'languageCode',\n  MODE = 'mode',\n  TENANT_ID = 'tenantId'\n}\n\n/**\n * Maps the mode string in action code URL to Action Code Info operation.\n *\n * @param mode\n */\nfunction parseMode(mode: string | null): ActionCodeOperation | null {\n  switch (mode) {\n    case 'recoverEmail':\n      return ActionCodeOperation.RECOVER_EMAIL;\n    case 'resetPassword':\n      return ActionCodeOperation.PASSWORD_RESET;\n    case 'signIn':\n      return ActionCodeOperation.EMAIL_SIGNIN;\n    case 'verifyEmail':\n      return ActionCodeOperation.VERIFY_EMAIL;\n    case 'verifyAndChangeEmail':\n      return ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL;\n    case 'revertSecondFactorAddition':\n      return ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION;\n    default:\n      return null;\n  }\n}\n\n/**\n * Helper to parse FDL links\n *\n * @param url\n */\nfunction parseDeepLink(url: string): string {\n  const link = querystringDecode(extractQuerystring(url))['link'];\n\n  // Double link case (automatic redirect).\n  const doubleDeepLink = link\n    ? querystringDecode(extractQuerystring(link))['deep_link_id']\n    : null;\n  // iOS custom scheme links.\n  const iOSDeepLink = querystringDecode(extractQuerystring(url))[\n    'deep_link_id'\n  ];\n  const iOSDoubleDeepLink = iOSDeepLink\n    ? querystringDecode(extractQuerystring(iOSDeepLink))['link']\n    : null;\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n\n/**\n * A utility class to parse email action URLs such as password reset, email verification,\n * email link sign in, etc.\n *\n * @public\n */\nexport class ActionCodeURL {\n  /**\n   * The API key of the email action link.\n   */\n  readonly apiKey: string;\n  /**\n   * The action code of the email action link.\n   */\n  readonly code: string;\n  /**\n   * The continue URL of the email action link. Null if not provided.\n   */\n  readonly continueUrl: string | null;\n  /**\n   * The language code of the email action link. Null if not provided.\n   */\n  readonly languageCode: string | null;\n  /**\n   * The action performed by the email action link. It returns from one of the types from\n   * {@link ActionCodeInfo}\n   */\n  readonly operation: string;\n  /**\n   * The tenant ID of the email action link. Null if the email action is from the parent project.\n   */\n  readonly tenantId: string | null;\n\n  /**\n   * @param actionLink - The link from which to extract the URL.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @internal\n   */\n  constructor(actionLink: string) {\n    const searchParams = querystringDecode(extractQuerystring(actionLink));\n    const apiKey = searchParams[QueryField.API_KEY] ?? null;\n    const code = searchParams[QueryField.CODE] ?? null;\n    const operation = parseMode(searchParams[QueryField.MODE] ?? null);\n    // Validate API key, code and mode.\n    _assert(apiKey && code && operation, AuthErrorCode.ARGUMENT_ERROR);\n    this.apiKey = apiKey;\n    this.operation = operation;\n    this.code = code;\n    this.continueUrl = searchParams[QueryField.CONTINUE_URL] ?? null;\n    this.languageCode = searchParams[QueryField.LANGUAGE_CODE] ?? null;\n    this.tenantId = searchParams[QueryField.TENANT_ID] ?? null;\n  }\n\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n   * otherwise returns null.\n   *\n   * @param link  - The email action link string.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @public\n   */\n  static parseLink(link: string): ActionCodeURL | null {\n    const actionLink = parseDeepLink(link);\n    try {\n      return new ActionCodeURL(actionLink);\n    } catch {\n      return null;\n    }\n  }\n}\n\n/**\n * Parses the email action link string and returns an {@link ActionCodeURL} if\n * the link is valid, otherwise returns null.\n *\n * @public\n */\nexport function parseActionCodeURL(link: string): ActionCodeURL | null {\n  return ActionCodeURL.parseLink(link);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\nimport { AuthProvider } from '../../model/public_types';\n\nimport { ActionCodeURL } from '../action_code_url';\nimport { EmailAuthCredential } from '../credentials/email';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\n\n/**\n * Provider for generating {@link EmailAuthCredential}.\n *\n * @public\n */\nexport class EmailAuthProvider implements AuthProvider {\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  static readonly PROVIDER_ID: 'password' = ProviderId.PASSWORD;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  static readonly EMAIL_PASSWORD_SIGN_IN_METHOD: 'password' =\n    SignInMethod.EMAIL_PASSWORD;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  static readonly EMAIL_LINK_SIGN_IN_METHOD: 'emailLink' =\n    SignInMethod.EMAIL_LINK;\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  readonly providerId = EmailAuthProvider.PROVIDER_ID;\n\n  /**\n   * Initialize an {@link AuthCredential} using an email and password.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credential(email, password);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n   * ```\n   *\n   * @param email - Email address.\n   * @param password - User account password.\n   * @returns The auth provider credential.\n   */\n  static credential(email: string, password: string): EmailAuthCredential {\n    return EmailAuthCredential._fromEmailAndPassword(email, password);\n  }\n\n  /**\n   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n   * email link operation.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * await sendSignInLinkToEmail(auth, email);\n   * // Obtain emailLink from user.\n   * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance used to verify the link.\n   * @param email - Email address.\n   * @param emailLink - Sign-in email link.\n   * @returns - The auth provider credential.\n   */\n  static credentialWithLink(\n    email: string,\n    emailLink: string\n  ): EmailAuthCredential {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    _assert(actionCodeUrl, AuthErrorCode.ARGUMENT_ERROR);\n\n    return EmailAuthCredential._fromEmailAndCode(\n      email,\n      actionCodeUrl.code,\n      actionCodeUrl.tenantId\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider } from '../../model/public_types';\n\n/**\n * Map of OAuth Custom Parameters.\n *\n * @public\n */\nexport type CustomParameters = Record<string, string>;\n\n/**\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\n *\n * This class is not meant to be instantiated directly.\n *\n * @public\n */\nexport abstract class FederatedAuthProvider implements AuthProvider {\n  /** @internal */\n  defaultLanguageCode: string | null = null;\n  /** @internal */\n  private customParameters: CustomParameters = {};\n\n  /**\n   * Constructor for generic OAuth providers.\n   *\n   * @param providerId - Provider for which credentials should be generated.\n   */\n  constructor(readonly providerId: string) {}\n\n  /**\n   * Set the language gode.\n   *\n   * @param languageCode - language code\n   */\n  setDefaultLanguage(languageCode: string | null): void {\n    this.defaultLanguageCode = languageCode;\n  }\n\n  /**\n   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n   * operations.\n   *\n   * @remarks\n   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n   *\n   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n   */\n  setCustomParameters(customOAuthParameters: CustomParameters): AuthProvider {\n    this.customParameters = customOAuthParameters;\n    return this;\n  }\n\n  /**\n   * Retrieve the current list of {@link CustomParameters}.\n   */\n  getCustomParameters(): CustomParameters {\n    return this.customParameters;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, UserCredential } from '../../model/public_types';\n\nimport { _assert } from '../util/assert';\nimport { AuthErrorCode } from '../errors';\n\nimport { OAuthCredential, OAuthCredentialParams } from '../credentials/oauth';\nimport { UserCredentialInternal } from '../../model/user';\nimport { FirebaseError } from '@firebase/util';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { SignInWithIdpResponse } from '../../../internal';\nimport { FederatedAuthProvider } from './federated';\n\n/**\n * Defines the options for initializing an {@link OAuthCredential}.\n *\n * @remarks\n * For ID tokens with nonce claim, the raw nonce has to also be provided.\n *\n * @public\n */\nexport interface OAuthCredentialOptions {\n  /**\n   * The OAuth ID token used to initialize the {@link OAuthCredential}.\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token used to initialize the {@link OAuthCredential}.\n   */\n  accessToken?: string;\n  /**\n   * The raw nonce associated with the ID token.\n   *\n   * @remarks\n   * It is required when an ID token with a nonce field is provided. The SHA-256 hash of the\n   * raw nonce must match the nonce field in the ID token.\n   */\n  rawNonce?: string;\n}\n\n/**\n * Common code to all OAuth providers. This is separate from the\n * {@link OAuthProvider} so that child providers (like\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n * Instead, they rely on a static `credential` method.\n */\nexport abstract class BaseOAuthProvider\n  extends FederatedAuthProvider\n  implements AuthProvider\n{\n  /** @internal */\n  private scopes: string[] = [];\n\n  /**\n   * Add an OAuth scope to the credential.\n   *\n   * @param scope - Provider OAuth scope to add.\n   */\n  addScope(scope: string): AuthProvider {\n    // If not already added, add scope to list.\n    if (!this.scopes.includes(scope)) {\n      this.scopes.push(scope);\n    }\n    return this;\n  }\n\n  /**\n   * Retrieve the current list of OAuth scopes.\n   */\n  getScopes(): string[] {\n    return [...this.scopes];\n  }\n}\n\n/**\n * Provider for generating generic {@link OAuthCredential}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new OAuthProvider('google.com');\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a OAuth Access Token for the provider.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new OAuthProvider('google.com');\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a OAuth Access Token for the provider.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nexport class OAuthProvider extends BaseOAuthProvider {\n  /**\n   * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json: object | string): OAuthCredential {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    _assert(\n      'providerId' in obj && 'signInMethod' in obj,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    return OAuthCredential._fromParams(obj);\n  }\n\n  /**\n   * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n   *\n   * @remarks\n   * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n   * the raw nonce must match the nonce field in the ID token.\n   *\n   * @example\n   * ```javascript\n   * // `googleUser` from the onsuccess Google Sign In callback.\n   * // Initialize a generate OAuth provider with a `google.com` providerId.\n   * const provider = new OAuthProvider('google.com');\n   * const credential = provider.credential({\n   *   idToken: googleUser.getAuthResponse().id_token,\n   * });\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param params - Either the options object containing the ID token, access token and raw nonce\n   * or the ID token string.\n   */\n  credential(params: OAuthCredentialOptions): OAuthCredential {\n    return this._credential({ ...params, nonce: params.rawNonce });\n  }\n\n  /** An internal credential method that accepts more permissive options */\n  private _credential(\n    params: Omit<OAuthCredentialParams, 'signInMethod' | 'providerId'>\n  ): OAuthCredential {\n    _assert(params.idToken || params.accessToken, AuthErrorCode.ARGUMENT_ERROR);\n    // For OAuthCredential, sign in method is same as providerId.\n    return OAuthCredential._fromParams({\n      ...params,\n      providerId: this.providerId,\n      signInMethod: this.providerId\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return OAuthProvider.oauthCredentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return OAuthProvider.oauthCredentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static oauthCredentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const {\n      oauthIdToken,\n      oauthAccessToken,\n      oauthTokenSecret,\n      pendingToken,\n      nonce,\n      providerId\n    } = tokenResponse as SignInWithIdpResponse;\n    if (\n      !oauthAccessToken &&\n      !oauthTokenSecret &&\n      !oauthIdToken &&\n      !pendingToken\n    ) {\n      return null;\n    }\n\n    if (!providerId) {\n      return null;\n    }\n\n    try {\n      return new OAuthProvider(providerId)._credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        nonce,\n        pendingToken\n      });\n    } catch (e) {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('user_birthday');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * provider.addScope('user_birthday');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = FacebookAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nexport class FacebookAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  static readonly FACEBOOK_SIGN_IN_METHOD: 'facebook.com' =\n    SignInMethod.FACEBOOK;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  static readonly PROVIDER_ID: 'facebook.com' = ProviderId.FACEBOOK;\n\n  constructor() {\n    super(ProviderId.FACEBOOK);\n  }\n\n  /**\n   * Creates a credential for Facebook.\n   *\n   * @example\n   * ```javascript\n   * // `event` from the Facebook auth.authResponseChange callback.\n   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param accessToken - Facebook access token.\n   */\n  static credential(accessToken: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: FacebookAuthProvider.PROVIDER_ID,\n      signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return FacebookAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return FacebookAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n\n    try {\n      return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GoogleAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Google Access Token.\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GoogleAuthProvider();\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Google Access Token.\n * const credential = GoogleAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nexport class GoogleAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  static readonly GOOGLE_SIGN_IN_METHOD: 'google.com' = SignInMethod.GOOGLE;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  static readonly PROVIDER_ID: 'google.com' = ProviderId.GOOGLE;\n\n  constructor() {\n    super(ProviderId.GOOGLE);\n    this.addScope('profile');\n  }\n\n  /**\n   * Creates a credential for Google. At least one of ID token and access token is required.\n   *\n   * @example\n   * ```javascript\n   * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param idToken - Google ID token.\n   * @param accessToken - Google access token.\n   */\n  static credential(\n    idToken?: string | null,\n    accessToken?: string | null\n  ): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: GoogleAuthProvider.PROVIDER_ID,\n      signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n      idToken,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return GoogleAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return GoogleAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const { oauthIdToken, oauthAccessToken } =\n      tokenResponse as SignInWithIdpResponse;\n    if (!oauthIdToken && !oauthAccessToken) {\n      // This could be an oauth 1 credential or a phone credential\n      return null;\n    }\n\n    try {\n      return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n *\n * @remarks\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n * the {@link signInWithPopup} handler:\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GithubAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('repo');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a GitHub Access Token.\n *   const credential = GithubAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GithubAuthProvider();\n * provider.addScope('repo');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a GitHub Access Token.\n * const credential = GithubAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nexport class GithubAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  static readonly GITHUB_SIGN_IN_METHOD: 'github.com' = SignInMethod.GITHUB;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  static readonly PROVIDER_ID: 'github.com' = ProviderId.GITHUB;\n\n  constructor() {\n    super(ProviderId.GITHUB);\n  }\n\n  /**\n   * Creates a credential for GitHub.\n   *\n   * @param accessToken - GitHub access token.\n   */\n  static credential(accessToken: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: GithubAuthProvider.PROVIDER_ID,\n      signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return GithubAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return GithubAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n\n    try {\n      return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents the SAML credentials returned by an {@link SAMLAuthProvider}.\n *\n * @public\n */\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthCredential } from './auth_credential';\n\nconst IDP_REQUEST_URI = 'http://localhost';\n\n/**\n * @public\n */\nexport class SAMLAuthCredential extends AuthCredential {\n  /** @internal */\n  private constructor(\n    providerId: string,\n    private readonly pendingToken: string\n  ) {\n    super(providerId, providerId);\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON(): object {\n    return {\n      signInMethod: this.signInMethod,\n      providerId: this.providerId,\n      pendingToken: this.pendingToken\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json: string | object): SAMLAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const { providerId, signInMethod, pendingToken }: Record<string, string> =\n      obj;\n    if (\n      !providerId ||\n      !signInMethod ||\n      !pendingToken ||\n      providerId !== signInMethod\n    ) {\n      return null;\n    }\n\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n\n  /**\n   * Helper static method to avoid exposing the constructor to end users.\n   *\n   * @internal\n   */\n  static _create(providerId: string, pendingToken: string): SAMLAuthCredential {\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n\n  private buildRequest(): SignInWithIdpRequest {\n    return {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true,\n      pendingToken: this.pendingToken\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @license\n * Copyright 2020 Twitter LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new TwitterAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Twitter Access Token and Secret.\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n *   const secret = credential.secret;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new TwitterAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Twitter Access Token and Secret.\n * const credential = TwitterAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * const secret = credential.secret;\n * ```\n *\n * @public\n */\nexport class TwitterAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  static readonly TWITTER_SIGN_IN_METHOD: 'twitter.com' = SignInMethod.TWITTER;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  static readonly PROVIDER_ID: 'twitter.com' = ProviderId.TWITTER;\n\n  constructor() {\n    super(ProviderId.TWITTER);\n  }\n\n  /**\n   * Creates a credential for Twitter.\n   *\n   * @param token - Twitter access token.\n   * @param secret - Twitter secret.\n   */\n  static credential(token: string, secret: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: TwitterAuthProvider.PROVIDER_ID,\n      signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n      oauthToken: token,\n      oauthTokenSecret: secret\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return TwitterAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return TwitterAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { oauthAccessToken, oauthTokenSecret } =\n      tokenResponse as SignInWithIdpResponse;\n    if (!oauthAccessToken || !oauthTokenSecret) {\n      return null;\n    }\n\n    try {\n      return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignUpRequest {\n  idToken?: string;\n  returnSecureToken?: boolean;\n  email?: string;\n  password?: string;\n  tenantId?: string;\n  captchaResponse?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface SignUpResponse extends IdTokenResponse {\n  displayName?: string;\n  email?: string;\n}\n\nexport async function signUp(\n  auth: Auth,\n  request: SignUpRequest\n): Promise<SignUpResponse> {\n  return _performSignInRequest<SignUpRequest, SignUpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_UP,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { UserImpl } from './user_impl';\nimport { AuthInternal } from '../../model/auth';\nimport { OperationType, ProviderId } from '../../model/enums';\n\ninterface UserCredentialParams {\n  readonly user: UserInternal;\n  readonly providerId: ProviderId | string | null;\n  readonly _tokenResponse?: PhoneOrOauthTokenResponse;\n  readonly operationType: OperationType;\n}\n\nexport class UserCredentialImpl\n  implements UserCredentialInternal, UserCredentialParams\n{\n  readonly user: UserInternal;\n  readonly providerId: ProviderId | string | null;\n  readonly _tokenResponse: PhoneOrOauthTokenResponse | undefined;\n  readonly operationType: OperationType;\n\n  constructor(params: UserCredentialParams) {\n    this.user = params.user;\n    this.providerId = params.providerId;\n    this._tokenResponse = params._tokenResponse;\n    this.operationType = params.operationType;\n  }\n\n  static async _fromIdTokenResponse(\n    auth: AuthInternal,\n    operationType: OperationType,\n    idTokenResponse: IdTokenResponse,\n    isAnonymous: boolean = false\n  ): Promise<UserCredentialInternal> {\n    const user = await UserImpl._fromIdTokenResponse(\n      auth,\n      idTokenResponse,\n      isAnonymous\n    );\n    const providerId = providerIdForResponse(idTokenResponse);\n    const userCred = new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: idTokenResponse,\n      operationType\n    });\n    return userCred;\n  }\n\n  static async _forOperation(\n    user: UserInternal,\n    operationType: OperationType,\n    response: PhoneOrOauthTokenResponse\n  ): Promise<UserCredentialImpl> {\n    await user._updateTokensIfNecessary(response, /* reload */ true);\n    const providerId = providerIdForResponse(response);\n    return new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: response,\n      operationType\n    });\n  }\n}\n\nfunction providerIdForResponse(\n  response: IdTokenResponse\n): ProviderId | string | null {\n  if (response.providerId) {\n    return response.providerId;\n  }\n\n  if ('phoneNumber' in response) {\n    return ProviderId.PHONE;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, UserCredential } from '../../model/public_types';\nimport { signUp } from '../../api/authentication/sign_up';\nimport { UserInternal } from '../../model/user';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { OperationType } from '../../model/enums';\nimport { _isFirebaseServerApp } from '@firebase/app';\nimport { _serverAppCurrentUserOperationNotSupportedError } from '../../core/util/assert';\n\n/**\n * Asynchronously signs in as an anonymous user.\n *\n * @remarks\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n * new anonymous user identity will be created and returned.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport async function signInAnonymously(auth: Auth): Promise<UserCredential> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const authInternal = _castAuth(auth);\n  await authInternal._initializationPromise;\n  if (authInternal.currentUser?.isAnonymous) {\n    // If an anonymous user is already signed in, no need to sign them in again.\n    return new UserCredentialImpl({\n      user: authInternal.currentUser as UserInternal,\n      providerId: null,\n      operationType: OperationType.SIGN_IN\n    });\n  }\n  const response = await signUp(authInternal, {\n    returnSecureToken: true\n  });\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response,\n    true\n  );\n  await authInternal._updateCurrentUser(userCredential.user);\n  return userCredential;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MultiFactorError as MultiFactorErrorPublic } from '../model/public_types';\nimport { FirebaseError } from '@firebase/util';\nimport { AuthInternal } from '../model/auth';\nimport { IdTokenResponse } from '../model/id_token';\nimport { AuthErrorCode } from '../core/errors';\nimport { UserInternal } from '../model/user';\nimport { AuthCredential } from '../core/credentials';\nimport { IdTokenMfaResponse } from '../api/authentication/mfa';\nimport { OperationType } from '../model/enums';\n\nexport type MultiFactorErrorData = MultiFactorErrorPublic['customData'] & {\n  _serverResponse: IdTokenMfaResponse;\n};\n\nexport class MultiFactorError\n  extends FirebaseError\n  implements MultiFactorErrorPublic\n{\n  readonly customData: MultiFactorErrorData;\n\n  private constructor(\n    auth: AuthInternal,\n    error: FirebaseError,\n    readonly operationType: OperationType,\n    readonly user?: UserInternal\n  ) {\n    super(error.code, error.message);\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, MultiFactorError.prototype);\n    this.customData = {\n      appName: auth.name,\n      tenantId: auth.tenantId ?? undefined,\n      _serverResponse: error.customData!._serverResponse as IdTokenMfaResponse,\n      operationType\n    };\n  }\n\n  static _fromErrorAndOperation(\n    auth: AuthInternal,\n    error: FirebaseError,\n    operationType: OperationType,\n    user?: UserInternal\n  ): MultiFactorError {\n    return new MultiFactorError(auth, error, operationType, user);\n  }\n}\n\nexport function _processCredentialSavingMfaContextIfNecessary(\n  auth: AuthInternal,\n  operationType: OperationType,\n  credential: AuthCredential,\n  user?: UserInternal\n): Promise<IdTokenResponse> {\n  const idTokenProvider =\n    operationType === OperationType.REAUTHENTICATE\n      ? credential._getReauthenticationResolver(auth)\n      : credential._getIdTokenResponse(auth);\n\n  return idTokenProvider.catch(error => {\n    if (error.code === `auth/${AuthErrorCode.MFA_REQUIRED}`) {\n      throw MultiFactorError._fromErrorAndOperation(\n        auth,\n        error,\n        operationType,\n        user\n      );\n    }\n\n    throw error;\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../../model/public_types';\n\nimport { deleteLinkedAccounts } from '../../api/account_management/account';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { providerDataAsNames } from '../util/providers';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { _reloadWithoutSaving } from './reload';\nimport { UserCredentialImpl } from './user_credential_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType, ProviderId } from '../../model/enums';\n\n/**\n * Unlinks a provider from a user account.\n *\n * @param user - The user.\n * @param providerId - The provider to unlink.\n *\n * @public\n */\nexport async function unlink(user: User, providerId: string): Promise<User> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  await _assertLinkedStatus(true, userInternal, providerId);\n  const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {\n    idToken: await userInternal.getIdToken(),\n    deleteProvider: [providerId]\n  });\n\n  const providersLeft = providerDataAsNames(providerUserInfo || []);\n\n  userInternal.providerData = userInternal.providerData.filter(pd =>\n    providersLeft.has(pd.providerId)\n  );\n  if (!providersLeft.has(ProviderId.PHONE)) {\n    userInternal.phoneNumber = null;\n  }\n\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  return userInternal;\n}\n\nexport async function _link(\n  user: UserInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredentialInternal> {\n  const response = await _logoutIfInvalidated(\n    user,\n    credential._linkToIdToken(user.auth, await user.getIdToken()),\n    bypassAuthState\n  );\n  return UserCredentialImpl._forOperation(user, OperationType.LINK, response);\n}\n\nexport async function _assertLinkedStatus(\n  expected: boolean,\n  user: UserInternal,\n  provider: string\n): Promise<void> {\n  await _reloadWithoutSaving(user);\n  const providerIds = providerDataAsNames(user.providerData);\n\n  const code =\n    expected === false\n      ? AuthErrorCode.PROVIDER_ALREADY_LINKED\n      : AuthErrorCode.NO_SUCH_PROVIDER;\n  _assert(providerIds.has(provider) === expected, user.auth, code);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { _processCredentialSavingMfaContextIfNecessary } from '../../mfa/mfa_error';\nimport { OperationType } from '../../model/enums';\nimport { UserInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { AuthErrorCode } from '../errors';\nimport { _assert, _fail } from '../util/assert';\nimport { _parseToken } from './id_token_result';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { UserCredentialImpl } from './user_credential_impl';\nimport { _isFirebaseServerApp } from '@firebase/app';\nimport { _serverAppCurrentUserOperationNotSupportedError } from '../../core/util/assert';\n\nexport async function _reauthenticate(\n  user: UserInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredentialImpl> {\n  const { auth } = user;\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const operationType = OperationType.REAUTHENTICATE;\n\n  try {\n    const response = await _logoutIfInvalidated(\n      user,\n      _processCredentialSavingMfaContextIfNecessary(\n        auth,\n        operationType,\n        credential,\n        user\n      ),\n      bypassAuthState\n    );\n    _assert(response.idToken, auth, AuthErrorCode.INTERNAL_ERROR);\n    const parsed = _parseToken(response.idToken);\n    _assert(parsed, auth, AuthErrorCode.INTERNAL_ERROR);\n\n    const { sub: localId } = parsed;\n    _assert(user.uid === localId, auth, AuthErrorCode.USER_MISMATCH);\n\n    return UserCredentialImpl._forOperation(user, operationType, response);\n  } catch (e) {\n    // Convert user deleted error into user mismatch\n    if ((e as FirebaseError)?.code === `auth/${AuthErrorCode.USER_DELETED}`) {\n      _fail(auth, AuthErrorCode.USER_MISMATCH);\n    }\n    throw e;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential, Auth, User } from '../../model/public_types';\n\nimport { _processCredentialSavingMfaContextIfNecessary } from '../../mfa/mfa_error';\nimport { AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { _assertLinkedStatus, _link } from '../user/link_unlink';\nimport { _reauthenticate } from '../user/reauthenticate';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../../model/enums';\nimport { _isFirebaseServerApp } from '@firebase/app';\nimport { _serverAppCurrentUserOperationNotSupportedError } from '../../core/util/assert';\n\nexport async function _signInWithCredential(\n  auth: AuthInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredential> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const operationType = OperationType.SIGN_IN;\n  const response = await _processCredentialSavingMfaContextIfNecessary(\n    auth,\n    operationType,\n    credential\n  );\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    auth,\n    operationType,\n    response\n  );\n\n  if (!bypassAuthState) {\n    await auth._updateCurrentUser(userCredential.user);\n  }\n  return userCredential;\n}\n\n/**\n * Asynchronously signs in with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function signInWithCredential(\n  auth: Auth,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  return _signInWithCredential(_castAuth(auth), credential);\n}\n\n/**\n * Links the user account with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function linkWithCredential(\n  user: User,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n\n  await _assertLinkedStatus(false, userInternal, credential.providerId);\n\n  return _link(userInternal, credential);\n}\n\n/**\n * Re-authenticates a user using a fresh credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n * or a `TOKEN_EXPIRED` error.\n *\n * This method is not supported on any {@link User} signed in by {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function reauthenticateWithCredential(\n  user: User,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  return _reauthenticate(getModularInstance(user) as UserInternal, credential);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { SignInWithPhoneNumberRequest } from '../authentication/sms';\nimport { FinalizeMfaResponse } from '../authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\n\n/**\n * MFA Info as returned by the API.\n */\ninterface BaseMfaEnrollment {\n  mfaEnrollmentId: string;\n  enrolledAt: number;\n  displayName?: string;\n}\n\n/**\n * An MFA provided by SMS verification.\n */\nexport interface PhoneMfaEnrollment extends BaseMfaEnrollment {\n  phoneInfo: string;\n}\n\n/**\n * An MFA provided by TOTP (Time-based One Time Password).\n */\nexport interface TotpMfaEnrollment extends BaseMfaEnrollment {}\n\n/**\n * MfaEnrollment can be any subtype of BaseMfaEnrollment, currently only PhoneMfaEnrollment and TotpMfaEnrollment are supported.\n */\nexport type MfaEnrollment = PhoneMfaEnrollment | TotpMfaEnrollment;\n\nexport interface StartPhoneMfaEnrollmentRequest {\n  idToken: string;\n  phoneEnrollmentInfo: {\n    phoneNumber: string;\n    recaptchaToken: string;\n  };\n  tenantId?: string;\n}\n\nexport interface StartPhoneMfaEnrollmentResponse {\n  phoneSessionInfo: {\n    sessionInfo: string;\n  };\n}\n\nexport function startEnrollPhoneMfa(\n  auth: AuthInternal,\n  request: StartPhoneMfaEnrollmentRequest\n): Promise<StartPhoneMfaEnrollmentResponse> {\n  return _performApiRequest<\n    StartPhoneMfaEnrollmentRequest,\n    StartPhoneMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface FinalizePhoneMfaEnrollmentRequest {\n  idToken: string;\n  phoneVerificationInfo: SignInWithPhoneNumberRequest;\n  displayName?: string | null;\n  tenantId?: string;\n}\n\nexport interface FinalizePhoneMfaEnrollmentResponse\n  extends FinalizeMfaResponse {}\n\nexport function finalizeEnrollPhoneMfa(\n  auth: AuthInternal,\n  request: FinalizePhoneMfaEnrollmentRequest\n): Promise<FinalizePhoneMfaEnrollmentResponse> {\n  return _performApiRequest<\n    FinalizePhoneMfaEnrollmentRequest,\n    FinalizePhoneMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\nexport interface StartTotpMfaEnrollmentRequest {\n  idToken: string;\n  totpEnrollmentInfo: {};\n  tenantId?: string;\n}\n\nexport interface StartTotpMfaEnrollmentResponse {\n  totpSessionInfo: {\n    sharedSecretKey: string;\n    verificationCodeLength: number;\n    hashingAlgorithm: string;\n    periodSec: number;\n    sessionInfo: string;\n    finalizeEnrollmentTime: number;\n  };\n}\n\nexport function startEnrollTotpMfa(\n  auth: AuthInternal,\n  request: StartTotpMfaEnrollmentRequest\n): Promise<StartTotpMfaEnrollmentResponse> {\n  return _performApiRequest<\n    StartTotpMfaEnrollmentRequest,\n    StartTotpMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface TotpVerificationInfo {\n  sessionInfo: string;\n  verificationCode: string;\n}\nexport interface FinalizeTotpMfaEnrollmentRequest {\n  idToken: string;\n  totpVerificationInfo: TotpVerificationInfo;\n  displayName?: string | null;\n  tenantId?: string;\n}\n\nexport interface FinalizeTotpMfaEnrollmentResponse\n  extends FinalizeMfaResponse {}\n\nexport function finalizeEnrollTotpMfa(\n  auth: AuthInternal,\n  request: FinalizeTotpMfaEnrollmentRequest\n): Promise<FinalizeTotpMfaEnrollmentResponse> {\n  return _performApiRequest<\n    FinalizeTotpMfaEnrollmentRequest,\n    FinalizeTotpMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface WithdrawMfaRequest {\n  idToken: string;\n  mfaEnrollmentId: string;\n  tenantId?: string;\n}\n\nexport interface WithdrawMfaResponse extends FinalizeMfaResponse {}\n\nexport function withdrawMfa(\n  auth: AuthInternal,\n  request: WithdrawMfaRequest\n): Promise<WithdrawMfaResponse> {\n  return _performApiRequest<WithdrawMfaRequest, WithdrawMfaResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.WITHDRAW_MFA,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  MultiFactorAssertion,\n  MultiFactorInfo,\n  MultiFactorSession,\n  MultiFactorUser,\n  User\n} from '../model/public_types';\n\nimport { withdrawMfa } from '../api/account_management/mfa';\nimport { _logoutIfInvalidated } from '../core/user/invalidation';\nimport { UserInternal } from '../model/user';\nimport { MultiFactorAssertionImpl } from './mfa_assertion';\nimport { MultiFactorInfoImpl } from './mfa_info';\nimport { MultiFactorSessionImpl } from './mfa_session';\nimport { getModularInstance } from '@firebase/util';\n\nexport class MultiFactorUserImpl implements MultiFactorUser {\n  enrolledFactors: MultiFactorInfo[] = [];\n\n  private constructor(readonly user: UserInternal) {\n    user._onReload(userInfo => {\n      if (userInfo.mfaInfo) {\n        this.enrolledFactors = userInfo.mfaInfo.map(enrollment =>\n          MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment)\n        );\n      }\n    });\n  }\n\n  static _fromUser(user: UserInternal): MultiFactorUserImpl {\n    return new MultiFactorUserImpl(user);\n  }\n\n  async getSession(): Promise<MultiFactorSession> {\n    return MultiFactorSessionImpl._fromIdtoken(\n      await this.user.getIdToken(),\n      this.user\n    );\n  }\n\n  async enroll(\n    assertionExtern: MultiFactorAssertion,\n    displayName?: string | null\n  ): Promise<void> {\n    const assertion = assertionExtern as MultiFactorAssertionImpl;\n    const session = (await this.getSession()) as MultiFactorSessionImpl;\n    const finalizeMfaResponse = await _logoutIfInvalidated(\n      this.user,\n      assertion._process(this.user.auth, session, displayName)\n    );\n    // New tokens will be issued after enrollment of the new second factors.\n    // They need to be updated on the user.\n    await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n    // The user needs to be reloaded to get the new multi-factor information\n    // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n    // will be updated.\n    return this.user.reload();\n  }\n\n  async unenroll(infoOrUid: MultiFactorInfo | string): Promise<void> {\n    const mfaEnrollmentId =\n      typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n    const idToken = await this.user.getIdToken();\n    try {\n      const idTokenResponse = await _logoutIfInvalidated(\n        this.user,\n        withdrawMfa(this.user.auth, {\n          idToken,\n          mfaEnrollmentId\n        })\n      );\n      // Remove the second factor from the user's list.\n      this.enrolledFactors = this.enrolledFactors.filter(\n        ({ uid }) => uid !== mfaEnrollmentId\n      );\n      // Depending on whether the backend decided to revoke the user's session,\n      // the tokenResponse may be empty. If the tokens were not updated (and they\n      // are now invalid), reloading the user will discover this and invalidate\n      // the user's state accordingly.\n      await this.user._updateTokensIfNecessary(idTokenResponse);\n      await this.user.reload();\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n\nconst multiFactorUserCache = new WeakMap<User, MultiFactorUser>();\n\n/**\n * The {@link MultiFactorUser} corresponding to the user.\n *\n * @remarks\n * This is used to access all multi-factor properties and operations related to the user.\n *\n * @param user - The user.\n *\n * @public\n */\nexport function multiFactor(user: User): MultiFactorUser {\n  const userModular = getModularInstance(user);\n  if (!multiFactorUserCache.has(userModular)) {\n    multiFactorUserCache.set(\n      userModular,\n      MultiFactorUserImpl._fromUser(userModular as UserInternal)\n    );\n  }\n  return multiFactorUserCache.get(userModular)!;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Persistence } from '../../model/public_types';\n\nexport const enum PersistenceType {\n  SESSION = 'SESSION',\n  LOCAL = 'LOCAL',\n  NONE = 'NONE'\n}\n\nexport type PersistedBlob = Record<string, unknown>;\n\nexport interface Instantiator<T> {\n  (blob: PersistedBlob): T;\n}\n\nexport type PersistenceValue = PersistedBlob | string;\n\nexport const STORAGE_AVAILABLE_KEY = '__sak';\n\nexport interface StorageEventListener {\n  (value: PersistenceValue | null): void;\n}\n\nexport interface PersistenceInternal extends Persistence {\n  type: PersistenceType;\n  _isAvailable(): Promise<boolean>;\n  _set(key: string, value: PersistenceValue): Promise<void>;\n  _get<T extends PersistenceValue>(key: string): Promise<T | null>;\n  _remove(key: string): Promise<void>;\n  _addListener(key: string, listener: StorageEventListener): void;\n  _removeListener(key: string, listener: StorageEventListener): void;\n  // Should this persistence allow migration up the chosen hierarchy?\n  _shouldAllowMigration?: boolean;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PersistenceValue,\n  STORAGE_AVAILABLE_KEY,\n  PersistenceType\n} from '../../core/persistence';\n\n// There are two different browser persistence types: local and session.\n// Both have the same implementation but use a different underlying storage\n// object.\n\nexport abstract class BrowserPersistenceClass {\n  protected constructor(\n    protected readonly storageRetriever: () => Storage,\n    readonly type: PersistenceType\n  ) {}\n\n  _isAvailable(): Promise<boolean> {\n    try {\n      if (!this.storage) {\n        return Promise.resolve(false);\n      }\n      this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\n      this.storage.removeItem(STORAGE_AVAILABLE_KEY);\n      return Promise.resolve(true);\n    } catch {\n      return Promise.resolve(false);\n    }\n  }\n\n  _set(key: string, value: PersistenceValue): Promise<void> {\n    this.storage.setItem(key, JSON.stringify(value));\n    return Promise.resolve();\n  }\n\n  _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const json = this.storage.getItem(key);\n    return Promise.resolve(json ? JSON.parse(json) : null);\n  }\n\n  _remove(key: string): Promise<void> {\n    this.storage.removeItem(key);\n    return Promise.resolve();\n  }\n\n  protected get storage(): Storage {\n    return this.storageRetriever();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport { _isMobileBrowser, _isIE10 } from '../../core/util/browser';\nimport {\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener\n} from '../../core/persistence';\nimport { BrowserPersistenceClass } from './browser';\n\n// The polling period in case events are not supported\nexport const _POLLING_INTERVAL_MS = 1000;\n\n// The IE 10 localStorage cross tab synchronization delay in milliseconds\nconst IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\n\nclass BrowserLocalPersistence\n  extends BrowserPersistenceClass\n  implements InternalPersistence\n{\n  static type: 'LOCAL' = 'LOCAL';\n\n  constructor() {\n    super(() => window.localStorage, PersistenceType.LOCAL);\n  }\n\n  private readonly boundEventHandler = (\n    event: StorageEvent,\n    poll?: boolean\n  ): void => this.onStorageEvent(event, poll);\n  private readonly listeners: Record<string, Set<StorageEventListener>> = {};\n  private readonly localCache: Record<string, string | null> = {};\n  // setTimeout return value is platform specific\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private pollTimer: any | null = null;\n\n  // Whether to use polling instead of depending on window events\n  private readonly fallbackToPolling = _isMobileBrowser();\n  readonly _shouldAllowMigration = true;\n\n  private forAllChangedKeys(\n    cb: (key: string, oldValue: string | null, newValue: string | null) => void\n  ): void {\n    // Check all keys with listeners on them.\n    for (const key of Object.keys(this.listeners)) {\n      // Get value from localStorage.\n      const newValue = this.storage.getItem(key);\n      const oldValue = this.localCache[key];\n      // If local map value does not match, trigger listener with storage event.\n      // Differentiate this simulated event from the real storage event.\n      if (newValue !== oldValue) {\n        cb(key, oldValue, newValue);\n      }\n    }\n  }\n\n  private onStorageEvent(event: StorageEvent, poll = false): void {\n    // Key would be null in some situations, like when localStorage is cleared\n    if (!event.key) {\n      this.forAllChangedKeys(\n        (key: string, _oldValue: string | null, newValue: string | null) => {\n          this.notifyListeners(key, newValue);\n        }\n      );\n      return;\n    }\n\n    const key = event.key;\n\n    // Check the mechanism how this event was detected.\n    // The first event will dictate the mechanism to be used.\n    if (poll) {\n      // Environment detects storage changes via polling.\n      // Remove storage event listener to prevent possible event duplication.\n      this.detachListener();\n    } else {\n      // Environment detects storage changes via storage event listener.\n      // Remove polling listener to prevent possible event duplication.\n      this.stopPolling();\n    }\n\n    const triggerListeners = (): void => {\n      // Keep local map up to date in case storage event is triggered before\n      // poll.\n      const storedValue = this.storage.getItem(key);\n      if (!poll && this.localCache[key] === storedValue) {\n        // Real storage event which has already been detected, do nothing.\n        // This seems to trigger in some IE browsers for some reason.\n        return;\n      }\n      this.notifyListeners(key, storedValue);\n    };\n\n    const storedValue = this.storage.getItem(key);\n    if (\n      _isIE10() &&\n      storedValue !== event.newValue &&\n      event.newValue !== event.oldValue\n    ) {\n      // IE 10 has this weird bug where a storage event would trigger with the\n      // correct key, oldValue and newValue but localStorage.getItem(key) does\n      // not yield the updated value until a few milliseconds. This ensures\n      // this recovers from that situation.\n      setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\n    } else {\n      triggerListeners();\n    }\n  }\n\n  private notifyListeners(key: string, value: string | null): void {\n    this.localCache[key] = value;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(value ? JSON.parse(value) : value);\n      }\n    }\n  }\n\n  private startPolling(): void {\n    this.stopPolling();\n\n    this.pollTimer = setInterval(() => {\n      this.forAllChangedKeys(\n        (key: string, oldValue: string | null, newValue: string | null) => {\n          this.onStorageEvent(\n            new StorageEvent('storage', {\n              key,\n              oldValue,\n              newValue\n            }),\n            /* poll */ true\n          );\n        }\n      );\n    }, _POLLING_INTERVAL_MS);\n  }\n\n  private stopPolling(): void {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n\n  private attachListener(): void {\n    window.addEventListener('storage', this.boundEventHandler);\n  }\n\n  private detachListener(): void {\n    window.removeEventListener('storage', this.boundEventHandler);\n  }\n\n  _addListener(key: string, listener: StorageEventListener): void {\n    if (Object.keys(this.listeners).length === 0) {\n      // Whether browser can detect storage event when it had already been pushed to the background.\n      // This may happen in some mobile browsers. A localStorage change in the foreground window\n      // will not be detected in the background window via the storage event.\n      // This was detected in iOS 7.x mobile browsers\n      if (this.fallbackToPolling) {\n        this.startPolling();\n      } else {\n        this.attachListener();\n      }\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = new Set();\n      // Populate the cache to avoid spuriously triggering on first poll.\n      this.localCache[key] = this.storage.getItem(key);\n    }\n    this.listeners[key].add(listener);\n  }\n\n  _removeListener(key: string, listener: StorageEventListener): void {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n\n    if (Object.keys(this.listeners).length === 0) {\n      this.detachListener();\n      this.stopPolling();\n    }\n  }\n\n  // Update local cache on base operations:\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    await super._set(key, value);\n    this.localCache[key] = JSON.stringify(value);\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const value = await super._get<T>(key);\n    this.localCache[key] = JSON.stringify(value);\n    return value;\n  }\n\n  async _remove(key: string): Promise<void> {\n    await super._remove(key);\n    delete this.localCache[key];\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\n * for the underlying storage.\n *\n * @public\n */\nexport const browserLocalPersistence: Persistence = BrowserLocalPersistence;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport {\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  StorageEventListener\n} from '../../core/persistence';\nimport { BrowserPersistenceClass } from './browser';\n\nclass BrowserSessionPersistence\n  extends BrowserPersistenceClass\n  implements InternalPersistence\n{\n  static type: 'SESSION' = 'SESSION';\n\n  constructor() {\n    super(() => window.sessionStorage, PersistenceType.SESSION);\n  }\n\n  _addListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for session storage since it cannot be shared across windows\n    return;\n  }\n\n  _removeListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for session storage since it cannot be shared across windows\n    return;\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\n * for the underlying storage.\n *\n * @public\n */\nexport const browserSessionPersistence: Persistence = BrowserSessionPersistence;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** TODO: remove this once tslib has a polyfill for Promise.allSettled */\ninterface PromiseFulfilledResult<T> {\n  fulfilled: true;\n  value: T;\n}\n\ninterface PromiseRejectedResult {\n  fulfilled: false;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason: any;\n}\n\nexport type PromiseSettledResult<T> =\n  | PromiseFulfilledResult<T>\n  | PromiseRejectedResult;\n\n/**\n * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\n *\n * @param promises - Array of promises to wait on.\n */\nexport function _allSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<Array<PromiseSettledResult<T>>> {\n  return Promise.all(\n    promises.map(async promise => {\n      try {\n        const value = await promise;\n        return {\n          fulfilled: true,\n          value\n        } as PromiseFulfilledResult<T>;\n      } catch (reason) {\n        return {\n          fulfilled: false,\n          reason\n        } as PromiseRejectedResult;\n      }\n    })\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ReceiverHandler,\n  _EventType,\n  _ReceiverResponse,\n  SenderMessageEvent,\n  _Status,\n  _SenderRequest\n} from './index';\nimport { _allSettled } from './promise';\n\n/**\n * Interface class for receiving messages.\n *\n */\nexport class Receiver {\n  private static readonly receivers: Receiver[] = [];\n  private readonly boundEventHandler: EventListener;\n\n  private readonly handlersMap: {\n    // TypeScript doesn't have existential types :(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [eventType: string]: Set<ReceiverHandler<any, any>>;\n  } = {};\n\n  constructor(private readonly eventTarget: EventTarget) {\n    this.boundEventHandler = this.handleEvent.bind(this);\n  }\n\n  /**\n   * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\n   *\n   * @param eventTarget - An event target (such as window or self) through which the underlying\n   * messages will be received.\n   */\n  static _getInstance(eventTarget: EventTarget): Receiver {\n    // The results are stored in an array since objects can't be keys for other\n    // objects. In addition, setting a unique property on an event target as a\n    // hash map key may not be allowed due to CORS restrictions.\n    const existingInstance = this.receivers.find(receiver =>\n      receiver.isListeningto(eventTarget)\n    );\n    if (existingInstance) {\n      return existingInstance;\n    }\n    const newInstance = new Receiver(eventTarget);\n    this.receivers.push(newInstance);\n    return newInstance;\n  }\n\n  private isListeningto(eventTarget: EventTarget): boolean {\n    return this.eventTarget === eventTarget;\n  }\n\n  /**\n   * Fans out a MessageEvent to the appropriate listeners.\n   *\n   * @remarks\n   * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\n   * finished processing.\n   *\n   * @param event - The MessageEvent.\n   *\n   */\n  private async handleEvent<\n    T extends _ReceiverResponse,\n    S extends _SenderRequest\n  >(event: Event): Promise<void> {\n    const messageEvent = event as MessageEvent<SenderMessageEvent<S>>;\n    const { eventId, eventType, data } = messageEvent.data;\n\n    const handlers: Set<ReceiverHandler<T, S>> | undefined =\n      this.handlersMap[eventType];\n    if (!handlers?.size) {\n      return;\n    }\n\n    messageEvent.ports[0].postMessage({\n      status: _Status.ACK,\n      eventId,\n      eventType\n    });\n\n    const promises = Array.from(handlers).map(async handler =>\n      handler(messageEvent.origin, data)\n    );\n    const response = await _allSettled(promises);\n    messageEvent.ports[0].postMessage({\n      status: _Status.DONE,\n      eventId,\n      eventType,\n      response\n    });\n  }\n\n  /**\n   * Subscribe an event handler for a particular event.\n   *\n   * @param eventType - Event name to subscribe to.\n   * @param eventHandler - The event handler which should receive the events.\n   *\n   */\n  _subscribe<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    eventHandler: ReceiverHandler<T, S>\n  ): void {\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.addEventListener('message', this.boundEventHandler);\n    }\n\n    if (!this.handlersMap[eventType]) {\n      this.handlersMap[eventType] = new Set();\n    }\n\n    this.handlersMap[eventType].add(eventHandler);\n  }\n\n  /**\n   * Unsubscribe an event handler from a particular event.\n   *\n   * @param eventType - Event name to unsubscribe from.\n   * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.\n   *\n   */\n  _unsubscribe<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    eventHandler?: ReceiverHandler<T, S>\n  ): void {\n    if (this.handlersMap[eventType] && eventHandler) {\n      this.handlersMap[eventType].delete(eventHandler);\n    }\n    if (!eventHandler || this.handlersMap[eventType].size === 0) {\n      delete this.handlersMap[eventType];\n    }\n\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.removeEventListener('message', this.boundEventHandler);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function _generateEventId(prefix = '', digits = 10): string {\n  let random = '';\n  for (let i = 0; i < digits; i++) {\n    random += Math.floor(Math.random() * 10);\n  }\n  return prefix + random;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _generateEventId } from '../../core/util/event_id';\nimport {\n  _SenderRequest,\n  _EventType,\n  ReceiverMessageEvent,\n  _MessageError,\n  SenderMessageEvent,\n  _Status,\n  _ReceiverMessageResponse,\n  _ReceiverResponse,\n  _TimeoutDuration\n} from './index';\n\ninterface MessageHandler {\n  messageChannel: MessageChannel;\n  onMessage: EventListenerOrEventListenerObject;\n}\n\n/**\n * Interface for sending messages and waiting for a completion response.\n *\n */\nexport class Sender {\n  private readonly handlers = new Set<MessageHandler>();\n\n  constructor(private readonly target: ServiceWorker) {}\n\n  /**\n   * Unsubscribe the handler and remove it from our tracking Set.\n   *\n   * @param handler - The handler to unsubscribe.\n   */\n  private removeMessageHandler(handler: MessageHandler): void {\n    if (handler.messageChannel) {\n      handler.messageChannel.port1.removeEventListener(\n        'message',\n        handler.onMessage\n      );\n      handler.messageChannel.port1.close();\n    }\n    this.handlers.delete(handler);\n  }\n\n  /**\n   * Send a message to the Receiver located at {@link target}.\n   *\n   * @remarks\n   * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\n   * receiver has had a chance to fully process the event.\n   *\n   * @param eventType - Type of event to send.\n   * @param data - The payload of the event.\n   * @param timeout - Timeout for waiting on an ACK from the receiver.\n   *\n   * @returns An array of settled promises from all the handlers that were listening on the receiver.\n   */\n  async _send<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    data: S,\n    timeout = _TimeoutDuration.ACK\n  ): Promise<_ReceiverMessageResponse<T>> {\n    const messageChannel =\n      typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\n    if (!messageChannel) {\n      throw new Error(_MessageError.CONNECTION_UNAVAILABLE);\n    }\n    // Node timers and browser timers return fundamentally different types.\n    // We don't actually care what the value is but TS won't accept unknown and\n    // we can't cast properly in both environments.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let completionTimer: any;\n    let handler: MessageHandler;\n    return new Promise<_ReceiverMessageResponse<T>>((resolve, reject) => {\n      const eventId = _generateEventId('', 20);\n      messageChannel.port1.start();\n      const ackTimer = setTimeout(() => {\n        reject(new Error(_MessageError.UNSUPPORTED_EVENT));\n      }, timeout);\n      handler = {\n        messageChannel,\n        onMessage(event: Event): void {\n          const messageEvent = event as MessageEvent<ReceiverMessageEvent<T>>;\n          if (messageEvent.data.eventId !== eventId) {\n            return;\n          }\n          switch (messageEvent.data.status) {\n            case _Status.ACK:\n              // The receiver should ACK first.\n              clearTimeout(ackTimer);\n              completionTimer = setTimeout(() => {\n                reject(new Error(_MessageError.TIMEOUT));\n              }, _TimeoutDuration.COMPLETION);\n              break;\n            case _Status.DONE:\n              // Once the receiver's handlers are finished we will get the results.\n              clearTimeout(completionTimer);\n              resolve(messageEvent.data.response);\n              break;\n            default:\n              clearTimeout(ackTimer);\n              clearTimeout(completionTimer);\n              reject(new Error(_MessageError.INVALID_RESPONSE));\n              break;\n          }\n        }\n      };\n      this.handlers.add(handler);\n      messageChannel.port1.addEventListener('message', handler.onMessage);\n      this.target.postMessage(\n        {\n          eventType,\n          eventId,\n          data\n        } as SenderMessageEvent<S>,\n        [messageChannel.port2]\n      );\n    }).finally(() => {\n      if (handler) {\n        this.removeMessageHandler(handler);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Recaptcha, GreCAPTCHATopLevel } from './recaptcha/recaptcha';\n\n/**\n * A specialized window type that melds the normal window type plus the\n * various bits we need. The three different blocks that are &'d together\n * cant be defined in the same block together.\n */\nexport type AuthWindow = {\n  // Standard window types\n  [T in keyof Window]: Window[T];\n} & {\n  // Any known / named properties we want to add\n  grecaptcha?: Recaptcha | GreCAPTCHATopLevel;\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  ___jsl?: Record<string, any>;\n  gapi?: typeof gapi;\n} & {\n  // A final catch-all for callbacks (which will have random names) that\n  // we will stick on the window.\n  [callback: string]: (...args: unknown[]) => void;\n};\n\n/**\n * Lazy accessor for window, since the compat layer won't tree shake this out,\n * we need to make sure not to mess with window unless we have to\n */\nexport function _window(): AuthWindow {\n  return window as unknown as AuthWindow;\n}\n\nexport function _setWindowLocation(url: string): void {\n  _window().location.href = url;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _window } from '../auth_window';\n\nexport function _isWorker(): boolean {\n  return (\n    typeof _window()['WorkerGlobalScope'] !== 'undefined' &&\n    typeof _window()['importScripts'] === 'function'\n  );\n}\n\nexport async function _getActiveServiceWorker(): Promise<ServiceWorker | null> {\n  if (!navigator?.serviceWorker) {\n    return null;\n  }\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    return registration.active;\n  } catch {\n    return null;\n  }\n}\n\nexport function _getServiceWorkerController(): ServiceWorker | null {\n  return navigator?.serviceWorker?.controller || null;\n}\n\nexport function _getWorkerGlobalScope(): ServiceWorker | null {\n  return _isWorker() ? (self as unknown as ServiceWorker) : null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\nimport {\n  PersistedBlob,\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener,\n  STORAGE_AVAILABLE_KEY\n} from '../../core/persistence/';\nimport {\n  _EventType,\n  _PingResponse,\n  KeyChangedResponse,\n  KeyChangedRequest,\n  PingRequest,\n  _TimeoutDuration\n} from '../messagechannel/index';\nimport { Receiver } from '../messagechannel/receiver';\nimport { Sender } from '../messagechannel/sender';\nimport {\n  _isWorker,\n  _getActiveServiceWorker,\n  _getServiceWorkerController,\n  _getWorkerGlobalScope\n} from '../util/worker';\n\nexport const DB_NAME = 'firebaseLocalStorageDb';\nconst DB_VERSION = 1;\nconst DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\nconst DB_DATA_KEYPATH = 'fbase_key';\n\ninterface DBObject {\n  [DB_DATA_KEYPATH]: string;\n  value: PersistedBlob;\n}\n\n/**\n * Promise wrapper for IDBRequest\n *\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\n *\n */\nclass DBPromise<T> {\n  constructor(private readonly request: IDBRequest) {}\n\n  toPromise(): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      this.request.addEventListener('success', () => {\n        resolve(this.request.result);\n      });\n      this.request.addEventListener('error', () => {\n        reject(this.request.error);\n      });\n    });\n  }\n}\n\nfunction getObjectStore(db: IDBDatabase, isReadWrite: boolean): IDBObjectStore {\n  return db\n    .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')\n    .objectStore(DB_OBJECTSTORE_NAME);\n}\n\nexport async function _clearDatabase(db: IDBDatabase): Promise<void> {\n  const objectStore = getObjectStore(db, true);\n  return new DBPromise<void>(objectStore.clear()).toPromise();\n}\n\nexport function _deleteDatabase(): Promise<void> {\n  const request = indexedDB.deleteDatabase(DB_NAME);\n  return new DBPromise<void>(request).toPromise();\n}\n\nexport function _openDatabase(): Promise<IDBDatabase> {\n  const request = indexedDB.open(DB_NAME, DB_VERSION);\n  return new Promise((resolve, reject) => {\n    request.addEventListener('error', () => {\n      reject(request.error);\n    });\n\n    request.addEventListener('upgradeneeded', () => {\n      const db = request.result;\n\n      try {\n        db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\n      } catch (e) {\n        reject(e);\n      }\n    });\n\n    request.addEventListener('success', async () => {\n      const db: IDBDatabase = request.result;\n      // Strange bug that occurs in Firefox when multiple tabs are opened at the\n      // same time. The only way to recover seems to be deleting the database\n      // and re-initializing it.\n      // https://github.com/firebase/firebase-js-sdk/issues/634\n\n      if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\n        // Need to close the database or else you get a `blocked` event\n        db.close();\n        await _deleteDatabase();\n        resolve(await _openDatabase());\n      } else {\n        resolve(db);\n      }\n    });\n  });\n}\n\nexport async function _putObject(\n  db: IDBDatabase,\n  key: string,\n  value: PersistenceValue | string\n): Promise<void> {\n  const request = getObjectStore(db, true).put({\n    [DB_DATA_KEYPATH]: key,\n    value\n  });\n  return new DBPromise<void>(request).toPromise();\n}\n\nasync function getObject(\n  db: IDBDatabase,\n  key: string\n): Promise<PersistedBlob | null> {\n  const request = getObjectStore(db, false).get(key);\n  const data = await new DBPromise<DBObject | undefined>(request).toPromise();\n  return data === undefined ? null : data.value;\n}\n\nexport function _deleteObject(db: IDBDatabase, key: string): Promise<void> {\n  const request = getObjectStore(db, true).delete(key);\n  return new DBPromise<void>(request).toPromise();\n}\n\nexport const _POLLING_INTERVAL_MS = 800;\nexport const _TRANSACTION_RETRY_COUNT = 3;\n\nclass IndexedDBLocalPersistence implements InternalPersistence {\n  static type: 'LOCAL' = 'LOCAL';\n\n  type = PersistenceType.LOCAL;\n  db?: IDBDatabase;\n  readonly _shouldAllowMigration = true;\n\n  private readonly listeners: Record<string, Set<StorageEventListener>> = {};\n  private readonly localCache: Record<string, PersistenceValue | null> = {};\n  // setTimeout return value is platform specific\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private pollTimer: any | null = null;\n  private pendingWrites = 0;\n\n  private receiver: Receiver | null = null;\n  private sender: Sender | null = null;\n  private serviceWorkerReceiverAvailable = false;\n  private activeServiceWorker: ServiceWorker | null = null;\n  // Visible for testing only\n  readonly _workerInitializationPromise: Promise<void>;\n\n  constructor() {\n    // Fire & forget the service worker registration as it may never resolve\n    this._workerInitializationPromise =\n      this.initializeServiceWorkerMessaging().then(\n        () => {},\n        () => {}\n      );\n  }\n\n  async _openDb(): Promise<IDBDatabase> {\n    if (this.db) {\n      return this.db;\n    }\n    this.db = await _openDatabase();\n    return this.db;\n  }\n\n  async _withRetries<T>(op: (db: IDBDatabase) => Promise<T>): Promise<T> {\n    let numAttempts = 0;\n\n    while (true) {\n      try {\n        const db = await this._openDb();\n        return await op(db);\n      } catch (e) {\n        if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\n          throw e;\n        }\n        if (this.db) {\n          this.db.close();\n          this.db = undefined;\n        }\n        // TODO: consider adding exponential backoff\n      }\n    }\n  }\n\n  /**\n   * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\n   * postMessage interface to send these events to the worker ourselves.\n   */\n  private async initializeServiceWorkerMessaging(): Promise<void> {\n    return _isWorker() ? this.initializeReceiver() : this.initializeSender();\n  }\n\n  /**\n   * As the worker we should listen to events from the main window.\n   */\n  private async initializeReceiver(): Promise<void> {\n    this.receiver = Receiver._getInstance(_getWorkerGlobalScope()!);\n    // Refresh from persistence if we receive a KeyChanged message.\n    this.receiver._subscribe(\n      _EventType.KEY_CHANGED,\n      async (_origin: string, data: KeyChangedRequest) => {\n        const keys = await this._poll();\n        return {\n          keyProcessed: keys.includes(data.key)\n        };\n      }\n    );\n    // Let the sender know that we are listening so they give us more timeout.\n    this.receiver._subscribe(\n      _EventType.PING,\n      async (_origin: string, _data: PingRequest) => {\n        return [_EventType.KEY_CHANGED];\n      }\n    );\n  }\n\n  /**\n   * As the main window, we should let the worker know when keys change (set and remove).\n   *\n   * @remarks\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\n   * may not resolve.\n   */\n  private async initializeSender(): Promise<void> {\n    // Check to see if there's an active service worker.\n    this.activeServiceWorker = await _getActiveServiceWorker();\n    if (!this.activeServiceWorker) {\n      return;\n    }\n    this.sender = new Sender(this.activeServiceWorker);\n    // Ping the service worker to check what events they can handle.\n    const results = await this.sender._send<_PingResponse, PingRequest>(\n      _EventType.PING,\n      {},\n      _TimeoutDuration.LONG_ACK\n    );\n    if (!results) {\n      return;\n    }\n    if (\n      results[0]?.fulfilled &&\n      results[0]?.value.includes(_EventType.KEY_CHANGED)\n    ) {\n      this.serviceWorkerReceiverAvailable = true;\n    }\n  }\n\n  /**\n   * Let the worker know about a changed key, the exact key doesn't technically matter since the\n   * worker will just trigger a full sync anyway.\n   *\n   * @remarks\n   * For now, we only support one service worker per page.\n   *\n   * @param key - Storage key which changed.\n   */\n  private async notifyServiceWorker(key: string): Promise<void> {\n    if (\n      !this.sender ||\n      !this.activeServiceWorker ||\n      _getServiceWorkerController() !== this.activeServiceWorker\n    ) {\n      return;\n    }\n    try {\n      await this.sender._send<KeyChangedResponse, KeyChangedRequest>(\n        _EventType.KEY_CHANGED,\n        { key },\n        // Use long timeout if receiver has previously responded to a ping from us.\n        this.serviceWorkerReceiverAvailable\n          ? _TimeoutDuration.LONG_ACK\n          : _TimeoutDuration.ACK\n      );\n    } catch {\n      // This is a best effort approach. Ignore errors.\n    }\n  }\n\n  async _isAvailable(): Promise<boolean> {\n    try {\n      if (!indexedDB) {\n        return false;\n      }\n      const db = await _openDatabase();\n      await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\n      await _deleteObject(db, STORAGE_AVAILABLE_KEY);\n      return true;\n    } catch {}\n    return false;\n  }\n\n  private async _withPendingWrite(write: () => Promise<void>): Promise<void> {\n    this.pendingWrites++;\n    try {\n      await write();\n    } finally {\n      this.pendingWrites--;\n    }\n  }\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db: IDBDatabase) => _putObject(db, key, value));\n      this.localCache[key] = value;\n      return this.notifyServiceWorker(key);\n    });\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const obj = (await this._withRetries((db: IDBDatabase) =>\n      getObject(db, key)\n    )) as T;\n    this.localCache[key] = obj;\n    return obj;\n  }\n\n  async _remove(key: string): Promise<void> {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db: IDBDatabase) => _deleteObject(db, key));\n      delete this.localCache[key];\n      return this.notifyServiceWorker(key);\n    });\n  }\n\n  private async _poll(): Promise<string[]> {\n    // TODO: check if we need to fallback if getAll is not supported\n    const result = await this._withRetries((db: IDBDatabase) => {\n      const getAllRequest = getObjectStore(db, false).getAll();\n      return new DBPromise<DBObject[] | null>(getAllRequest).toPromise();\n    });\n\n    if (!result) {\n      return [];\n    }\n\n    // If we have pending writes in progress abort, we'll get picked up on the next poll\n    if (this.pendingWrites !== 0) {\n      return [];\n    }\n\n    const keys = [];\n    const keysInResult = new Set();\n    if (result.length !== 0) {\n      for (const { fbase_key: key, value } of result) {\n        keysInResult.add(key);\n        if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\n          this.notifyListeners(key, value as PersistenceValue);\n          keys.push(key);\n        }\n      }\n    }\n\n    for (const localKey of Object.keys(this.localCache)) {\n      if (this.localCache[localKey] && !keysInResult.has(localKey)) {\n        // Deleted\n        this.notifyListeners(localKey, null);\n        keys.push(localKey);\n      }\n    }\n    return keys;\n  }\n\n  private notifyListeners(\n    key: string,\n    newValue: PersistenceValue | null\n  ): void {\n    this.localCache[key] = newValue;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(newValue);\n      }\n    }\n  }\n\n  private startPolling(): void {\n    this.stopPolling();\n\n    this.pollTimer = setInterval(\n      async () => this._poll(),\n      _POLLING_INTERVAL_MS\n    );\n  }\n\n  private stopPolling(): void {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n\n  _addListener(key: string, listener: StorageEventListener): void {\n    if (Object.keys(this.listeners).length === 0) {\n      this.startPolling();\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = new Set();\n      // Populate the cache to avoid spuriously triggering on first poll.\n      void this._get(key); // This can happen in the background async and we can return immediately.\n    }\n    this.listeners[key].add(listener);\n  }\n\n  _removeListener(key: string, listener: StorageEventListener): void {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n\n    if (Object.keys(this.listeners).length === 0) {\n      this.stopPolling();\n    }\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\n * for the underlying storage.\n *\n * @public\n */\nexport const indexedDBLocalPersistence: Persistence = IndexedDBLocalPersistence;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performApiRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { MfaEnrollment } from '../account_management/mfa';\nimport { SignInWithIdpResponse } from './idp';\nimport {\n  SignInWithPhoneNumberRequest,\n  SignInWithPhoneNumberResponse\n} from './sms';\n\nexport interface FinalizeMfaResponse {\n  idToken: string;\n  refreshToken: string;\n}\n\n/**\n * @internal\n */\nexport interface IdTokenMfaResponse extends IdTokenResponse {\n  mfaPendingCredential?: string;\n  mfaInfo?: MfaEnrollment[];\n}\n\nexport interface StartPhoneMfaSignInRequest {\n  mfaPendingCredential: string;\n  mfaEnrollmentId: string;\n  phoneSignInInfo: {\n    recaptchaToken: string;\n  };\n  tenantId?: string;\n}\n\nexport interface StartPhoneMfaSignInResponse {\n  phoneResponseInfo: {\n    sessionInfo: string;\n  };\n}\n\nexport function startSignInPhoneMfa(\n  auth: Auth,\n  request: StartPhoneMfaSignInRequest\n): Promise<StartPhoneMfaSignInResponse> {\n  return _performApiRequest<\n    StartPhoneMfaSignInRequest,\n    StartPhoneMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface FinalizePhoneMfaSignInRequest {\n  mfaPendingCredential: string;\n  phoneVerificationInfo: SignInWithPhoneNumberRequest;\n  tenantId?: string;\n}\n\n// TOTP MFA Sign in only has a finalize phase. Phone MFA has a start phase to initiate sending an\n// SMS and a finalize phase to complete sign in. With TOTP, the user already has the OTP in the\n// TOTP/Authenticator app.\nexport interface FinalizeTotpMfaSignInRequest {\n  mfaPendingCredential: string;\n  totpVerificationInfo: { verificationCode: string };\n  tenantId?: string;\n  mfaEnrollmentId: string;\n}\n\nexport interface FinalizePhoneMfaSignInResponse extends FinalizeMfaResponse {}\n\nexport interface FinalizeTotpMfaSignInResponse extends FinalizeMfaResponse {}\n\nexport function finalizeSignInPhoneMfa(\n  auth: Auth,\n  request: FinalizePhoneMfaSignInRequest\n): Promise<FinalizePhoneMfaSignInResponse> {\n  return _performApiRequest<\n    FinalizePhoneMfaSignInRequest,\n    FinalizePhoneMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport function finalizeSignInTotpMfa(\n  auth: Auth,\n  request: FinalizeTotpMfaSignInRequest\n): Promise<FinalizeTotpMfaSignInResponse> {\n  return _performApiRequest<\n    FinalizeTotpMfaSignInRequest,\n    FinalizeTotpMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\n/**\n * @internal\n */\nexport type PhoneOrOauthTokenResponse =\n  | SignInWithPhoneNumberResponse\n  | SignInWithIdpResponse\n  | IdTokenResponse;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystring } from '@firebase/util';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert, _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as jsHelpers from '../load_js';\nimport { Recaptcha, isV2 } from './recaptcha';\nimport { MockReCaptcha } from './recaptcha_mock';\n\n// ReCaptcha will load using the same callback, so the callback function needs\n// to be kept around\nexport const _JSLOAD_CALLBACK = jsHelpers._generateCallbackName('rcb');\nconst NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\n\n/**\n * We need to mark this interface as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nexport interface ReCaptchaLoader {\n  load(auth: AuthInternal, hl?: string): Promise<Recaptcha>;\n  clearedOneInstance(): void;\n}\n\n/**\n * Loader for the GReCaptcha library. There should only ever be one of this.\n */\nexport class ReCaptchaLoaderImpl implements ReCaptchaLoader {\n  private hostLanguage = '';\n  private counter = 0;\n  /**\n   * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\n   * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\n   * `window.grecaptcha.render()` will not. Another load will add it.\n   */\n  private readonly librarySeparatelyLoaded = !!_window().grecaptcha?.render;\n\n  load(auth: AuthInternal, hl = ''): Promise<Recaptcha> {\n    _assert(isHostLanguageValid(hl), auth, AuthErrorCode.ARGUMENT_ERROR);\n\n    if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n      return Promise.resolve(_window().grecaptcha! as Recaptcha);\n    }\n    return new Promise<Recaptcha>((resolve, reject) => {\n      const networkTimeout = _window().setTimeout(() => {\n        reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n      }, NETWORK_TIMEOUT_DELAY.get());\n\n      _window()[_JSLOAD_CALLBACK] = () => {\n        _window().clearTimeout(networkTimeout);\n        delete _window()[_JSLOAD_CALLBACK];\n\n        const recaptcha = _window().grecaptcha as Recaptcha;\n\n        if (!recaptcha || !isV2(recaptcha)) {\n          reject(_createError(auth, AuthErrorCode.INTERNAL_ERROR));\n          return;\n        }\n\n        // Wrap the recaptcha render function so that we know if the developer has\n        // called it separately\n        const render = recaptcha.render;\n        recaptcha.render = (container, params) => {\n          const widgetId = render(container, params);\n          this.counter++;\n          return widgetId;\n        };\n\n        this.hostLanguage = hl;\n        resolve(recaptcha);\n      };\n\n      const url = `${jsHelpers._recaptchaV2ScriptUrl()}?${querystring({\n        onload: _JSLOAD_CALLBACK,\n        render: 'explicit',\n        hl\n      })}`;\n\n      jsHelpers._loadJS(url).catch(() => {\n        clearTimeout(networkTimeout);\n        reject(_createError(auth, AuthErrorCode.INTERNAL_ERROR));\n      });\n    });\n  }\n\n  clearedOneInstance(): void {\n    this.counter--;\n  }\n\n  private shouldResolveImmediately(hl: string): boolean {\n    // We can resolve immediately if:\n    //   • grecaptcha is already defined AND (\n    //     1. the requested language codes are the same OR\n    //     2. there exists already a ReCaptcha on the page\n    //     3. the library was already loaded by the app\n    // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n    // that are already in the page\n    return (\n      !!_window().grecaptcha?.render &&\n      (hl === this.hostLanguage ||\n        this.counter > 0 ||\n        this.librarySeparatelyLoaded)\n    );\n  }\n}\n\nfunction isHostLanguageValid(hl: string): boolean {\n  return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n}\n\nexport class MockReCaptchaLoaderImpl implements ReCaptchaLoader {\n  async load(auth: AuthInternal): Promise<Recaptcha> {\n    return new MockReCaptcha(auth);\n  }\n\n  clearedOneInstance(): void {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, RecaptchaParameters } from '../../model/public_types';\nimport { getRecaptchaParams } from '../../api/authentication/recaptcha';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\nimport { _isHttpOrHttps } from '../../core/util/location';\nimport { ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport { _isWorker } from '../util/worker';\nimport { Recaptcha } from './recaptcha';\nimport {\n  MockReCaptchaLoaderImpl,\n  ReCaptchaLoader,\n  ReCaptchaLoaderImpl\n} from './recaptcha_loader';\n\nexport const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\n\nconst DEFAULT_PARAMS: RecaptchaParameters = {\n  theme: 'light',\n  type: 'image'\n};\n\ntype TokenCallback = (token: string) => void;\n\n/**\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n *\n * @remarks\n * `RecaptchaVerifier` does not work in a Node.js environment.\n *\n * @public\n */\nexport class RecaptchaVerifier implements ApplicationVerifierInternal {\n  /**\n   * The application verifier type.\n   *\n   * @remarks\n   * For a reCAPTCHA verifier, this is 'recaptcha'.\n   */\n  readonly type = RECAPTCHA_VERIFIER_TYPE;\n  private destroyed = false;\n  private widgetId: number | null = null;\n  private readonly container: HTMLElement;\n  private readonly isInvisible: boolean;\n  private readonly tokenChangeListeners = new Set<TokenCallback>();\n  private renderPromise: Promise<number> | null = null;\n  private readonly auth: AuthInternal;\n\n  /** @internal */\n  readonly _recaptchaLoader: ReCaptchaLoader;\n  private recaptcha: Recaptcha | null = null;\n\n  /**\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   * @param containerOrId - The reCAPTCHA container parameter.\n   *\n   * @remarks\n   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n   * an element ID. The corresponding element must also must be in the DOM at the time of\n   * initialization.\n   *\n   * @param parameters - The optional reCAPTCHA parameters.\n   *\n   * @remarks\n   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n   * 'invisible'.\n   */\n  constructor(\n    authExtern: Auth,\n    containerOrId: HTMLElement | string,\n    private readonly parameters: RecaptchaParameters = {\n      ...DEFAULT_PARAMS\n    }\n  ) {\n    this.auth = _castAuth(authExtern);\n    this.isInvisible = this.parameters.size === 'invisible';\n    _assert(\n      typeof document !== 'undefined',\n      this.auth,\n      AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    const container =\n      typeof containerOrId === 'string'\n        ? document.getElementById(containerOrId)\n        : containerOrId;\n    _assert(container, this.auth, AuthErrorCode.ARGUMENT_ERROR);\n\n    this.container = container;\n    this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n\n    this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting\n      ? new MockReCaptchaLoaderImpl()\n      : new ReCaptchaLoaderImpl();\n\n    this.validateStartingState();\n    // TODO: Figure out if sdk version is needed\n  }\n\n  /**\n   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n   *\n   * @returns A Promise for the reCAPTCHA token.\n   */\n  async verify(): Promise<string> {\n    this.assertNotDestroyed();\n    const id = await this.render();\n    const recaptcha = this.getAssertedRecaptcha();\n\n    const response = recaptcha.getResponse(id);\n    if (response) {\n      return response;\n    }\n\n    return new Promise<string>(resolve => {\n      const tokenChange = (token: string): void => {\n        if (!token) {\n          return; // Ignore token expirations.\n        }\n        this.tokenChangeListeners.delete(tokenChange);\n        resolve(token);\n      };\n\n      this.tokenChangeListeners.add(tokenChange);\n      if (this.isInvisible) {\n        recaptcha.execute(id);\n      }\n    });\n  }\n\n  /**\n   * Renders the reCAPTCHA widget on the page.\n   *\n   * @returns A Promise that resolves with the reCAPTCHA widget ID.\n   */\n  render(): Promise<number> {\n    try {\n      this.assertNotDestroyed();\n    } catch (e) {\n      // This method returns a promise. Since it's not async (we want to return the\n      // _same_ promise if rendering is still occurring), the API surface should\n      // reject with the error rather than just throw\n      return Promise.reject(e);\n    }\n\n    if (this.renderPromise) {\n      return this.renderPromise;\n    }\n\n    this.renderPromise = this.makeRenderPromise().catch(e => {\n      this.renderPromise = null;\n      throw e;\n    });\n\n    return this.renderPromise;\n  }\n\n  /** @internal */\n  _reset(): void {\n    this.assertNotDestroyed();\n    if (this.widgetId !== null) {\n      this.getAssertedRecaptcha().reset(this.widgetId);\n    }\n  }\n\n  /**\n   * Clears the reCAPTCHA widget from the page and destroys the instance.\n   */\n  clear(): void {\n    this.assertNotDestroyed();\n    this.destroyed = true;\n    this._recaptchaLoader.clearedOneInstance();\n    if (!this.isInvisible) {\n      this.container.childNodes.forEach(node => {\n        this.container.removeChild(node);\n      });\n    }\n  }\n\n  private validateStartingState(): void {\n    _assert(!this.parameters.sitekey, this.auth, AuthErrorCode.ARGUMENT_ERROR);\n    _assert(\n      this.isInvisible || !this.container.hasChildNodes(),\n      this.auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    _assert(\n      typeof document !== 'undefined',\n      this.auth,\n      AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n  }\n\n  private makeTokenCallback(\n    existing: TokenCallback | string | undefined\n  ): TokenCallback {\n    return token => {\n      this.tokenChangeListeners.forEach(listener => listener(token));\n      if (typeof existing === 'function') {\n        existing(token);\n      } else if (typeof existing === 'string') {\n        const globalFunc = _window()[existing];\n        if (typeof globalFunc === 'function') {\n          globalFunc(token);\n        }\n      }\n    };\n  }\n\n  private assertNotDestroyed(): void {\n    _assert(!this.destroyed, this.auth, AuthErrorCode.INTERNAL_ERROR);\n  }\n\n  private async makeRenderPromise(): Promise<number> {\n    await this.init();\n    if (!this.widgetId) {\n      let container = this.container;\n      if (!this.isInvisible) {\n        const guaranteedEmpty = document.createElement('div');\n        container.appendChild(guaranteedEmpty);\n        container = guaranteedEmpty;\n      }\n\n      this.widgetId = this.getAssertedRecaptcha().render(\n        container,\n        this.parameters\n      );\n    }\n\n    return this.widgetId;\n  }\n\n  private async init(): Promise<void> {\n    _assert(\n      _isHttpOrHttps() && !_isWorker(),\n      this.auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n\n    await domReady();\n    this.recaptcha = await this._recaptchaLoader.load(\n      this.auth,\n      this.auth.languageCode || undefined\n    );\n\n    const siteKey = await getRecaptchaParams(this.auth);\n    _assert(siteKey, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.parameters.sitekey = siteKey;\n  }\n\n  private getAssertedRecaptcha(): Recaptcha {\n    _assert(this.recaptcha, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return this.recaptcha;\n  }\n}\n\nfunction domReady(): Promise<void> {\n  let resolver: (() => void) | null = null;\n  return new Promise<void>(resolve => {\n    if (document.readyState === 'complete') {\n      resolve();\n      return;\n    }\n\n    // Document not ready, wait for load before resolving.\n    // Save resolver, so we can remove listener in case it was externally\n    // cancelled.\n    resolver = () => resolve();\n    window.addEventListener('load', resolver);\n  }).catch(e => {\n    if (resolver) {\n      window.removeEventListener('load', resolver);\n    }\n\n    throw e;\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApplicationVerifier,\n  Auth,\n  ConfirmationResult,\n  PhoneInfoOptions,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { startEnrollPhoneMfa } from '../../api/account_management/mfa';\nimport { startSignInPhoneMfa } from '../../api/authentication/mfa';\nimport { sendPhoneVerificationCode } from '../../api/authentication/sms';\nimport { ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { PhoneAuthCredential } from '../../core/credentials/phone';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assertLinkedStatus, _link } from '../../core/user/link_unlink';\nimport {\n  _assert,\n  _serverAppCurrentUserOperationNotSupportedError\n} from '../../core/util/assert';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  linkWithCredential,\n  reauthenticateWithCredential,\n  signInWithCredential\n} from '../../core/strategies/credential';\nimport {\n  MultiFactorSessionImpl,\n  MultiFactorSessionType\n} from '../../mfa/mfa_session';\nimport { UserInternal } from '../../model/user';\nimport { RECAPTCHA_VERIFIER_TYPE } from '../recaptcha/recaptcha_verifier';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { ProviderId } from '../../model/enums';\nimport { _isFirebaseServerApp } from '@firebase/app';\n\ninterface OnConfirmationCallback {\n  (credential: PhoneAuthCredential): Promise<UserCredential>;\n}\n\nclass ConfirmationResultImpl implements ConfirmationResult {\n  constructor(\n    readonly verificationId: string,\n    private readonly onConfirmation: OnConfirmationCallback\n  ) {}\n\n  confirm(verificationCode: string): Promise<UserCredential> {\n    const authCredential = PhoneAuthCredential._fromVerification(\n      this.verificationId,\n      verificationCode\n    );\n    return this.onConfirmation(authCredential);\n  }\n}\n\n/**\n * Asynchronously signs in using a phone number.\n *\n * @remarks\n * This method sends a code via SMS to the given\n * phone number, and returns a {@link ConfirmationResult}. After the user\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\n * with the code to sign the user in.\n *\n * For abuse prevention, this method also requires a {@link ApplicationVerifier}.\n * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.\n * This function can work on other platforms that do not support the\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\n * third-party {@link ApplicationVerifier} implementation.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n * // Obtain a verificationCode from the user.\n * const credential = await confirmationResult.confirm(verificationCode);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function signInWithPhoneNumber(\n  auth: Auth,\n  phoneNumber: string,\n  appVerifier: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const authInternal = _castAuth(auth);\n  const verificationId = await _verifyPhoneNumber(\n    authInternal,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    signInWithCredential(authInternal, cred)\n  );\n}\n\n/**\n * Links the user account with the given phone number.\n *\n * @remarks\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function linkWithPhoneNumber(\n  user: User,\n  phoneNumber: string,\n  appVerifier: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  await _assertLinkedStatus(false, userInternal, ProviderId.PHONE);\n  const verificationId = await _verifyPhoneNumber(\n    userInternal.auth,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    linkWithCredential(userInternal, cred)\n  );\n}\n\n/**\n * Re-authenticates a user using a fresh phone credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n *\n * This method does not work in a Node.js environment or on any {@link User} signed in by\n * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function reauthenticateWithPhoneNumber(\n  user: User,\n  phoneNumber: string,\n  appVerifier: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(userInternal.auth)\n    );\n  }\n  const verificationId = await _verifyPhoneNumber(\n    userInternal.auth,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    reauthenticateWithCredential(userInternal, cred)\n  );\n}\n\n/**\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\n *\n */\nexport async function _verifyPhoneNumber(\n  auth: AuthInternal,\n  options: PhoneInfoOptions | string,\n  verifier: ApplicationVerifierInternal\n): Promise<string> {\n  const recaptchaToken = await verifier.verify();\n\n  try {\n    _assert(\n      typeof recaptchaToken === 'string',\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    _assert(\n      verifier.type === RECAPTCHA_VERIFIER_TYPE,\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n\n    let phoneInfoOptions: PhoneInfoOptions;\n\n    if (typeof options === 'string') {\n      phoneInfoOptions = {\n        phoneNumber: options\n      };\n    } else {\n      phoneInfoOptions = options;\n    }\n\n    if ('session' in phoneInfoOptions) {\n      const session = phoneInfoOptions.session as MultiFactorSessionImpl;\n\n      if ('phoneNumber' in phoneInfoOptions) {\n        _assert(\n          session.type === MultiFactorSessionType.ENROLL,\n          auth,\n          AuthErrorCode.INTERNAL_ERROR\n        );\n        const response = await startEnrollPhoneMfa(auth, {\n          idToken: session.credential,\n          phoneEnrollmentInfo: {\n            phoneNumber: phoneInfoOptions.phoneNumber,\n            recaptchaToken\n          }\n        });\n        return response.phoneSessionInfo.sessionInfo;\n      } else {\n        _assert(\n          session.type === MultiFactorSessionType.SIGN_IN,\n          auth,\n          AuthErrorCode.INTERNAL_ERROR\n        );\n        const mfaEnrollmentId =\n          phoneInfoOptions.multiFactorHint?.uid ||\n          phoneInfoOptions.multiFactorUid;\n        _assert(mfaEnrollmentId, auth, AuthErrorCode.MISSING_MFA_INFO);\n        const response = await startSignInPhoneMfa(auth, {\n          mfaPendingCredential: session.credential,\n          mfaEnrollmentId,\n          phoneSignInInfo: {\n            recaptchaToken\n          }\n        });\n        return response.phoneResponseInfo.sessionInfo;\n      }\n    } else {\n      const { sessionInfo } = await sendPhoneVerificationCode(auth, {\n        phoneNumber: phoneInfoOptions.phoneNumber,\n        recaptchaToken\n      });\n      return sessionInfo;\n    }\n  } finally {\n    verifier._reset();\n  }\n}\n\n/**\n * Updates the user's phone number.\n *\n * @remarks\n * This method does not work in a Node.js environment or on any {@link User} signed in by\n * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * await updatePhoneNumber(user, phoneCredential);\n * ```\n *\n * @param user - The user.\n * @param credential - A credential authenticating the new phone number.\n *\n * @public\n */\nexport async function updatePhoneNumber(\n  user: User,\n  credential: PhoneAuthCredential\n): Promise<void> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(userInternal.auth)\n    );\n  }\n  await _link(userInternal, credential);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  PhoneInfoOptions,\n  ApplicationVerifier,\n  UserCredential\n} from '../../model/public_types';\n\nimport { SignInWithPhoneNumberResponse } from '../../api/authentication/sms';\nimport { ApplicationVerifierInternal as ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { AuthInternal as AuthInternal } from '../../model/auth';\nimport { UserCredentialInternal as UserCredentialInternal } from '../../model/user';\nimport { PhoneAuthCredential } from '../../core/credentials/phone';\nimport { _verifyPhoneNumber } from '../strategies/phone';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthCredential } from '../../core';\nimport { FirebaseError, getModularInstance } from '@firebase/util';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link PhoneAuthCredential}.\n *\n * @remarks\n * `PhoneAuthProvider` does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const userCredential = await signInWithCredential(auth, phoneCredential);\n * ```\n *\n * @public\n */\nexport class PhoneAuthProvider {\n  /** Always set to {@link ProviderId}.PHONE. */\n  static readonly PROVIDER_ID: 'phone' = ProviderId.PHONE;\n  /** Always set to {@link SignInMethod}.PHONE. */\n  static readonly PHONE_SIGN_IN_METHOD: 'phone' = SignInMethod.PHONE;\n\n  /** Always set to {@link ProviderId}.PHONE. */\n  readonly providerId = PhoneAuthProvider.PROVIDER_ID;\n  private readonly auth: AuthInternal;\n\n  /**\n   * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n   *\n   */\n  constructor(auth: Auth) {\n    this.auth = _castAuth(auth);\n  }\n\n  /**\n   *\n   * Starts a phone number authentication flow by sending a verification code to the given phone\n   * number.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n   * E.164 format (e.g. +16505550101).\n   * @param applicationVerifier - For abuse prevention, this method also requires a\n   * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,\n   * {@link RecaptchaVerifier}.\n   *\n   * @returns A Promise for a verification ID that can be passed to\n   * {@link PhoneAuthProvider.credential} to identify this flow..\n   */\n  verifyPhoneNumber(\n    phoneOptions: PhoneInfoOptions | string,\n    applicationVerifier: ApplicationVerifier\n  ): Promise<string> {\n    return _verifyPhoneNumber(\n      this.auth,\n      phoneOptions,\n      getModularInstance(applicationVerifier as ApplicationVerifierInternal)\n    );\n  }\n\n  /**\n   * Creates a phone auth credential, given the verification ID from\n   * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n   * mobile device.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n   * @param verificationCode - The verification code sent to the user's mobile device.\n   *\n   * @returns The auth provider credential.\n   */\n  static credential(\n    verificationId: string,\n    verificationCode: string\n  ): PhoneAuthCredential {\n    return PhoneAuthCredential._fromVerification(\n      verificationId,\n      verificationCode\n    );\n  }\n\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential}.\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): AuthCredential | null {\n    const credential = userCredential as UserCredentialInternal;\n    return PhoneAuthProvider.credentialFromTaggedObject(credential);\n  }\n\n  /**\n   * Returns an {@link AuthCredential} when passed an error.\n   *\n   * @remarks\n   *\n   * This method works for errors like\n   * `auth/account-exists-with-different-credentials`. This is useful for\n   * recovering when attempting to set a user's phone number but the number\n   * in question is already tied to another account. For example, the following\n   * code tries to update the current user's phone number, and if that\n   * fails, links the user with the account associated with that number:\n   *\n   * ```js\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n   * try {\n   *   const code = ''; // Prompt the user for the verification code\n   *   await updatePhoneNumber(\n   *       auth.currentUser,\n   *       PhoneAuthProvider.credential(verificationId, code));\n   * } catch (e) {\n   *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n   *     const cred = PhoneAuthProvider.credentialFromError(e);\n   *     await linkWithCredential(auth.currentUser, cred);\n   *   }\n   * }\n   *\n   * // At this point, auth.currentUser.phoneNumber === number.\n   * ```\n   *\n   * @param error - The error to generate a credential from.\n   */\n  static credentialFromError(error: FirebaseError): AuthCredential | null {\n    return PhoneAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): AuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { phoneNumber, temporaryProof } =\n      tokenResponse as SignInWithPhoneNumberResponse;\n    if (phoneNumber && temporaryProof) {\n      return PhoneAuthCredential._fromTokenResponse(\n        phoneNumber,\n        temporaryProof\n      );\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PopupRedirectResolver } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport { PopupRedirectResolverInternal } from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from './assert';\nimport { _getInstance } from './instantiator';\n\n/**\n * Chooses a popup/redirect resolver to use. This prefers the override (which\n * is directly passed in), and falls back to the property set on the auth\n * object. If neither are available, this function errors w/ an argument error.\n */\nexport function _withDefaultResolver(\n  auth: AuthInternal,\n  resolverOverride: PopupRedirectResolver | undefined\n): PopupRedirectResolverInternal {\n  if (resolverOverride) {\n    return _getInstance(resolverOverride);\n  }\n\n  _assert(auth._popupRedirectResolver, auth, AuthErrorCode.ARGUMENT_ERROR);\n\n  return auth._popupRedirectResolver;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { _link as _linkUser } from '../user/link_unlink';\nimport { _reauthenticate } from '../user/reauthenticate';\nimport { _assert } from '../util/assert';\nimport { _signInWithCredential } from './credential';\nimport { AuthErrorCode } from '../errors';\nimport { ProviderId } from '../../model/enums';\n\nexport interface IdpTaskParams {\n  auth: AuthInternal;\n  requestUri: string;\n  sessionId?: string;\n  tenantId?: string;\n  postBody?: string;\n  pendingToken?: string;\n  user?: UserInternal;\n  bypassAuthState?: boolean;\n}\n\nexport type IdpTask = (\n  params: IdpTaskParams\n) => Promise<UserCredentialInternal>;\n\nclass IdpCredential extends AuthCredential {\n  constructor(readonly params: IdpTaskParams) {\n    super(ProviderId.CUSTOM, ProviderId.CUSTOM);\n  }\n\n  _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest(idToken));\n  }\n\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n\n  private _buildIdpRequest(idToken?: string): SignInWithIdpRequest {\n    const request: SignInWithIdpRequest = {\n      requestUri: this.params.requestUri,\n      sessionId: this.params.sessionId,\n      postBody: this.params.postBody,\n      tenantId: this.params.tenantId,\n      pendingToken: this.params.pendingToken,\n      returnSecureToken: true,\n      returnIdpCredential: true\n    };\n\n    if (idToken) {\n      request.idToken = idToken;\n    }\n\n    return request;\n  }\n}\n\nexport function _signIn(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  return _signInWithCredential(\n    params.auth,\n    new IdpCredential(params),\n    params.bypassAuthState\n  ) as Promise<UserCredentialInternal>;\n}\n\nexport function _reauth(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  const { auth, user } = params;\n  _assert(user, auth, AuthErrorCode.INTERNAL_ERROR);\n  return _reauthenticate(\n    user,\n    new IdpCredential(params),\n    params.bypassAuthState\n  );\n}\n\nexport async function _link(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  const { auth, user } = params;\n  _assert(user, auth, AuthErrorCode.INTERNAL_ERROR);\n  return _linkUser(user, new IdpCredential(params), params.bypassAuthState);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport {\n  AuthEvent,\n  AuthEventConsumer,\n  AuthEventType,\n  EventManager,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { debugAssert, _fail } from '../util/assert';\nimport {\n  _link,\n  _reauth,\n  _signIn,\n  IdpTask,\n  IdpTaskParams\n} from '../strategies/idp';\nimport { AuthInternal } from '../../model/auth';\n\ninterface PendingPromise {\n  resolve: (cred: UserCredentialInternal | null) => void;\n  reject: (error: Error) => void;\n}\n\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n */\nexport abstract class AbstractPopupRedirectOperation\n  implements AuthEventConsumer\n{\n  private pendingPromise: PendingPromise | null = null;\n  private eventManager: EventManager | null = null;\n  readonly filter: AuthEventType[];\n\n  abstract eventId: string | null;\n\n  constructor(\n    protected readonly auth: AuthInternal,\n    filter: AuthEventType | AuthEventType[],\n    protected readonly resolver: PopupRedirectResolverInternal,\n    protected user?: UserInternal,\n    protected readonly bypassAuthState = false\n  ) {\n    this.filter = Array.isArray(filter) ? filter : [filter];\n  }\n\n  abstract onExecution(): Promise<void>;\n\n  execute(): Promise<UserCredentialInternal | null> {\n    return new Promise<UserCredentialInternal | null>(\n      async (resolve, reject) => {\n        this.pendingPromise = { resolve, reject };\n\n        try {\n          this.eventManager = await this.resolver._initialize(this.auth);\n          await this.onExecution();\n          this.eventManager.registerConsumer(this);\n        } catch (e) {\n          this.reject(e as Error);\n        }\n      }\n    );\n  }\n\n  async onAuthEvent(event: AuthEvent): Promise<void> {\n    const { urlResponse, sessionId, postBody, tenantId, error, type } = event;\n    if (error) {\n      this.reject(error);\n      return;\n    }\n\n    const params: IdpTaskParams = {\n      auth: this.auth,\n      requestUri: urlResponse!,\n      sessionId: sessionId!,\n      tenantId: tenantId || undefined,\n      postBody: postBody || undefined,\n      user: this.user,\n      bypassAuthState: this.bypassAuthState\n    };\n\n    try {\n      this.resolve(await this.getIdpTask(type)(params));\n    } catch (e) {\n      this.reject(e as Error);\n    }\n  }\n\n  onError(error: FirebaseError): void {\n    this.reject(error);\n  }\n\n  private getIdpTask(type: AuthEventType): IdpTask {\n    switch (type) {\n      case AuthEventType.SIGN_IN_VIA_POPUP:\n      case AuthEventType.SIGN_IN_VIA_REDIRECT:\n        return _signIn;\n      case AuthEventType.LINK_VIA_POPUP:\n      case AuthEventType.LINK_VIA_REDIRECT:\n        return _link;\n      case AuthEventType.REAUTH_VIA_POPUP:\n      case AuthEventType.REAUTH_VIA_REDIRECT:\n        return _reauth;\n      default:\n        _fail(this.auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  protected resolve(cred: UserCredentialInternal | null): void {\n    debugAssert(this.pendingPromise, 'Pending promise was never set');\n    this.pendingPromise.resolve(cred);\n    this.unregisterAndCleanUp();\n  }\n\n  protected reject(error: Error): void {\n    debugAssert(this.pendingPromise, 'Pending promise was never set');\n    this.pendingPromise.reject(error);\n    this.unregisterAndCleanUp();\n  }\n\n  private unregisterAndCleanUp(): void {\n    if (this.eventManager) {\n      this.eventManager.unregisterConsumer(this);\n    }\n\n    this.pendingPromise = null;\n    this.cleanUp();\n  }\n\n  abstract cleanUp(): void;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  AuthProvider,\n  PopupRedirectResolver,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  _assert,\n  debugAssert,\n  _createError,\n  _assertInstanceOf\n} from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { _generateEventId } from '../../core/util/event_id';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport { _withDefaultResolver } from '../../core/util/resolver';\nimport { AuthPopup } from '../util/popup';\nimport { AbstractPopupRedirectOperation } from '../../core/strategies/abstract_popup_redirect_operation';\nimport { FederatedAuthProvider } from '../../core/providers/federated';\nimport { getModularInstance } from '@firebase/util';\nimport { _isFirebaseServerApp } from '@firebase/app';\n\n/*\n * The event timeout is the same on mobile and desktop, no need for Delay. Set this to 8s since\n * blocking functions can take upto 7s to complete sign in, as documented in:\n * https://cloud.google.com/identity-platform/docs/blocking-functions#understanding_blocking_functions\n * https://firebase.google.com/docs/auth/extend-with-blocking-functions#understanding_blocking_functions\n */\nexport const enum _Timeout {\n  AUTH_EVENT = 8000\n}\nexport const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);\n\n/**\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n *\n * @remarks\n * If succeeds, returns the signed in user along with the provider's credential. If sign in was\n * unsuccessful, returns an error object containing additional information about the error.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function signInWithPopup(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _createError(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED)\n    );\n  }\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  const action = new PopupOperation(\n    authInternal,\n    AuthEventType.SIGN_IN_VIA_POPUP,\n    provider,\n    resolverInternal\n  );\n  return action.executeNotNull();\n}\n\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\n * OAuth flow.\n *\n * @remarks\n * If the reauthentication is successful, the returned result will contain the user and the\n * provider's credential.\n *\n * This method does not work in a Node.js environment or on any {@link User} signed in by\n * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n * // Reauthenticate using a popup.\n * await reauthenticateWithPopup(result.user, provider);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function reauthenticateWithPopup(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(\n      _createError(userInternal.auth, AuthErrorCode.OPERATION_NOT_SUPPORTED)\n    );\n  }\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  const action = new PopupOperation(\n    userInternal.auth,\n    AuthEventType.REAUTH_VIA_POPUP,\n    provider,\n    resolverInternal,\n    userInternal\n  );\n  return action.executeNotNull();\n}\n\n/**\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\n *\n * @remarks\n * If the linking is successful, the returned result will contain the user and the provider's credential.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a popup.\n * const provider = new FacebookAuthProvider();\n * await linkWithPopup(result.user, provider);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function linkWithPopup(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n\n  const action = new PopupOperation(\n    userInternal.auth,\n    AuthEventType.LINK_VIA_POPUP,\n    provider,\n    resolverInternal,\n    userInternal\n  );\n  return action.executeNotNull();\n}\n\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n *\n */\nclass PopupOperation extends AbstractPopupRedirectOperation {\n  // Only one popup is ever shown at once. The lifecycle of the current popup\n  // can be managed / cancelled by the constructor.\n  private static currentPopupAction: PopupOperation | null = null;\n  private authWindow: AuthPopup | null = null;\n  private pollId: number | null = null;\n\n  constructor(\n    auth: AuthInternal,\n    filter: AuthEventType,\n    private readonly provider: AuthProvider,\n    resolver: PopupRedirectResolverInternal,\n    user?: UserInternal\n  ) {\n    super(auth, filter, resolver, user);\n    if (PopupOperation.currentPopupAction) {\n      PopupOperation.currentPopupAction.cancel();\n    }\n\n    PopupOperation.currentPopupAction = this;\n  }\n\n  async executeNotNull(): Promise<UserCredential> {\n    const result = await this.execute();\n    _assert(result, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return result;\n  }\n\n  async onExecution(): Promise<void> {\n    debugAssert(\n      this.filter.length === 1,\n      'Popup operations only handle one event'\n    );\n    const eventId = _generateEventId();\n    this.authWindow = await this.resolver._openPopup(\n      this.auth,\n      this.provider,\n      this.filter[0], // There's always one, see constructor\n      eventId\n    );\n    this.authWindow.associatedEvent = eventId;\n\n    // Check for web storage support and origin validation _after_ the popup is\n    // loaded. These operations are slow (~1 second or so) Rather than\n    // waiting on them before opening the window, optimistically open the popup\n    // and check for storage support at the same time. If storage support is\n    // not available, this will cause the whole thing to reject properly. It\n    // will also close the popup, but since the promise has already rejected,\n    // the popup closed by user poll will reject into the void.\n    this.resolver._originValidation(this.auth).catch(e => {\n      this.reject(e);\n    });\n\n    this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {\n      if (!isSupported) {\n        this.reject(\n          _createError(this.auth, AuthErrorCode.WEB_STORAGE_UNSUPPORTED)\n        );\n      }\n    });\n\n    // Handle user closure. Notice this does *not* use await\n    this.pollUserCancellation();\n  }\n\n  get eventId(): string | null {\n    return this.authWindow?.associatedEvent || null;\n  }\n\n  cancel(): void {\n    this.reject(_createError(this.auth, AuthErrorCode.EXPIRED_POPUP_REQUEST));\n  }\n\n  cleanUp(): void {\n    if (this.authWindow) {\n      this.authWindow.close();\n    }\n\n    if (this.pollId) {\n      window.clearTimeout(this.pollId);\n    }\n\n    this.authWindow = null;\n    this.pollId = null;\n    PopupOperation.currentPopupAction = null;\n  }\n\n  private pollUserCancellation(): void {\n    const poll = (): void => {\n      if (this.authWindow?.window?.closed) {\n        // Make sure that there is sufficient time for whatever action to\n        // complete. The window could have closed but the sign in network\n        // call could still be in flight. This is specifically true for\n        // Firefox or if the opener is in an iframe, in which case the oauth\n        // helper closes the popup.\n        this.pollId = window.setTimeout(() => {\n          this.pollId = null;\n          this.reject(\n            _createError(this.auth, AuthErrorCode.POPUP_CLOSED_BY_USER)\n          );\n        }, _Timeout.AUTH_EVENT);\n        return;\n      }\n\n      this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\n    };\n\n    poll();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEvent,\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserCredentialInternal } from '../../model/user';\nimport { PersistenceInternal } from '../persistence';\nimport { _persistenceKeyName } from '../persistence/persistence_user_manager';\nimport { _getInstance } from '../util/instantiator';\nimport { AbstractPopupRedirectOperation } from './abstract_popup_redirect_operation';\n\nconst PENDING_REDIRECT_KEY = 'pendingRedirect';\n\n// We only get one redirect outcome for any one auth, so just store it\n// in here.\nconst redirectOutcomeMap: Map<\n  string,\n  () => Promise<UserCredentialInternal | null>\n> = new Map();\n\nexport class RedirectAction extends AbstractPopupRedirectOperation {\n  eventId = null;\n\n  constructor(\n    auth: AuthInternal,\n    resolver: PopupRedirectResolverInternal,\n    bypassAuthState = false\n  ) {\n    super(\n      auth,\n      [\n        AuthEventType.SIGN_IN_VIA_REDIRECT,\n        AuthEventType.LINK_VIA_REDIRECT,\n        AuthEventType.REAUTH_VIA_REDIRECT,\n        AuthEventType.UNKNOWN\n      ],\n      resolver,\n      undefined,\n      bypassAuthState\n    );\n  }\n\n  /**\n   * Override the execute function; if we already have a redirect result, then\n   * just return it.\n   */\n  async execute(): Promise<UserCredentialInternal | null> {\n    let readyOutcome = redirectOutcomeMap.get(this.auth._key());\n    if (!readyOutcome) {\n      try {\n        const hasPendingRedirect = await _getAndClearPendingRedirectStatus(\n          this.resolver,\n          this.auth\n        );\n        const result = hasPendingRedirect ? await super.execute() : null;\n        readyOutcome = () => Promise.resolve(result);\n      } catch (e) {\n        readyOutcome = () => Promise.reject(e);\n      }\n\n      redirectOutcomeMap.set(this.auth._key(), readyOutcome);\n    }\n\n    // If we're not bypassing auth state, the ready outcome should be set to\n    // null.\n    if (!this.bypassAuthState) {\n      redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\n    }\n\n    return readyOutcome();\n  }\n\n  async onAuthEvent(event: AuthEvent): Promise<void> {\n    if (event.type === AuthEventType.SIGN_IN_VIA_REDIRECT) {\n      return super.onAuthEvent(event);\n    } else if (event.type === AuthEventType.UNKNOWN) {\n      // This is a sentinel value indicating there's no pending redirect\n      this.resolve(null);\n      return;\n    }\n\n    if (event.eventId) {\n      const user = await this.auth._redirectUserForId(event.eventId);\n      if (user) {\n        this.user = user;\n        return super.onAuthEvent(event);\n      } else {\n        this.resolve(null);\n      }\n    }\n  }\n\n  async onExecution(): Promise<void> {}\n\n  cleanUp(): void {}\n}\n\nexport async function _getAndClearPendingRedirectStatus(\n  resolver: PopupRedirectResolverInternal,\n  auth: AuthInternal\n): Promise<boolean> {\n  const key = pendingRedirectKey(auth);\n  const persistence = resolverPersistence(resolver);\n  if (!(await persistence._isAvailable())) {\n    return false;\n  }\n  const hasPendingRedirect = (await persistence._get(key)) === 'true';\n  await persistence._remove(key);\n  return hasPendingRedirect;\n}\n\nexport async function _setPendingRedirectStatus(\n  resolver: PopupRedirectResolverInternal,\n  auth: AuthInternal\n): Promise<void> {\n  return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\n}\n\nexport function _clearRedirectOutcomes(): void {\n  redirectOutcomeMap.clear();\n}\n\nexport function _overrideRedirectResult(\n  auth: AuthInternal,\n  result: () => Promise<UserCredentialInternal | null>\n): void {\n  redirectOutcomeMap.set(auth._key(), result);\n}\n\nfunction resolverPersistence(\n  resolver: PopupRedirectResolverInternal\n): PersistenceInternal {\n  return _getInstance(resolver._redirectPersistence);\n}\n\nfunction pendingRedirectKey(auth: AuthInternal): string {\n  return _persistenceKeyName(\n    PENDING_REDIRECT_KEY,\n    auth.config.apiKey,\n    auth.name\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  AuthProvider,\n  PopupRedirectResolver,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { _assertLinkedStatus } from '../../core/user/link_unlink';\nimport {\n  _assertInstanceOf,\n  _serverAppCurrentUserOperationNotSupportedError\n} from '../../core/util/assert';\nimport { _generateEventId } from '../../core/util/event_id';\nimport { AuthEventType } from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport { _withDefaultResolver } from '../../core/util/resolver';\nimport {\n  RedirectAction,\n  _setPendingRedirectStatus\n} from '../../core/strategies/redirect';\nimport { FederatedAuthProvider } from '../../core/providers/federated';\nimport { getModularInstance } from '@firebase/util';\nimport { _isFirebaseServerApp } from '@firebase/app';\n\n/**\n * Authenticates a Firebase client using a full-page redirect flow.\n *\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link signInWithRedirect}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function signInWithRedirect(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _signInWithRedirect(auth, provider, resolver) as Promise<never>;\n}\n\nexport async function _signInWithRedirect(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await authInternal._initializationPromise;\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  await _setPendingRedirectStatus(resolverInternal, authInternal);\n\n  return resolverInternal._openRedirect(\n    authInternal,\n    provider,\n    AuthEventType.SIGN_IN_VIA_REDIRECT\n  );\n}\n\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link reauthenticateWithRedirect}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * // Reauthenticate using a redirect.\n * await reauthenticateWithRedirect(result.user, provider);\n * // This will again trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function reauthenticateWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _reauthenticateWithRedirect(\n    user,\n    provider,\n    resolver\n  ) as Promise<never>;\n}\nexport async function _reauthenticateWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(userInternal.auth)\n    );\n  }\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await userInternal.auth._initializationPromise;\n  // Allow the resolver to error before persisting the redirect user\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(\n    userInternal.auth,\n    provider,\n    AuthEventType.REAUTH_VIA_REDIRECT,\n    eventId\n  );\n}\n\n/**\n * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link linkWithRedirect}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a redirect.\n * const provider = new FacebookAuthProvider();\n * await linkWithRedirect(result.user, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function linkWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _linkWithRedirect(user, provider, resolver) as Promise<never>;\n}\nexport async function _linkWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await userInternal.auth._initializationPromise;\n  // Allow the resolver to error before persisting the redirect user\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _assertLinkedStatus(false, userInternal, provider.providerId);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(\n    userInternal.auth,\n    provider,\n    AuthEventType.LINK_VIA_REDIRECT,\n    eventId\n  );\n}\n\n/**\n * Returns a {@link UserCredential} from the redirect-based sign-in flow.\n *\n * @remarks\n * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\n * error. If no redirect operation was called, returns `null`.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function getRedirectResult(\n  auth: Auth,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential | null> {\n  await _castAuth(auth)._initializationPromise;\n  return _getRedirectResult(auth, resolver, false);\n}\n\nexport async function _getRedirectResult(\n  auth: Auth,\n  resolverExtern?: PopupRedirectResolver,\n  bypassAuthState = false\n): Promise<UserCredential | null> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const authInternal = _castAuth(auth);\n  const resolver = _withDefaultResolver(authInternal, resolverExtern);\n  const action = new RedirectAction(authInternal, resolver, bypassAuthState);\n  const result = await action.execute();\n\n  if (result && !bypassAuthState) {\n    delete result.user._redirectEventId;\n    await authInternal._persistUserIfCurrent(result.user as UserInternal);\n    await authInternal._setRedirectUser(null, resolverExtern);\n  }\n\n  return result;\n}\n\nasync function prepareUserForRedirect(user: UserInternal): Promise<string> {\n  const eventId = _generateEventId(`${user.uid}:::`);\n  user._redirectEventId = eventId;\n  await user.auth._setRedirectUser(user);\n  await user.auth._persistUserIfCurrent(user);\n  return eventId;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthEvent,\n  AuthEventConsumer,\n  AuthEventType,\n  EventManager\n} from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { AuthInternal } from '../../model/auth';\nimport { _createError } from '../util/assert';\n\n// The amount of time to store the UIDs of seen events; this is\n// set to 10 min by default\nconst EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\n\nexport class AuthEventManager implements EventManager {\n  private readonly cachedEventUids: Set<string> = new Set();\n  private readonly consumers: Set<AuthEventConsumer> = new Set();\n  protected queuedRedirectEvent: AuthEvent | null = null;\n  protected hasHandledPotentialRedirect = false;\n  private lastProcessedEventTime = Date.now();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  registerConsumer(authEventConsumer: AuthEventConsumer): void {\n    this.consumers.add(authEventConsumer);\n\n    if (\n      this.queuedRedirectEvent &&\n      this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)\n    ) {\n      this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n      this.saveEventToCache(this.queuedRedirectEvent);\n      this.queuedRedirectEvent = null;\n    }\n  }\n\n  unregisterConsumer(authEventConsumer: AuthEventConsumer): void {\n    this.consumers.delete(authEventConsumer);\n  }\n\n  onEvent(event: AuthEvent): boolean {\n    // Check if the event has already been handled\n    if (this.hasEventBeenHandled(event)) {\n      return false;\n    }\n\n    let handled = false;\n    this.consumers.forEach(consumer => {\n      if (this.isEventForConsumer(event, consumer)) {\n        handled = true;\n        this.sendToConsumer(event, consumer);\n        this.saveEventToCache(event);\n      }\n    });\n\n    if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\n      // If we've already seen a redirect before, or this is a popup event,\n      // bail now\n      return handled;\n    }\n\n    this.hasHandledPotentialRedirect = true;\n\n    // If the redirect wasn't handled, hang on to it\n    if (!handled) {\n      this.queuedRedirectEvent = event;\n      handled = true;\n    }\n\n    return handled;\n  }\n\n  private sendToConsumer(event: AuthEvent, consumer: AuthEventConsumer): void {\n    if (event.error && !isNullRedirectEvent(event)) {\n      const code =\n        (event.error.code?.split('auth/')[1] as AuthErrorCode) ||\n        AuthErrorCode.INTERNAL_ERROR;\n      consumer.onError(_createError(this.auth, code));\n    } else {\n      consumer.onAuthEvent(event);\n    }\n  }\n\n  private isEventForConsumer(\n    event: AuthEvent,\n    consumer: AuthEventConsumer\n  ): boolean {\n    const eventIdMatches =\n      consumer.eventId === null ||\n      (!!event.eventId && event.eventId === consumer.eventId);\n    return consumer.filter.includes(event.type) && eventIdMatches;\n  }\n\n  private hasEventBeenHandled(event: AuthEvent): boolean {\n    if (\n      Date.now() - this.lastProcessedEventTime >=\n      EVENT_DUPLICATION_CACHE_DURATION_MS\n    ) {\n      this.cachedEventUids.clear();\n    }\n\n    return this.cachedEventUids.has(eventUid(event));\n  }\n\n  private saveEventToCache(event: AuthEvent): void {\n    this.cachedEventUids.add(eventUid(event));\n    this.lastProcessedEventTime = Date.now();\n  }\n}\n\nfunction eventUid(e: AuthEvent): string {\n  return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\n}\n\nfunction isNullRedirectEvent({ type, error }: AuthEvent): boolean {\n  return (\n    type === AuthEventType.UNKNOWN &&\n    error?.code === `auth/${AuthErrorCode.NO_AUTH_EVENT}`\n  );\n}\n\nfunction isRedirectEvent(event: AuthEvent): boolean {\n  switch (event.type) {\n    case AuthEventType.SIGN_IN_VIA_REDIRECT:\n    case AuthEventType.LINK_VIA_REDIRECT:\n    case AuthEventType.REAUTH_VIA_REDIRECT:\n      return true;\n    case AuthEventType.UNKNOWN:\n      return isNullRedirectEvent(event);\n    default:\n      return false;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _performApiRequest, Endpoint, HttpMethod } from '../index';\nimport { Auth } from '../../model/public_types';\n\nexport interface GetProjectConfigRequest {\n  androidPackageName?: string;\n  iosBundleId?: string;\n}\n\nexport interface GetProjectConfigResponse {\n  authorizedDomains: string[];\n}\n\nexport async function _getProjectConfig(\n  auth: Auth,\n  request: GetProjectConfigRequest = {}\n): Promise<GetProjectConfigResponse> {\n  return _performApiRequest<GetProjectConfigRequest, GetProjectConfigResponse>(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_PROJECT_CONFIG,\n    request\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProjectConfig } from '../../api/project_config/get_project_config';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from './assert';\nimport { _getCurrentUrl } from './location';\n\nconst IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\nconst HTTP_REGEX = /^https?/;\n\nexport async function _validateOrigin(auth: AuthInternal): Promise<void> {\n  // Skip origin validation if we are in an emulated environment\n  if (auth.config.emulator) {\n    return;\n  }\n\n  const { authorizedDomains } = await _getProjectConfig(auth);\n\n  for (const domain of authorizedDomains) {\n    try {\n      if (matchDomain(domain)) {\n        return;\n      }\n    } catch {\n      // Do nothing if there's a URL error; just continue searching\n    }\n  }\n\n  // In the old SDK, this error also provides helpful messages.\n  _fail(auth, AuthErrorCode.INVALID_ORIGIN);\n}\n\nfunction matchDomain(expected: string): boolean {\n  const currentUrl = _getCurrentUrl();\n  const { protocol, hostname } = new URL(currentUrl);\n  if (expected.startsWith('chrome-extension://')) {\n    const ceUrl = new URL(expected);\n\n    if (ceUrl.hostname === '' && hostname === '') {\n      // For some reason we're not parsing chrome URLs properly\n      return (\n        protocol === 'chrome-extension:' &&\n        expected.replace('chrome-extension://', '') ===\n          currentUrl.replace('chrome-extension://', '')\n      );\n    }\n\n    return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;\n  }\n\n  if (!HTTP_REGEX.test(protocol)) {\n    return false;\n  }\n\n  if (IP_ADDRESS_REGEX.test(expected)) {\n    // The domain has to be exactly equal to the pattern, as an IP domain will\n    // only contain the IP, no extra character.\n    return hostname === expected;\n  }\n\n  // Dots in pattern should be escaped.\n  const escapedDomainPattern = expected.replace(/\\./g, '\\\\.');\n  // Non ip address domains.\n  // domain.com = *.domain.com OR domain.com\n  const re = new RegExp(\n    '^(.+\\\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$',\n    'i'\n  );\n  return re.test(hostname);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as js from '../load_js';\n\nconst NETWORK_TIMEOUT = new Delay(30000, 60000);\n\n/**\n * Reset unloaded GApi modules. If gapi.load fails due to a network error,\n * it will stop working after a retrial. This is a hack to fix this issue.\n */\nfunction resetUnloadedGapiModules(): void {\n  // Clear last failed gapi.load state to force next gapi.load to first\n  // load the failed gapi.iframes module.\n  // Get gapix.beacon context.\n  const beacon = _window().___jsl;\n  // Get current hint.\n  if (beacon?.H) {\n    // Get gapi hint.\n    for (const hint of Object.keys(beacon.H)) {\n      // Requested modules.\n      beacon.H[hint].r = beacon.H[hint].r || [];\n      // Loaded modules.\n      beacon.H[hint].L = beacon.H[hint].L || [];\n      // Set requested modules to a copy of the loaded modules.\n      beacon.H[hint].r = [...beacon.H[hint].L];\n      // Clear pending callbacks.\n      if (beacon.CP) {\n        for (let i = 0; i < beacon.CP.length; i++) {\n          // Remove all failed pending callbacks.\n          beacon.CP[i] = null;\n        }\n      }\n    }\n  }\n}\n\nfunction loadGapi(auth: AuthInternal): Promise<gapi.iframes.Context> {\n  return new Promise<gapi.iframes.Context>((resolve, reject) => {\n    // Function to run when gapi.load is ready.\n    function loadGapiIframe(): void {\n      // The developer may have tried to previously run gapi.load and failed.\n      // Run this to fix that.\n      resetUnloadedGapiModules();\n      gapi.load('gapi.iframes', {\n        callback: () => {\n          resolve(gapi.iframes.getContext());\n        },\n        ontimeout: () => {\n          // The above reset may be sufficient, but having this reset after\n          // failure ensures that if the developer calls gapi.load after the\n          // connection is re-established and before another attempt to embed\n          // the iframe, it would work and would not be broken because of our\n          // failed attempt.\n          // Timeout when gapi.iframes.Iframe not loaded.\n          resetUnloadedGapiModules();\n          reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n        },\n        timeout: NETWORK_TIMEOUT.get()\n      });\n    }\n\n    if (_window().gapi?.iframes?.Iframe) {\n      // If gapi.iframes.Iframe available, resolve.\n      resolve(gapi.iframes.getContext());\n    } else if (!!_window().gapi?.load) {\n      // Gapi loader ready, load gapi.iframes.\n      loadGapiIframe();\n    } else {\n      // Create a new iframe callback when this is called so as not to overwrite\n      // any previous defined callback. This happens if this method is called\n      // multiple times in parallel and could result in the later callback\n      // overwriting the previous one. This would end up with a iframe\n      // timeout.\n      const cbName = js._generateCallbackName('iframefcb');\n      // GApi loader not available, dynamically load platform.js.\n      _window()[cbName] = () => {\n        // GApi loader should be ready.\n        if (!!gapi.load) {\n          loadGapiIframe();\n        } else {\n          // Gapi loader failed, throw error.\n          reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n        }\n      };\n      // Load GApi loader.\n      return js\n        ._loadJS(`${js._gapiScriptUrl()}?onload=${cbName}`)\n        .catch(e => reject(e));\n    }\n  }).catch(error => {\n    // Reset cached promise to allow for retrial.\n    cachedGApiLoader = null;\n    throw error;\n  });\n}\n\nlet cachedGApiLoader: Promise<gapi.iframes.Context> | null = null;\nexport function _loadGapi(auth: AuthInternal): Promise<gapi.iframes.Context> {\n  cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\n  return cachedGApiLoader;\n}\n\nexport function _resetLoader(): void {\n  cachedGApiLoader = null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { querystring } from '@firebase/util';\nimport { DefaultConfig } from '../../../internal';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert, _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { _emulatorUrl } from '../../core/util/emulator';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as gapiLoader from './gapi';\n\nconst PING_TIMEOUT = new Delay(5000, 15000);\nconst IFRAME_PATH = '__/auth/iframe';\nconst EMULATED_IFRAME_PATH = 'emulator/auth/iframe';\n\nconst IFRAME_ATTRIBUTES = {\n  style: {\n    position: 'absolute',\n    top: '-100px',\n    width: '1px',\n    height: '1px'\n  },\n  'aria-hidden': 'true',\n  tabindex: '-1'\n};\n\n// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\n// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\nconst EID_FROM_APIHOST = new Map([\n  [DefaultConfig.API_HOST, 'p'], // production\n  ['staging-identitytoolkit.sandbox.googleapis.com', 's'], // staging\n  ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test\n]);\n\nfunction getIframeUrl(auth: AuthInternal): string {\n  const config = auth.config;\n  _assert(config.authDomain, auth, AuthErrorCode.MISSING_AUTH_DOMAIN);\n  const url = config.emulator\n    ? _emulatorUrl(config, EMULATED_IFRAME_PATH)\n    : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\n\n  const params: Record<string, string> = {\n    apiKey: config.apiKey,\n    appName: auth.name,\n    v: SDK_VERSION\n  };\n  const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\n  if (eid) {\n    params.eid = eid;\n  }\n  const frameworks = auth._getFrameworks();\n  if (frameworks.length) {\n    params.fw = frameworks.join(',');\n  }\n  return `${url}?${querystring(params).slice(1)}`;\n}\n\nexport async function _openIframe(\n  auth: AuthInternal\n): Promise<gapi.iframes.Iframe> {\n  const context = await gapiLoader._loadGapi(auth);\n  const gapi = _window().gapi;\n  _assert(gapi, auth, AuthErrorCode.INTERNAL_ERROR);\n  return context.open(\n    {\n      where: document.body,\n      url: getIframeUrl(auth),\n      messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\n      attributes: IFRAME_ATTRIBUTES,\n      dontclear: true\n    },\n    (iframe: gapi.iframes.Iframe) =>\n      new Promise(async (resolve, reject) => {\n        await iframe.restyle({\n          // Prevent iframe from closing on mouse out.\n          setHideOnLeave: false\n        });\n\n        const networkError = _createError(\n          auth,\n          AuthErrorCode.NETWORK_REQUEST_FAILED\n        );\n        // Confirm iframe is correctly loaded.\n        // To fallback on failure, set a timeout.\n        const networkErrorTimer = _window().setTimeout(() => {\n          reject(networkError);\n        }, PING_TIMEOUT.get());\n        // Clear timer and resolve pending iframe ready promise.\n        function clearTimerAndResolve(): void {\n          _window().clearTimeout(networkErrorTimer);\n          resolve(iframe);\n        }\n        // This returns an IThenable. However the reject part does not call\n        // when the iframe is not loaded.\n        iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\n          reject(networkError);\n        });\n      })\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getUA } from '@firebase/util';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\nimport {\n  _isChromeIOS,\n  _isFirefox,\n  _isIOSStandalone\n} from '../../core/util/browser';\nimport { AuthInternal } from '../../model/auth';\n\nconst BASE_POPUP_OPTIONS = {\n  location: 'yes',\n  resizable: 'yes',\n  statusbar: 'yes',\n  toolbar: 'no'\n};\n\nconst DEFAULT_WIDTH = 500;\nconst DEFAULT_HEIGHT = 600;\nconst TARGET_BLANK = '_blank';\n\nconst FIREFOX_EMPTY_URL = 'http://localhost';\n\nexport class AuthPopup {\n  associatedEvent: string | null = null;\n\n  constructor(readonly window: Window | null) {}\n\n  close(): void {\n    if (this.window) {\n      try {\n        this.window.close();\n      } catch (e) {}\n    }\n  }\n}\n\nexport function _open(\n  auth: AuthInternal,\n  url?: string,\n  name?: string,\n  width = DEFAULT_WIDTH,\n  height = DEFAULT_HEIGHT\n): AuthPopup {\n  const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\n  const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\n  let target = '';\n\n  const options: { [key: string]: string } = {\n    ...BASE_POPUP_OPTIONS,\n    width: width.toString(),\n    height: height.toString(),\n    top,\n    left\n  };\n\n  // Chrome iOS 7 and 8 is returning an undefined popup win when target is\n  // specified, even though the popup is not necessarily blocked.\n  const ua = getUA().toLowerCase();\n\n  if (name) {\n    target = _isChromeIOS(ua) ? TARGET_BLANK : name;\n  }\n\n  if (_isFirefox(ua)) {\n    // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\n    url = url || FIREFOX_EMPTY_URL;\n    // Firefox disables by default scrolling on popup windows, which can create\n    // issues when the user has many Google accounts, for instance.\n    options.scrollbars = 'yes';\n  }\n\n  const optionsString = Object.entries(options).reduce(\n    (accum, [key, value]) => `${accum}${key}=${value},`,\n    ''\n  );\n\n  if (_isIOSStandalone(ua) && target !== '_self') {\n    openAsNewWindowIOS(url || '', target);\n    return new AuthPopup(null);\n  }\n\n  // about:blank getting sanitized causing browsers like IE/Edge to display\n  // brief error message before redirecting to handler.\n  const newWin = window.open(url || '', target, optionsString);\n  _assert(newWin, auth, AuthErrorCode.POPUP_BLOCKED);\n\n  // Flaky on IE edge, encapsulate with a try and catch.\n  try {\n    newWin.focus();\n  } catch (e) {}\n\n  return new AuthPopup(newWin);\n}\n\nfunction openAsNewWindowIOS(url: string, target: string): void {\n  const el = document.createElement('a');\n  el.href = url;\n  el.target = target;\n  const click = document.createEvent('MouseEvent');\n  click.initMouseEvent(\n    'click',\n    true,\n    true,\n    window,\n    1,\n    0,\n    0,\n    0,\n    0,\n    false,\n    false,\n    false,\n    false,\n    1,\n    null\n  );\n  el.dispatchEvent(click);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { AuthProvider } from '../../model/public_types';\nimport { ApiKey, AppName, AuthInternal } from '../../model/auth';\nimport { AuthEventType } from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from './assert';\nimport { isEmpty, querystring } from '@firebase/util';\nimport { _emulatorUrl } from './emulator';\nimport { FederatedAuthProvider } from '../providers/federated';\nimport { BaseOAuthProvider } from '../providers/oauth';\n\n/**\n * URL for Authentication widget which will initiate the OAuth handshake\n *\n * @internal\n */\nconst WIDGET_PATH = '__/auth/handler';\n\n/**\n * URL for emulated environment\n *\n * @internal\n */\nconst EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\n\n/**\n * Fragment name for the App Check token that gets passed to the widget\n *\n * @internal\n */\nconst FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ntype WidgetParams = {\n  apiKey: ApiKey;\n  appName: AppName;\n  authType: AuthEventType;\n  redirectUrl?: string;\n  v: string;\n  providerId?: string;\n  scopes?: string;\n  customParameters?: string;\n  eventId?: string;\n  tid?: string;\n} & { [key: string]: string | undefined };\n\nexport async function _getRedirectUrl(\n  auth: AuthInternal,\n  provider: AuthProvider,\n  authType: AuthEventType,\n  redirectUrl?: string,\n  eventId?: string,\n  additionalParams?: Record<string, string>\n): Promise<string> {\n  _assert(auth.config.authDomain, auth, AuthErrorCode.MISSING_AUTH_DOMAIN);\n  _assert(auth.config.apiKey, auth, AuthErrorCode.INVALID_API_KEY);\n\n  const params: WidgetParams = {\n    apiKey: auth.config.apiKey,\n    appName: auth.name,\n    authType,\n    redirectUrl,\n    v: SDK_VERSION,\n    eventId\n  };\n\n  if (provider instanceof FederatedAuthProvider) {\n    provider.setDefaultLanguage(auth.languageCode);\n    params.providerId = provider.providerId || '';\n    if (!isEmpty(provider.getCustomParameters())) {\n      params.customParameters = JSON.stringify(provider.getCustomParameters());\n    }\n\n    // TODO set additionalParams from the provider as well?\n    for (const [key, value] of Object.entries(additionalParams || {})) {\n      params[key] = value;\n    }\n  }\n\n  if (provider instanceof BaseOAuthProvider) {\n    const scopes = provider.getScopes().filter(scope => scope !== '');\n    if (scopes.length > 0) {\n      params.scopes = scopes.join(',');\n    }\n  }\n\n  if (auth.tenantId) {\n    params.tid = auth.tenantId;\n  }\n\n  // TODO: maybe set eid as endpointId\n  // TODO: maybe set fw as Frameworks.join(\",\")\n\n  const paramsDict = params as Record<string, string | number>;\n  for (const key of Object.keys(paramsDict)) {\n    if (paramsDict[key] === undefined) {\n      delete paramsDict[key];\n    }\n  }\n\n  // Sets the App Check token to pass to the widget\n  const appCheckToken = await auth._getAppCheckToken();\n  const appCheckTokenFragment = appCheckToken\n    ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}`\n    : '';\n\n  // Start at index 1 to skip the leading '&' in the query string\n  return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(\n    1\n  )}${appCheckTokenFragment}`;\n}\n\nfunction getHandlerBase({ config }: AuthInternal): string {\n  if (!config.emulator) {\n    return `https://${config.authDomain}/${WIDGET_PATH}`;\n  }\n\n  return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, PopupRedirectResolver } from '../model/public_types';\n\nimport { AuthEventManager } from '../core/auth/auth_event_manager';\nimport { AuthErrorCode } from '../core/errors';\nimport { _assert, debugAssert, _fail } from '../core/util/assert';\nimport { _generateEventId } from '../core/util/event_id';\nimport { _getCurrentUrl } from '../core/util/location';\nimport { _validateOrigin } from '../core/util/validate_origin';\nimport { AuthInternal } from '../model/auth';\nimport {\n  AuthEventType,\n  EventManager,\n  GapiAuthEvent,\n  GapiOutcome,\n  PopupRedirectResolverInternal\n} from '../model/popup_redirect';\nimport { _setWindowLocation } from './auth_window';\nimport { _openIframe } from './iframe/iframe';\nimport { browserSessionPersistence } from './persistence/session_storage';\nimport { _open, AuthPopup } from './util/popup';\nimport { _getRedirectResult } from './strategies/redirect';\nimport { _getRedirectUrl } from '../core/util/handler';\nimport { _isIOS, _isMobileBrowser, _isSafari } from '../core/util/browser';\nimport { _overrideRedirectResult } from '../core/strategies/redirect';\n\n/**\n * The special web storage event\n *\n */\nconst WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';\n\ninterface WebStorageSupportMessage extends gapi.iframes.Message {\n  [index: number]: Record<string, boolean>;\n}\n\ninterface ManagerOrPromise {\n  manager?: EventManager;\n  promise?: Promise<EventManager>;\n}\n\nclass BrowserPopupRedirectResolver implements PopupRedirectResolverInternal {\n  private readonly eventManagers: Record<string, ManagerOrPromise> = {};\n  private readonly iframes: Record<string, gapi.iframes.Iframe> = {};\n  private readonly originValidationPromises: Record<string, Promise<void>> = {};\n\n  readonly _redirectPersistence = browserSessionPersistence;\n\n  // Wrapping in async even though we don't await anywhere in order\n  // to make sure errors are raised as promise rejections\n  async _openPopup(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<AuthPopup> {\n    debugAssert(\n      this.eventManagers[auth._key()]?.manager,\n      '_initialize() not called before _openPopup()'\n    );\n\n    const url = await _getRedirectUrl(\n      auth,\n      provider,\n      authType,\n      _getCurrentUrl(),\n      eventId\n    );\n    return _open(auth, url, _generateEventId());\n  }\n\n  async _openRedirect(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<never> {\n    await this._originValidation(auth);\n    const url = await _getRedirectUrl(\n      auth,\n      provider,\n      authType,\n      _getCurrentUrl(),\n      eventId\n    );\n    _setWindowLocation(url);\n    return new Promise(() => {});\n  }\n\n  _initialize(auth: AuthInternal): Promise<EventManager> {\n    const key = auth._key();\n    if (this.eventManagers[key]) {\n      const { manager, promise } = this.eventManagers[key];\n      if (manager) {\n        return Promise.resolve(manager);\n      } else {\n        debugAssert(promise, 'If manager is not set, promise should be');\n        return promise;\n      }\n    }\n\n    const promise = this.initAndGetManager(auth);\n    this.eventManagers[key] = { promise };\n\n    // If the promise is rejected, the key should be removed so that the\n    // operation can be retried later.\n    promise.catch(() => {\n      delete this.eventManagers[key];\n    });\n\n    return promise;\n  }\n\n  private async initAndGetManager(auth: AuthInternal): Promise<EventManager> {\n    const iframe = await _openIframe(auth);\n    const manager = new AuthEventManager(auth);\n    iframe.register<GapiAuthEvent>(\n      'authEvent',\n      (iframeEvent: GapiAuthEvent | null) => {\n        _assert(iframeEvent?.authEvent, auth, AuthErrorCode.INVALID_AUTH_EVENT);\n        // TODO: Consider splitting redirect and popup events earlier on\n\n        const handled = manager.onEvent(iframeEvent.authEvent);\n        return { status: handled ? GapiOutcome.ACK : GapiOutcome.ERROR };\n      },\n      gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER\n    );\n\n    this.eventManagers[auth._key()] = { manager };\n    this.iframes[auth._key()] = iframe;\n    return manager;\n  }\n\n  _isIframeWebStorageSupported(\n    auth: AuthInternal,\n    cb: (supported: boolean) => unknown\n  ): void {\n    const iframe = this.iframes[auth._key()];\n    iframe.send<gapi.iframes.Message, WebStorageSupportMessage>(\n      WEB_STORAGE_SUPPORT_KEY,\n      { type: WEB_STORAGE_SUPPORT_KEY },\n      result => {\n        const isSupported = result?.[0]?.[WEB_STORAGE_SUPPORT_KEY];\n        if (isSupported !== undefined) {\n          cb(!!isSupported);\n        }\n\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n      },\n      gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER\n    );\n  }\n\n  _originValidation(auth: AuthInternal): Promise<void> {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n\n    return this.originValidationPromises[key];\n  }\n\n  get _shouldInitProactively(): boolean {\n    // Mobile browsers and Safari need to optimistically initialize\n    return _isMobileBrowser() || _isSafari() || _isIOS();\n  }\n\n  _completeRedirectFn = _getRedirectResult;\n\n  _overrideRedirectResult = _overrideRedirectResult;\n}\n\n/**\n * An implementation of {@link PopupRedirectResolver} suitable for browser\n * based applications.\n *\n * @remarks\n * This method does not work in a Node.js environment.\n *\n * @public\n */\nexport const browserPopupRedirectResolver: PopupRedirectResolver =\n  BrowserPopupRedirectResolver;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FactorId, MultiFactorAssertion } from '../model/public_types';\nimport { debugFail } from '../core/util/assert';\nimport { MultiFactorSessionImpl, MultiFactorSessionType } from './mfa_session';\nimport { FinalizeMfaResponse } from '../api/authentication/mfa';\nimport { AuthInternal } from '../model/auth';\n\nexport abstract class MultiFactorAssertionImpl implements MultiFactorAssertion {\n  protected constructor(readonly factorId: FactorId) {}\n\n  _process(\n    auth: AuthInternal,\n    session: MultiFactorSessionImpl,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    switch (session.type) {\n      case MultiFactorSessionType.ENROLL:\n        return this._finalizeEnroll(auth, session.credential, displayName);\n      case MultiFactorSessionType.SIGN_IN:\n        return this._finalizeSignIn(auth, session.credential);\n      default:\n        return debugFail('unexpected MultiFactorSessionType');\n    }\n  }\n\n  abstract _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse>;\n  abstract _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  FactorId,\n  PhoneMultiFactorAssertion\n} from '../../../model/public_types';\n\nimport { MultiFactorAssertionImpl } from '../../../mfa/mfa_assertion';\nimport { AuthInternal } from '../../../model/auth';\nimport { finalizeEnrollPhoneMfa } from '../../../api/account_management/mfa';\nimport { PhoneAuthCredential } from '../../../core/credentials/phone';\nimport {\n  finalizeSignInPhoneMfa,\n  FinalizeMfaResponse\n} from '../../../api/authentication/mfa';\n\n/**\n * {@inheritdoc PhoneMultiFactorAssertion}\n *\n * @public\n */\nexport class PhoneMultiFactorAssertionImpl\n  extends MultiFactorAssertionImpl\n  implements PhoneMultiFactorAssertion\n{\n  private constructor(private readonly credential: PhoneAuthCredential) {\n    super(FactorId.PHONE);\n  }\n\n  /** @internal */\n  static _fromCredential(\n    credential: PhoneAuthCredential\n  ): PhoneMultiFactorAssertionImpl {\n    return new PhoneMultiFactorAssertionImpl(credential);\n  }\n\n  /** @internal */\n  _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    return finalizeEnrollPhoneMfa(auth, {\n      idToken,\n      displayName,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n\n  /** @internal */\n  _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse> {\n    return finalizeSignInPhoneMfa(auth, {\n      mfaPendingCredential,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n}\n\n/**\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\n *\n * @public\n */\nexport class PhoneMultiFactorGenerator {\n  private constructor() {}\n\n  /**\n   * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n   * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}\n   */\n  static assertion(credential: PhoneAuthCredential): PhoneMultiFactorAssertion {\n    return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n  }\n\n  /**\n   * The identifier of the phone second factor: `phone`.\n   */\n  static FACTOR_ID = 'phone';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  TotpMultiFactorAssertion,\n  MultiFactorSession,\n  FactorId\n} from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  finalizeEnrollTotpMfa,\n  startEnrollTotpMfa,\n  StartTotpMfaEnrollmentResponse,\n  TotpVerificationInfo\n} from '../../api/account_management/mfa';\nimport {\n  FinalizeMfaResponse,\n  finalizeSignInTotpMfa\n} from '../../api/authentication/mfa';\nimport { MultiFactorAssertionImpl } from '../../mfa/mfa_assertion';\nimport { MultiFactorSessionImpl } from '../mfa_session';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\n\n/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * @public\n */\nexport class TotpMultiFactorGenerator {\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n   * the TOTP (time-based one-time password) second factor.\n   * This assertion is used to complete enrollment in TOTP second factor.\n   *\n   * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorUser.enroll}.\n   */\n  static assertionForEnrollment(\n    secret: TotpSecret,\n    oneTimePassword: string\n  ): TotpMultiFactorAssertion {\n    return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n  }\n\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n   * This assertion is used to complete signIn with TOTP as the second factor.\n   *\n   * @param enrollmentId identifies the enrolled TOTP second factor.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}.\n   */\n  static assertionForSignIn(\n    enrollmentId: string,\n    oneTimePassword: string\n  ): TotpMultiFactorAssertion {\n    return TotpMultiFactorAssertionImpl._fromEnrollmentId(\n      enrollmentId,\n      oneTimePassword\n    );\n  }\n\n  /**\n   * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n   * Creates a TOTP secret as part of enrolling a TOTP second factor.\n   * Used for generating a QR code URL or inputting into a TOTP app.\n   * This method uses the auth instance corresponding to the user in the multiFactorSession.\n   *\n   * @param session The {@link MultiFactorSession} that the user is part of.\n   * @returns A promise to {@link TotpSecret}.\n   */\n  static async generateSecret(\n    session: MultiFactorSession\n  ): Promise<TotpSecret> {\n    const mfaSession = session as MultiFactorSessionImpl;\n    _assert(\n      typeof mfaSession.user?.auth !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const response = await startEnrollTotpMfa(mfaSession.user.auth, {\n      idToken: mfaSession.credential,\n      totpEnrollmentInfo: {}\n    });\n    return TotpSecret._fromStartTotpMfaEnrollmentResponse(\n      response,\n      mfaSession.user.auth\n    );\n  }\n\n  /**\n   * The identifier of the TOTP second factor: `totp`.\n   */\n  static FACTOR_ID: 'totp' = FactorId.TOTP;\n}\n\nexport class TotpMultiFactorAssertionImpl\n  extends MultiFactorAssertionImpl\n  implements TotpMultiFactorAssertion\n{\n  constructor(\n    readonly otp: string,\n    readonly enrollmentId?: string,\n    readonly secret?: TotpSecret\n  ) {\n    super(FactorId.TOTP);\n  }\n\n  /** @internal */\n  static _fromSecret(\n    secret: TotpSecret,\n    otp: string\n  ): TotpMultiFactorAssertionImpl {\n    return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n  }\n\n  /** @internal */\n  static _fromEnrollmentId(\n    enrollmentId: string,\n    otp: string\n  ): TotpMultiFactorAssertionImpl {\n    return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n  }\n\n  /** @internal */\n  async _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    _assert(\n      typeof this.secret !== 'undefined',\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    return finalizeEnrollTotpMfa(auth, {\n      idToken,\n      displayName,\n      totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n    });\n  }\n\n  /** @internal */\n  async _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse> {\n    _assert(\n      this.enrollmentId !== undefined && this.otp !== undefined,\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    const totpVerificationInfo = { verificationCode: this.otp };\n    return finalizeSignInTotpMfa(auth, {\n      mfaPendingCredential,\n      mfaEnrollmentId: this.enrollmentId,\n      totpVerificationInfo\n    });\n  }\n}\n\n/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * Stores the shared secret key and other parameters to generate time-based OTPs.\n * Implements methods to retrieve the shared secret key and generate a QR code URL.\n * @public\n */\nexport class TotpSecret {\n  /**\n   * Shared secret key/seed used for enrolling in TOTP MFA and generating OTPs.\n   */\n  readonly secretKey: string;\n  /**\n   * Hashing algorithm used.\n   */\n  readonly hashingAlgorithm: string;\n  /**\n   * Length of the one-time passwords to be generated.\n   */\n  readonly codeLength: number;\n  /**\n   * The interval (in seconds) when the OTP codes should change.\n   */\n  readonly codeIntervalSeconds: number;\n  /**\n   * The timestamp (UTC string) by which TOTP enrollment should be completed.\n   */\n  // This can be used by callers to show a countdown of when to enter OTP code by.\n  readonly enrollmentCompletionDeadline: string;\n\n  // The public members are declared outside the constructor so the docs can be generated.\n  private constructor(\n    secretKey: string,\n    hashingAlgorithm: string,\n    codeLength: number,\n    codeIntervalSeconds: number,\n    enrollmentCompletionDeadline: string,\n    private readonly sessionInfo: string,\n    private readonly auth: AuthInternal\n  ) {\n    this.secretKey = secretKey;\n    this.hashingAlgorithm = hashingAlgorithm;\n    this.codeLength = codeLength;\n    this.codeIntervalSeconds = codeIntervalSeconds;\n    this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n  }\n\n  /** @internal */\n  static _fromStartTotpMfaEnrollmentResponse(\n    response: StartTotpMfaEnrollmentResponse,\n    auth: AuthInternal\n  ): TotpSecret {\n    return new TotpSecret(\n      response.totpSessionInfo.sharedSecretKey,\n      response.totpSessionInfo.hashingAlgorithm,\n      response.totpSessionInfo.verificationCodeLength,\n      response.totpSessionInfo.periodSec,\n      new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(),\n      response.totpSessionInfo.sessionInfo,\n      auth\n    );\n  }\n\n  /** @internal */\n  _makeTotpVerificationInfo(otp: string): TotpVerificationInfo {\n    return { sessionInfo: this.sessionInfo, verificationCode: otp };\n  }\n\n  /**\n   * Returns a QR code URL as described in\n   * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n   * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n   * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n   *\n   * @param accountName the name of the account/app along with a user identifier.\n   * @param issuer issuer of the TOTP (likely the app name).\n   * @returns A QR code URL string.\n   */\n  generateQrCodeUrl(accountName?: string, issuer?: string): string {\n    let useDefaults = false;\n    if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n      useDefaults = true;\n    }\n    if (useDefaults) {\n      if (_isEmptyString(accountName)) {\n        accountName = this.auth.currentUser?.email || 'unknownuser';\n      }\n      if (_isEmptyString(issuer)) {\n        issuer = this.auth.name;\n      }\n    }\n    return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n  }\n}\n\n/** @internal */\nfunction _isEmptyString(input?: string): boolean {\n  return typeof input === 'undefined' || input?.length === 0;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Unsubscribe } from '@firebase/util';\nimport { FirebaseAuthInternal } from '@firebase/auth-interop-types';\n\nimport { AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { _assert } from '../util/assert';\nimport { AuthErrorCode } from '../errors';\n\ninterface TokenListener {\n  (tok: string | null): unknown;\n}\n\nexport class AuthInterop implements FirebaseAuthInternal {\n  private readonly internalListeners: Map<TokenListener, Unsubscribe> =\n    new Map();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  getUid(): string | null {\n    this.assertAuthConfigured();\n    return this.auth.currentUser?.uid || null;\n  }\n\n  async getToken(\n    forceRefresh?: boolean\n  ): Promise<{ accessToken: string } | null> {\n    this.assertAuthConfigured();\n    await this.auth._initializationPromise;\n    if (!this.auth.currentUser) {\n      return null;\n    }\n\n    const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n    return { accessToken };\n  }\n\n  addAuthTokenListener(listener: TokenListener): void {\n    this.assertAuthConfigured();\n    if (this.internalListeners.has(listener)) {\n      return;\n    }\n\n    const unsubscribe = this.auth.onIdTokenChanged(user => {\n      listener(\n        (user as UserInternal | null)?.stsTokenManager.accessToken || null\n      );\n    });\n    this.internalListeners.set(listener, unsubscribe);\n    this.updateProactiveRefresh();\n  }\n\n  removeAuthTokenListener(listener: TokenListener): void {\n    this.assertAuthConfigured();\n    const unsubscribe = this.internalListeners.get(listener);\n    if (!unsubscribe) {\n      return;\n    }\n\n    this.internalListeners.delete(listener);\n    unsubscribe();\n    this.updateProactiveRefresh();\n  }\n\n  private assertAuthConfigured(): void {\n    _assert(\n      this.auth._initializationPromise,\n      AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH\n    );\n  }\n\n  private updateProactiveRefresh(): void {\n    if (this.internalListeners.size > 0) {\n      this.auth._startProactiveRefresh();\n    } else {\n      this.auth._stopProactiveRefresh();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\n\nimport {\n  initializeAuth,\n  beforeAuthStateChanged,\n  onIdTokenChanged,\n  connectAuthEmulator\n} from '..';\nimport { registerAuth } from '../core/auth/register';\nimport { ClientPlatform } from '../core/util/version';\nimport { browserLocalPersistence } from './persistence/local_storage';\nimport { browserSessionPersistence } from './persistence/session_storage';\nimport { indexedDBLocalPersistence } from './persistence/indexed_db';\nimport { browserPopupRedirectResolver } from './popup_redirect';\nimport { Auth, User } from '../model/public_types';\nimport { getDefaultEmulatorHost, getExperimentalSetting } from '@firebase/util';\nimport { _setExternalJSProvider } from './load_js';\nimport { _createError } from '../core/util/assert';\nimport { AuthErrorCode } from '../core/errors';\n\nconst DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\nconst authIdTokenMaxAge =\n  getExperimentalSetting('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;\n\nlet lastPostedIdToken: string | undefined | null = null;\n\nconst mintCookieFactory = (url: string) => async (user: User | null) => {\n  const idTokenResult = user && (await user.getIdTokenResult());\n  const idTokenAge =\n    idTokenResult &&\n    (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1_000;\n  if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\n    return;\n  }\n  // Specifically trip null => undefined when logged out, to delete any existing cookie\n  const idToken = idTokenResult?.token;\n  if (lastPostedIdToken === idToken) {\n    return;\n  }\n  lastPostedIdToken = idToken;\n  await fetch(url, {\n    method: idToken ? 'POST' : 'DELETE',\n    headers: idToken\n      ? {\n          'Authorization': `Bearer ${idToken}`\n        }\n      : {}\n  });\n};\n\n/**\n * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\n * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\n *\n * @param app - The Firebase App.\n *\n * @public\n */\nexport function getAuth(app: FirebaseApp = getApp()): Auth {\n  const provider = _getProvider(app, 'auth');\n\n  if (provider.isInitialized()) {\n    return provider.getImmediate();\n  }\n\n  const auth = initializeAuth(app, {\n    popupRedirectResolver: browserPopupRedirectResolver,\n    persistence: [\n      indexedDBLocalPersistence,\n      browserLocalPersistence,\n      browserSessionPersistence\n    ]\n  });\n\n  const authTokenSyncPath = getExperimentalSetting('authTokenSyncURL');\n  // Only do the Cookie exchange in a secure context\n  if (\n    authTokenSyncPath &&\n    typeof isSecureContext === 'boolean' &&\n    isSecureContext\n  ) {\n    // Don't allow urls (XSS possibility), only paths on the same domain\n    const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);\n    if (location.origin === authTokenSyncUrl.origin) {\n      const mintCookie = mintCookieFactory(authTokenSyncUrl.toString());\n      beforeAuthStateChanged(auth, mintCookie, () =>\n        mintCookie(auth.currentUser)\n      );\n      onIdTokenChanged(auth, user => mintCookie(user));\n    }\n  }\n\n  const authEmulatorHost = getDefaultEmulatorHost('auth');\n  if (authEmulatorHost) {\n    connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n  }\n\n  return auth;\n}\n\nfunction getScriptParentElement(): HTMLDocument | HTMLHeadElement {\n  return document.getElementsByTagName('head')?.[0] ?? document;\n}\n\n_setExternalJSProvider({\n  loadJS(url: string): Promise<Event> {\n    // TODO: consider adding timeout support & cancellation\n    return new Promise((resolve, reject) => {\n      const el = document.createElement('script');\n      el.setAttribute('src', url);\n      el.onload = resolve;\n      el.onerror = e => {\n        const error = _createError(AuthErrorCode.INTERNAL_ERROR);\n        error.customData = e as unknown as Record<string, unknown>;\n        reject(error);\n      };\n      el.type = 'text/javascript';\n      el.charset = 'UTF-8';\n      getScriptParentElement().appendChild(el);\n    });\n  },\n\n  gapiScript: 'https://apis.google.com/js/api.js',\n  recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',\n  recaptchaEnterpriseScript:\n    'https://www.google.com/recaptcha/enterprise.js?render='\n});\n\nregisterAuth(ClientPlatform.BROWSER);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\n\nimport { name, version } from '../../../package.json';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _getClientVersion, ClientPlatform } from '../util/version';\nimport { _castAuth, AuthImpl, DefaultConfig } from './auth_impl';\nimport { AuthInterop } from './firebase_internal';\nimport { ConfigInternal } from '../../model/auth';\nimport { Dependencies } from '../../model/public_types';\nimport { _initializeAuthInstance } from './initialize';\n\nexport const enum _ComponentName {\n  AUTH = 'auth',\n  AUTH_INTERNAL = 'auth-internal'\n}\n\nfunction getVersionForPlatform(\n  clientPlatform: ClientPlatform\n): string | undefined {\n  switch (clientPlatform) {\n    case ClientPlatform.NODE:\n      return 'node';\n    case ClientPlatform.REACT_NATIVE:\n      return 'rn';\n    case ClientPlatform.WORKER:\n      return 'webworker';\n    case ClientPlatform.CORDOVA:\n      return 'cordova';\n    case ClientPlatform.WEB_EXTENSION:\n      return 'web-extension';\n    default:\n      return undefined;\n  }\n}\n\n/** @internal */\nexport function registerAuth(clientPlatform: ClientPlatform): void {\n  _registerComponent(\n    new Component(\n      _ComponentName.AUTH,\n      (container, { options: deps }: { options?: Dependencies }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const heartbeatServiceProvider =\n          container.getProvider<'heartbeat'>('heartbeat');\n        const appCheckServiceProvider =\n          container.getProvider<'app-check-internal'>('app-check-internal');\n        const { apiKey, authDomain } = app.options;\n\n        _assert(\n          apiKey && !apiKey.includes(':'),\n          AuthErrorCode.INVALID_API_KEY,\n          { appName: app.name }\n        );\n\n        const config: ConfigInternal = {\n          apiKey,\n          authDomain,\n          clientPlatform,\n          apiHost: DefaultConfig.API_HOST,\n          tokenApiHost: DefaultConfig.TOKEN_API_HOST,\n          apiScheme: DefaultConfig.API_SCHEME,\n          sdkClientVersion: _getClientVersion(clientPlatform)\n        };\n\n        const authInstance = new AuthImpl(\n          app,\n          heartbeatServiceProvider,\n          appCheckServiceProvider,\n          config\n        );\n        _initializeAuthInstance(authInstance, deps);\n\n        return authInstance;\n      },\n      ComponentType.PUBLIC\n    )\n      /**\n       * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n       * For why we do this, See go/firebase-next-auth-init\n       */\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Because all firebase products that depend on auth depend on auth-internal directly,\n       * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n       */\n      .setInstanceCreatedCallback(\n        (container, _instanceIdentifier, _instance) => {\n          const authInternalProvider = container.getProvider(\n            _ComponentName.AUTH_INTERNAL\n          );\n          authInternalProvider.initialize();\n        }\n      )\n  );\n\n  _registerComponent(\n    new Component(\n      _ComponentName.AUTH_INTERNAL,\n      container => {\n        const auth = _castAuth(\n          container.getProvider(_ComponentName.AUTH).getImmediate()!\n        );\n        return (auth => new AuthInterop(auth))(auth);\n      },\n      ComponentType.PRIVATE\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version, getVersionForPlatform(clientPlatform));\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp } from '@firebase/app';\nimport { deepEqual } from '@firebase/util';\nimport { Auth, Dependencies } from '../../model/public_types';\n\nimport { AuthErrorCode } from '../errors';\nimport { PersistenceInternal } from '../persistence';\nimport { _fail } from '../util/assert';\nimport { _getInstance } from '../util/instantiator';\nimport { AuthImpl } from './auth_impl';\n\n/**\n * Initializes an {@link Auth} instance with fine-grained control over\n * {@link Dependencies}.\n *\n * @remarks\n *\n * This function allows more control over the {@link Auth} instance than\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\n * need control over which persistence layer is used, or to minimize bundle\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n *\n * For example, if your app only uses anonymous accounts and you only want\n * accounts saved for the current session, initialize `Auth` with:\n *\n * ```js\n * const auth = initializeAuth(app, {\n *   persistence: browserSessionPersistence,\n *   popupRedirectResolver: undefined,\n * });\n * ```\n *\n * @public\n */\nexport function initializeAuth(app: FirebaseApp, deps?: Dependencies): Auth {\n  const provider = _getProvider(app, 'auth');\n\n  if (provider.isInitialized()) {\n    const auth = provider.getImmediate() as AuthImpl;\n    const initialOptions = provider.getOptions() as Dependencies;\n    if (deepEqual(initialOptions, deps ?? {})) {\n      return auth;\n    } else {\n      _fail(auth, AuthErrorCode.ALREADY_INITIALIZED);\n    }\n  }\n\n  const auth = provider.initialize({ options: deps }) as AuthImpl;\n\n  return auth;\n}\n\nexport function _initializeAuthInstance(\n  auth: AuthImpl,\n  deps?: Dependencies\n): void {\n  const persistence = deps?.persistence || [];\n  const hierarchy = (\n    Array.isArray(persistence) ? persistence : [persistence]\n  ).map<PersistenceInternal>(_getInstance);\n  if (deps?.errorMap) {\n    auth._updateErrorMap(deps.errorMap);\n  }\n\n  // This promise is intended to float; auth initialization happens in the\n  // background, meanwhile the auth object may be used by the app.\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance } from '@firebase/util';\nimport {\n  Auth,\n  NextOrObserver,\n  Persistence,\n  User,\n  CompleteFn,\n  ErrorFn,\n  Unsubscribe,\n  PasswordValidationStatus\n} from '../model/public_types';\nimport { _initializeRecaptchaConfig } from '../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { _castAuth } from '../core/auth/auth_impl';\n\nexport {\n  debugErrorMap,\n  prodErrorMap,\n  AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY as AuthErrorCodes\n} from './errors';\n\n// Non-optional auth methods.\n/**\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\n * `Auth` session and applies this type of persistence for future sign-in requests, including\n * sign-in with redirect requests.\n *\n * @remarks\n * This makes it easy for a user signing in to specify whether their session should be\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n * that are shared by other users or have sensitive data.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * setPersistence(auth, browserSessionPersistence);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param persistence - The {@link Persistence} to use.\n * @returns A `Promise` that resolves once the persistence change has completed\n *\n * @public\n */\nexport function setPersistence(\n  auth: Auth,\n  persistence: Persistence\n): Promise<void> {\n  return getModularInstance(auth).setPersistence(persistence);\n}\n\n/**\n * Loads the reCAPTCHA configuration into the `Auth` instance.\n *\n * @remarks\n * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n * verification flow should be triggered for each auth provider, into the\n * current Auth session.\n *\n * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n * verification, the SDK will transparently load the reCAPTCHA config and restart the\n * auth flows.\n *\n * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * initializeRecaptchaConfig(auth);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function initializeRecaptchaConfig(auth: Auth): Promise<void> {\n  return _initializeRecaptchaConfig(auth);\n}\n\n/**\n * Validates the password against the password policy configured for the project or tenant.\n *\n * @remarks\n * If no tenant ID is set on the `Auth` instance, then this method will use the password\n * policy configured for the project. Otherwise, this method will use the policy configured\n * for the tenant. If a password policy has not been configured, then the default policy\n * configured for all projects will be used.\n *\n * If an auth flow fails because a submitted password does not meet the password policy\n * requirements and this method has previously been called, then this method will use the\n * most recent policy available when called again.\n *\n * @example\n * ```javascript\n * validatePassword(auth, 'some-password');\n * ```\n *\n * @param auth The {@link Auth} instance.\n * @param password The password to validate.\n *\n * @public\n */\nexport async function validatePassword(\n  auth: Auth,\n  password: string\n): Promise<PasswordValidationStatus> {\n  const authInternal = _castAuth(auth);\n  return authInternal.validatePassword(password);\n}\n\n/**\n * Adds an observer for changes to the signed-in user's ID token.\n *\n * @remarks\n * This includes sign-in, sign-out, and token refresh events.\n * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nexport function onIdTokenChanged(\n  auth: Auth,\n  nextOrObserver: NextOrObserver<User>,\n  error?: ErrorFn,\n  completed?: CompleteFn\n): Unsubscribe {\n  return getModularInstance(auth).onIdTokenChanged(\n    nextOrObserver,\n    error,\n    completed\n  );\n}\n/**\n * Adds a blocking callback that runs before an auth state change\n * sets a new user.\n *\n * @param auth - The {@link Auth} instance.\n * @param callback - callback triggered before new user value is set.\n *   If this throws, it blocks the user from being set.\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n *   callback throws, allowing you to undo any side effects.\n */\nexport function beforeAuthStateChanged(\n  auth: Auth,\n  callback: (user: User | null) => void | Promise<void>,\n  onAbort?: () => void\n): Unsubscribe {\n  return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n}\n/**\n * Adds an observer for changes to the user's sign-in state.\n *\n * @remarks\n * To keep the old behavior, see {@link onIdTokenChanged}.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nexport function onAuthStateChanged(\n  auth: Auth,\n  nextOrObserver: NextOrObserver<User>,\n  error?: ErrorFn,\n  completed?: CompleteFn\n): Unsubscribe {\n  return getModularInstance(auth).onAuthStateChanged(\n    nextOrObserver,\n    error,\n    completed\n  );\n}\n/**\n * Sets the current language to the default device/browser preference.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function useDeviceLanguage(auth: Auth): void {\n  getModularInstance(auth).useDeviceLanguage();\n}\n/**\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n * {@link Auth} instance.\n *\n * @remarks\n * A new instance copy of the user provided will be made and set as currentUser.\n *\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n * like other sign in methods.\n *\n * The operation fails with an error if the user to be updated belongs to a different Firebase\n * project.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n * @param user - The new {@link User}.\n *\n * @public\n */\nexport function updateCurrentUser(\n  auth: Auth,\n  user: User | null\n): Promise<void> {\n  return getModularInstance(auth).updateCurrentUser(user);\n}\n/**\n * Signs out the current user.\n *\n * @remarks\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function signOut(auth: Auth): Promise<void> {\n  return getModularInstance(auth).signOut();\n}\n\n/**\n * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n *\n * @param auth - The {@link Auth} instance.\n * @param token - The Apple OAuth access token.\n *\n * @public\n */\nexport function revokeAccessToken(auth: Auth, token: string): Promise<void> {\n  const authInternal = _castAuth(auth);\n  return authInternal.revokeAccessToken(token);\n}\n\nexport { initializeAuth } from './auth/initialize';\nexport { connectAuthEmulator } from './auth/emulator';\n\n// credentials\nexport { AuthCredential } from './credentials';\nexport { EmailAuthCredential } from './credentials/email';\nexport { OAuthCredential } from './credentials/oauth';\nexport { PhoneAuthCredential } from './credentials/phone';\n\n// persistence\nexport { inMemoryPersistence } from './persistence/in_memory';\n\n// providers\nexport { EmailAuthProvider } from './providers/email';\nexport { FacebookAuthProvider } from './providers/facebook';\nexport { CustomParameters } from './providers/federated';\nexport { GoogleAuthProvider } from './providers/google';\nexport { GithubAuthProvider } from './providers/github';\nexport { OAuthProvider, OAuthCredentialOptions } from './providers/oauth';\nexport { SAMLAuthProvider } from './providers/saml';\nexport { TwitterAuthProvider } from './providers/twitter';\n\n// strategies\nexport { signInAnonymously } from './strategies/anonymous';\nexport {\n  signInWithCredential,\n  linkWithCredential,\n  reauthenticateWithCredential\n} from './strategies/credential';\nexport { signInWithCustomToken } from './strategies/custom_token';\nexport {\n  sendPasswordResetEmail,\n  confirmPasswordReset,\n  applyActionCode,\n  checkActionCode,\n  verifyPasswordResetCode,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword\n} from './strategies/email_and_password';\nexport {\n  sendSignInLinkToEmail,\n  isSignInWithEmailLink,\n  signInWithEmailLink\n} from './strategies/email_link';\nexport {\n  fetchSignInMethodsForEmail,\n  sendEmailVerification,\n  verifyBeforeUpdateEmail\n} from './strategies/email';\n\n// core\nexport { ActionCodeURL, parseActionCodeURL } from './action_code_url';\n\n// user\nexport {\n  updateProfile,\n  updateEmail,\n  updatePassword\n} from './user/account_info';\nexport { getIdToken, getIdTokenResult } from './user/id_token_result';\nexport { unlink } from './user/link_unlink';\nexport { getAdditionalUserInfo } from './user/additional_user_info';\n\n// Non-optional user methods.\nexport { reload } from './user/reload';\n/**\n * Deletes and signs out the user.\n *\n * @remarks\n * Important: this is a security-sensitive operation that requires the user to have recently\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n *\n * @public\n */\nexport async function deleteUser(user: User): Promise<void> {\n  return getModularInstance(user).delete();\n}\n"],"names":["stringToByteArray$1","str","out","p","i","length","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","this","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","Error","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","DecodeBase64StringError","_Error","_inherits","_super","_createSuper","_this","_classCallCheck","name","_createClass","_wrapNativeSuper","base64urlEncodeWithoutPadding","utf8Bytes","base64Encode","replace","base64Decode","e","console","error","getDefaultsFromGlobal","self","window","global","getGlobal","__FIREBASE_DEFAULTS__","getDefaults","process","defaultsJsonString","JSON","parse","getDefaultsFromEnvVariable","document","match","cookie","decoded","getDefaultsFromCookie","info","concat","getDefaultEmulatorHost","productName","_a","_b","emulatorHosts","getDefaultAppConfig","config","getExperimentalSetting","Deferred","_this2","reject","resolve","promise","Promise","key","value","callback","_this3","catch","getUA","navigator","isMobileCordova","test","isBrowserExtension","runtime","chrome","browser","undefined","id","isReactNative","isIE","ua","indexOf","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","preExist","DB_CHECK_NAME","request","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","message","FirebaseError","_Error2","_super2","code","customData","_this4","call","Object","setPrototypeOf","_assertThisInitialized","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","arguments","fullCode","template","data","PATTERN","_","replaceTemplate","fullMessage","isEmpty","obj","hasOwnProperty","deepEqual","a","b","aKeys","keys","bKeys","_i","_aKeys","k","includes","aProp","bProp","isObject","_i2","_bKeys","thing","querystring","querystringParams","params","_loop","_Object$entries$_i","_slicedToArray","_Object$entries","_i3","forEach","arrayVal","encodeURIComponent","entries","querystringDecode","split","token","_token$split","_token$split2","decodeURIComponent","extractQuerystring","url","queryStart","fragmentStart","substring","createSubscribe","executor","onNoObservers","proxy","ObserverProxy","subscribe","bind","_this5","observers","unsubscribes","observerCount","task","finalized","then","forEachObserver","observer","next","complete","nextOrObserver","_this6","methods","_step","_iterator","_createForOfIteratorHelper","s","n","done","method","err","f","implementsAnyMethods","noop","unsub","unsubscribeOne","finalError","fn","sendOne","_this7","_this8","getModularInstance","_delegate","idbProxyableTypes","cursorAdvanceMethods","instanceOfAny","object","constructors","some","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","set","has","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","_len2","args","_key2","apply","unwrap","_len3","_key3","storeNames","_len","_key","tx","sort","transformCachableValue","unlisten","removeEventListener","DOMException","addEventListener","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","Proxy","IDBRequest","success","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","useIndex","isWrite","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","storeName","_target","_args","_context","prev","store","index","shift","all","abrupt","sent","stop","_x","oldTraps","_objectSpread","PlatformLoggerServiceImpl","container","getProviders","map","provider","component","getComponent","type","isVersionServiceProvider","getImmediate","library","version","filter","logString","logger","Logger","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","_PLATFORM_LOG_STRING","_defineProperty","name$p","_apps","_serverApps","_components","_addComponent","app","addComponent","debug","_registerComponent","componentName","values","_step2","_iterator2","_getProvider","heartbeatController","getProvider","optional","triggerHeartbeat","_isFirebaseServerApp","settings","ERRORS","_ERRORS","ERROR_FACTORY","FirebaseAppImpl","options","_isDeleted","_options","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","Component","checkDestroyed","val","isDeleted","appName","SDK_VERSION","initializeApp","rawConfig","existingApp","_step3","ComponentContainer","_iterator3","newApp","getApp","registerVersion","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","warn","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","_ref","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","originalErrorMessage","readHeartbeatsFromIndexedDB","_x2","_readHeartbeatsFromIndexedDB","_callee8","idbGetError","_context8","computeKey","t0","writeHeartbeatsToIndexedDB","_x3","_x4","_writeHeartbeatsToIndexedDB","_callee9","heartbeatObject","_context9","put","appId","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","_triggerHeartbeat","platformLogger","agent","date","getPlatformInfoString","getUTCDateString","heartbeats","lastSentHeartbeatDate","singleDateHeartbeat","hbTimestamp","Date","valueOf","now","overwrite","_getHeartbeatsHeader","_callee2","_extractHeartbeatsFor","heartbeatsToSend","unsentEntries","headerString","_context2","extractHeartbeatsForHeader","stringify","toISOString","heartbeatsCache","_step5","maxSize","slice","_iterator5","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","_runIndexedDBEnvironmentCheck","_callee3","_context3","_read","_callee4","idbHeartbeatObject","_context4","_callee5","heartbeatsObject","existingHeartbeatsObject","_context5","_x5","_overwrite","_callee6","_context6","_toConsumableArray","_x6","_add","version$1","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","mode","props","Provider","instances","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","deferred","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","isComponentEager","_step$value","instanceDeferred","delete","services","from","INTERNAL","_delete","_delete2","opts","_opts$options","isComponentSet","_step2$value","existingCallbacks","Set","add","existingInstance","callbacks","_ref$options","invokeOnInitCallbacks","providers","setComponent","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","_ConsoleMethod","defaultLogHandler","logType","logLevel","_console","_logLevel","_logHandler","_userLogHandler","TypeError","_len4","_key4","_len5","_key5","_len6","_key6","Reflect","property","base","getPrototypeOf","desc","getOwnPropertyDescriptor","_prodErrorMap","prodErrorMap","_DEFAULT_AUTH_ERROR_FACTORY","logClient","_logWarn","msg","_logError","_fail","authOrCode","rest","createErrorInternal","_createError","_errorWithCustomMessage","auth","errorMap","_serverAppCurrentUserOperationNotSupportedError","_assertInstanceOf","constructor","_authOrCode$_errorFac","fullParams","_errorFactory","_assert","assertion","_key7","debugFail","failure","debugAssert","_getCurrentUrl","location","href","_isHttpOrHttps","_getCurrentScheme","protocol","Delay","shortDelay","longDelay","isMobile","onLine","Math","min","_emulatorUrl","path","emulator","startsWith","FetchProvider","fetchImpl","headersImpl","responseImpl","_fetch","fetch","toString","globalThis","Headers","Response","SERVER_ERROR_MAP","_SERVER_ERROR_MAP","DEFAULT_API_TIMEOUT_MS","_addTidIfNecessary","tenantId","_performApiRequest","_performApiRequest2","_callee104","customErrorMap","_args104","_context104","_performFetchWithErrorHandling","_callee103","body","query","headers","_context103","apiKey","_getAdditionalHeaders","languageCode","_getFinalTarget","apiHost","referrerPolicy","_x7","_performFetchWithErrorHandling2","_callee105","fetchFn","networkTimeout","response","json","errorMessage","_errorMessage$split","_errorMessage$split2","serverErrorCode","serverErrorMessage","authError","_context105","_canInitEmulator","NetworkTimeout","race","clearNetworkTimeout","_makeTaggedError","ok","toLowerCase","_performSignInRequest","_x8","_x9","_x10","_x11","_performSignInRequest2","_callee106","serverResponse","_args106","_context106","_serverResponse","host","apiScheme","_parseEnforcementState","enforcementStateStr","timer","setTimeout","clearTimeout","errorParams","email","phoneNumber","_tokenResponse","isEnterprise","grecaptcha","enterprise","RecaptchaConfig","siteKey","recaptchaEnforcementState","recaptchaKey","providerStr","enforcementState","getProviderEnforcementState","getRecaptchaConfig","_x13","_x14","_getRecaptchaConfig","_callee108","_context108","deleteAccount","_x15","_x16","_deleteAccount","_callee109","_context109","getAccountInfo","_x19","_x20","_getAccountInfo","_callee111","_context111","utcTimestampToDateString","utcTimestamp","Number","isNaN","getTime","toUTCString","_getIdTokenResult","_callee112","user","forceRefresh","userInternal","claims","firebase","signInProvider","_args112","_context112","getIdToken","_parseToken","exp","auth_time","iat","authTime","secondsStringToMilliseconds","issuedAtTime","expirationTime","signInSecondFactor","seconds","algorithm","payload","signature","_tokenExpiresIn","parsedToken","_logoutIfInvalidated","_x22","_x23","_logoutIfInvalidated2","_callee113","_args113","_context113","isUserInvalidated","currentUser","signOut","ProactiveRefresh","isRunning","timerId","errorBackoff","schedule","wasError","interval","stsTokenManager","max","getInterval","iteration","_iteration","UserMetadata","createdAt","lastLoginAt","_initializeTime","lastSignInTime","creationTime","metadata","_reloadWithoutSaving","_x24","_reloadWithoutSaving2","_callee114","idToken","coreAccount","newProviderData","providerData","oldIsAnonymous","newIsAnonymous","isAnonymous","updates","_context114","users","_notifyReloadListener","providerUserInfo","extractProviderData","mergeProviderData","passwordHash","uid","localId","displayName","photoURL","photoUrl","emailVerified","_reload","_callee115","_context115","_persistUserIfCurrent","_notifyListenersIfCurrent","original","newData","deduped","o","providerId","__rest","rawId","requestStsToken","_x26","_x27","_requestStsToken","_callee117","refreshToken","_context117","_callee116","_auth$config","tokenApiHost","_context116","accessToken","access_token","expiresIn","expires_in","refresh_token","revokeToken","_x28","_x29","_revokeToken","_callee118","_context118","StsTokenManager","updateTokensAndExpiration","_getToken","_args3","isExpired","refresh","_x30","_refresh","oldToken","_yield$requestStsToke","_x31","_x32","expiresInSec","toJSON","manager","assertStringOrUndefined","UserImpl","opt","proactiveRefresh","reloadUserInfo","reloadListener","_getIdToken","getToken","_x33","_x21","getIdTokenResult","_x25","reload","userInfo","_copy","_assign","newUser","_clone","_start","_stop","_updateTokensIfNecessary2","tokensRefreshed","_args6","updateFromServerResponse","_x34","_callee7","_context7","clearRefreshToken","_redirectEventId","_c","_d","_e","_f","_g","_h","plainObjectTokenManager","fromJSON","_fromIdTokenResponse2","idTokenResponse","_args8","_x35","_x36","_fromGetAccountInfoResponse2","updateFromIdToken","_x37","_x38","_x39","instanceCache","_getInstance","cls","Function","InMemoryPersistence","storage","_isAvailable2","_callee10","_context10","_set2","_callee11","_context11","_x40","_x41","_get2","_callee12","_context12","_x42","_remove2","_callee13","_context13","_x43","_listener","inMemoryPersistence","_persistenceKeyName","PersistenceUserManager","persistence","userKey","_this$auth","fullUserKey","fullPersistenceKey","boundEventHandler","_onStorageEvent","_addListener","_set","_getCurrentUser","_callee14","blob","_context14","_get","_fromJSON","_remove","_setPersistence","_callee15","newPersistence","_context15","getCurrentUser","removeCurrentUser","setCurrentUser","_x44","_removeListener","_create","_callee18","persistenceHierarchy","availablePersistences","selectedPersistence","userToMigrate","migrationHierarchy","_args18","_context18","_ref5","_callee16","_context16","_isAvailable","_x47","t1","finish","_shouldAllowMigration","_ref6","_callee17","_context17","_x48","_x45","_x46","_getBrowserName","userAgent","_isIEMobile","_isFirefox","_isBlackBerry","_isWebOS","_isSafari","_isChromeIOS","_isAndroid","matches","_isIOS","_isMobileBrowser","_getClientVersion","clientPlatform","reportedPlatform","frameworks","reportedFrameworks","AuthMiddlewareQueue","queue","onAbort","wrappedCallback","_runMiddleware","_callee19","nextUser","onAbortStack","beforeStateCallback","_iterator4","_step4","_context19","reverse","originalMessage","_x49","_getPasswordPolicy","_x50","_getPasswordPolicy2","_callee119","_args119","_context119","PasswordPolicyImpl","responseOptions","customStrengthOptions","minPasswordLength","maxPasswordLength","containsLowercaseCharacter","containsLowercaseLetter","containsUppercaseCharacter","containsUppercaseLetter","containsNumericCharacter","containsNonAlphanumericCharacter","allowedNonAlphanumericCharacters","forceUpgradeOnSignin","schemaVersion","password","status","isValid","passwordPolicy","validatePasswordLengthOptions","validatePasswordCharacterOptions","meetsMinPasswordLength","meetsMaxPasswordLength","passwordChar","updatePasswordCharacterOptionsStatuses","AuthImpl","heartbeatServiceProvider","appCheckServiceProvider","emulatorConfig","operations","authStateSubscription","Subscription","idTokenSubscription","beforeStateQueue","redirectUser","isProactiveRefreshEnabled","EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION","_isInitialized","_deleted","_initializationPromise","_popupRedirectResolver","_agentRecaptchaConfig","_tenantRecaptchaConfigs","_projectPasswordPolicy","_tenantPasswordPolicies","lastNotifiedUid","appVerificationDisabledForTesting","clientVersion","sdkClientVersion","popupRedirectResolver","_callee20","_context20","persistenceManager","_shouldInitProactively","_initialize","initializeCurrentUser","_onStorageEvent2","_callee21","_context21","assertedPersistence","_currentUser","_updateCurrentUser","_initializeCurrentUserFromIdToken","_callee22","_context22","_fromGetAccountInfoResponse","directlySetCurrentUser","_x51","_initializeCurrentUser","_callee23","previouslyStoredUser","futureCurrentUser","needsTocheckMiddleware","redirectUserEventId","storedUserEventId","_context23","authIdToken","initializeCurrentUserFromIdToken","authDomain","getOrInitRedirectPersistenceManager","tryRedirectSignIn","runMiddleware","_overrideRedirectResult","reloadAndSetCurrentUserOrClear","_x52","_tryRedirectSignIn","_callee24","redirectResolver","_context24","_completeRedirectFn","_setRedirectUser","_x53","_reloadAndSetCurrentUserOrClear","_callee25","_context25","_x54","navigatorLanguage","languages","language","_getUserLanguage","_delete3","_callee26","_context26","_updateCurrentUser2","_callee27","userExtern","_context27","_x55","_updateCurrentUser3","_callee29","skipBeforeStateCallbacks","_args29","_context29","_callee28","_context28","notifyAuthListeners","_x56","_signOut","_callee30","_context30","redirectPersistenceManager","_callee31","_context31","setPersistence","_validatePassword","_callee32","_context32","_getPasswordPolicyInternal","_updatePasswordPolicy","validatePassword","_x57","_updatePasswordPolicy2","_callee33","_context33","completed","registerStateListener","pushCallback","unsubscribe","onAuthStateChanged","_revokeAccessToken","_callee34","_context34","tokenType","_x58","_setRedirectUser2","_callee35","redirectManager","_context35","_x59","_x60","_getOrInitRedirectPersistenceManager","_callee36","resolver","_context36","_redirectPersistence","_x61","_redirectUserForId2","_callee38","_context38","_callee37","_context37","_x62","_persistUserIfCurrent2","_callee40","_this9","_context40","_callee39","_context39","_x63","_startProactiveRefresh","_stopProactiveRefresh","currentUid","subscription","_this10","cb","isUnsubscribed","addObserver","_directlySetCurrentUser","_callee41","_context41","_x64","action","framework","_getFrameworks","_getAdditionalHeaders2","_callee42","heartbeatsHeader","appCheckToken","_context42","getHeartbeatsHeader","_getAppCheckToken","_getAppCheckToken2","_callee43","appCheckTokenResult","_context43","_castAuth","_this11","externalJSProvider","loadJS","_callee44","_context44","recaptchaV2Script","recaptchaEnterpriseScript","gapiScript","_loadJS","_generateCallbackName","prefix","floor","random","RecaptchaEnterpriseVerifier","authExtern","_verify","_callee47","retrieveSiteKey","_retrieveSiteKey","retrieveRecaptchaToken","_this12","_args47","_context47","ready","execute","_callee46","_context46","_ref12","_callee45","_context45","clientType","_x66","_x67","_x65","injectRecaptchaFields","_x68","_x69","_x70","_injectRecaptchaFields","_callee120","captchaResp","verifier","captchaResponse","newRequest","_args120","_context120","verify","handleRecaptchaFlow","_x71","_x72","_x73","_x74","_handleRecaptchaFlow","_callee122","authInstance","actionName","actionMethod","requestWithRecaptcha","_context122","isProviderEnabled","_ref42","_callee121","_requestWithRecaptcha","_context121","log","_x289","connectAuthEmulator","authInternal","disableWarnings","extractProtocol","_extractHostAndPort","authority","exec","substr","port","hostAndPort","bracketedIPv6","parsePort","_hostAndPort$split","_hostAndPort$split2","extractHostAndPort","portStr","freeze","attachBanner","el","createElement","sty","style","innerText","position","width","backgroundColor","border","color","bottom","left","margin","zIndex","textAlign","classList","appendChild","readyState","emitEmulatorWarning","protocolEnd","AuthCredential","signInMethod","_auth","_idToken","linkEmailPassword","_x80","_x81","_linkEmailPassword","_callee126","_context126","signInWithPassword","_x84","_x85","_signInWithPassword","_callee128","_context128","signInWithEmailLink$1","_x96","_x97","_signInWithEmailLink$","_callee134","_context134","signInWithEmailLinkForLinking","_x98","_x99","_signInWithEmailLinkForLinking","_callee135","_context135","EmailAuthCredential","_AuthCredential","_email","_password","_this13","_tenantId","_callee48","_context48","returnSecureToken","oobCode","_x100","_getIdTokenResponse2","_callee49","_context49","_x101","_x102","_linkToIdToken2","_getIdTokenResponse","_fromEmailAndPassword","_fromEmailAndCode","signInWithIdp","_x103","_x104","_signInWithIdp","_callee136","_context136","OAuthCredential","_AuthCredential2","_this14","pendingToken","secret","nonce","buildRequest","autoCreate","requestUri","postBody","cred","oauthToken","oauthTokenSecret","sendPhoneVerificationCode","_x105","_x106","_sendPhoneVerificationCode","_callee137","_context137","_signInWithPhoneNumber$","_callee138","_context138","_linkWithPhoneNumber$","_callee139","_context139","temporaryProof","VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_","_verifyPhoneNumberForExisting","_callee140","apiRequest","_context140","operation","PhoneAuthCredential","_AuthCredential3","_super3","_this15","_x107","_x108","signInWithPhoneNumber$1","_makeVerificationRequest","_x109","_x110","linkWithPhoneNumber$1","_x111","_x112","verifyPhoneNumberForExisting","_this$params","verificationId","verificationCode","sessionInfo","_json","ActionCodeURL","actionLink","searchParams","parseMode","continueUrl","link","doubleDeepLink","iOSDeepLink","parseDeepLink","EmailAuthProvider","PROVIDER_ID","emailLink","actionCodeUrl","parseLink","EMAIL_PASSWORD_SIGN_IN_METHOD","EMAIL_LINK_SIGN_IN_METHOD","FederatedAuthProvider","defaultLanguageCode","customParameters","customOAuthParameters","BaseOAuthProvider","_FederatedAuthProvide","_super4","_this16","scopes","scope","FacebookAuthProvider","_BaseOAuthProvider2","_super6","_fromParams","FACEBOOK_SIGN_IN_METHOD","userCredential","credentialFromTaggedObject","_ref14","tokenResponse","oauthAccessToken","credential","GoogleAuthProvider","_BaseOAuthProvider3","_super7","_this17","addScope","GOOGLE_SIGN_IN_METHOD","_ref15","oauthIdToken","GithubAuthProvider","_BaseOAuthProvider4","_super8","GITHUB_SIGN_IN_METHOD","_ref16","TwitterAuthProvider","_BaseOAuthProvider5","_super11","TWITTER_SIGN_IN_METHOD","_ref18","UserCredentialImpl","operationType","_fromIdTokenResponse3","_callee50","userCred","_args50","_context50","_fromIdTokenResponse","providerIdForResponse","_x115","_x116","_x117","_forOperation2","_callee51","_context51","_updateTokensIfNecessary","_x118","_x119","_x120","MultiFactorError","_FirebaseError","_super12","_this19","_processCredentialSavingMfaContextIfNecessary","_getReauthenticationResolver","_fromErrorAndOperation","_link$1","_x124","_x125","_link$","_callee144","bypassAuthState","_args144","_context144","t2","t3","t4","t5","_linkToIdToken","t6","_forOperation","_reauthenticate","_x129","_x130","_reauthenticate2","_callee146","parsed","_args146","_context146","sub","_signInWithCredential","_x131","_x132","_signInWithCredential2","_callee147","_args147","_context147","startEnrollPhoneMfa","finalizeEnrollTotpMfa","STORAGE_AVAILABLE_KEY","BrowserPersistenceClass","storageRetriever","setItem","removeItem","getItem","BrowserLocalPersistence","_BrowserPersistenceCl","_super20","_this23","localStorage","poll","onStorageEvent","listeners","localCache","pollTimer","fallbackToPolling","_Object$keys","oldValue","_this24","detachListener","stopPolling","triggerListeners","storedValue","notifyListeners","documentMode","forAllChangedKeys","_oldValue","_Array$from","listener","_this25","setInterval","StorageEvent","clearInterval","startPolling","attachListener","size","_callee58","_context58","_get3","_getPrototypeOf","_x190","_x191","_set3","_get4","_callee59","_context59","_x192","_remove3","_callee60","_context60","_x193","browserLocalPersistence","BrowserSessionPersistence","_BrowserPersistenceCl2","_super21","sessionStorage","browserSessionPersistence","_allSettled","promises","_ref24","_callee61","_context61","fulfilled","reason","_x194","Receiver","eventTarget","handlersMap","handleEvent","_handleEvent","_callee63","messageEvent","_messageEvent$data","eventId","eventType","handlers","_context63","ports","postMessage","_ref25","_callee62","handler","_context62","origin","_x196","_x195","eventHandler","receivers","isListeningto","newInstance","_generateEventId","digits","Sender","messageChannel","port1","onMessage","_send2","_callee64","timeout","completionTimer","_this26","_args64","_context64","MessageChannel","start","ackTimer","port2","finally","removeMessageHandler","_x197","_x198","_window","_setWindowLocation","_isWorker","_getActiveServiceWorker","_getActiveServiceWorker2","_callee172","registration","_context172","serviceWorker","active","_getServiceWorkerController","controller","DB_OBJECTSTORE_NAME","DB_DATA_KEYPATH","DBPromise","_this27","getObjectStore","isReadWrite","_deleteDatabase","toPromise","_openDatabase","keyPath","_callee65","_context65","contains","_putObject","_x199","_x200","_x201","_putObject2","_callee173","_getObjectStore$put","_context173","getObject","_x202","_x203","_getObject","_callee174","_context174","_deleteObject","IndexedDBLocalPersistence","pendingWrites","sender","serviceWorkerReceiverAvailable","activeServiceWorker","_workerInitializationPromise","initializeServiceWorkerMessaging","_openDb2","_callee66","_context66","_withRetries2","_callee67","op","numAttempts","_context67","_openDb","_x204","_initializeServiceWorkerMessaging","_callee68","_context68","initializeReceiver","initializeSender","_initializeReceiver","_callee71","_this28","_context71","_subscribe","_ref27","_callee69","_origin","_context69","_poll","keyProcessed","_x205","_x206","_ref28","_callee70","_data","_context70","_x207","_x208","_initializeSender","_callee72","results","_context72","_send","_notifyServiceWorker","_callee73","_context73","_x209","_isAvailable3","_callee74","_context74","_withPendingWrite2","_callee75","write","_context75","_x210","_set4","_callee77","_this29","_context77","_withPendingWrite","_callee76","_context76","_withRetries","notifyServiceWorker","_x211","_x212","_get5","_callee78","_context78","_x213","_remove4","_callee80","_this30","_context80","_callee79","_context79","_x214","_poll2","_callee81","keysInResult","_step5$value","_Object$keys2","localKey","_context81","getAllRequest","getAll","fbase_key","_i4","_Array$from2","_this31","_callee82","_context82","indexedDBLocalPersistence","startSignInPhoneMfa","finalizeSignInTotpMfa","RECAPTCHA_VERIFIER_TYPE","_verifyPhoneNumber","_x226","_x227","_x228","_verifyPhoneNumber2","_callee178","recaptchaToken","phoneInfoOptions","session","mfaEnrollmentId","_response","_yield$sendPhoneVerif","_context178","phoneEnrollmentInfo","phoneSessionInfo","multiFactorHint","multiFactorUid","mfaPendingCredential","phoneSignInInfo","phoneResponseInfo","_reset","PhoneAuthProvider","phoneOptions","applicationVerifier","_fromVerification","_ref32","_fromTokenResponse","_withDefaultResolver","resolverOverride","PHONE_SIGN_IN_METHOD","IdpCredential","_AuthCredential5","_super22","_this39","_buildIdpRequest","sessionId","returnIdpCredential","_signIn","_reauth","_link","_x231","_link2","_callee180","_context180","AbstractPopupRedirectOperation","pendingPromise","eventManager","_this40","_ref33","_callee88","_context88","onExecution","registerConsumer","_x232","_x233","_onAuthEvent","_callee89","urlResponse","_context89","getIdpTask","_x234","unregisterAndCleanUp","unregisterConsumer","cleanUp","_POLL_WINDOW_CLOSE_TIMEOUT","signInWithPopup","_x235","_x236","_x237","_signInWithPopup","_callee181","resolverInternal","_context181","PopupOperation","executeNotNull","_AbstractPopupRedirec","_super23","_this41","authWindow","pollId","currentPopupAction","cancel","_executeNotNull","_callee90","_context90","_onExecution","_callee91","_this42","_context91","_openPopup","associatedEvent","_originValidation","_isIframeWebStorageSupported","isSupported","pollUserCancellation","_this43","closed","PENDING_REDIRECT_KEY","redirectOutcomeMap","RedirectAction","_AbstractPopupRedirec2","_super24","_this44","_execute2","_callee92","readyOutcome","_context92","_getAndClearPendingRedirectStatus","_onAuthEvent2","_callee93","_context93","_redirectUserForId","_x244","_onExecution2","_callee94","_context94","_x245","_x246","_getAndClearPendingRedirectStatus2","_callee184","hasPendingRedirect","_context184","pendingRedirectKey","resolverPersistence","_getRedirectResult","_x260","_x261","_getRedirectResult3","_callee190","resolverExtern","_args190","_context190","AuthEventManager","cachedEventUids","consumers","queuedRedirectEvent","hasHandledPotentialRedirect","lastProcessedEventTime","authEventConsumer","isEventForConsumer","sendToConsumer","saveEventToCache","_this45","hasEventBeenHandled","handled","consumer","isNullRedirectEvent","isRedirectEvent","onError","onAuthEvent","eventIdMatches","clear","eventUid","v","_ref34","_getProjectConfig","_x263","_getProjectConfig2","_callee192","_args192","_context192","IP_ADDRESS_REGEX","HTTP_REGEX","_validateOrigin2","_callee193","_yield$_getProjectCon","authorizedDomains","_iterator6","_step6","domain","_context193","matchDomain","expected","currentUrl","_URL","URL","hostname","ceUrl","escapedDomainPattern","RegExp","NETWORK_TIMEOUT","resetUnloadedGapiModules","beacon","___jsl","H","_i5","_Object$keys3","hint","r","L","CP","loadGapi","loadGapiIframe","gapi","load","iframes","getContext","ontimeout","Iframe","cbName","cachedGApiLoader","_loadGapi","PING_TIMEOUT","IFRAME_PATH","EMULATED_IFRAME_PATH","IFRAME_ATTRIBUTES","top","height","tabindex","EID_FROM_APIHOST","getIframeUrl","eid","fw","_openIframe","_x265","_openIframe2","_callee195","context","_context195","where","messageHandlersFilter","CROSS_ORIGIN_IFRAMES_FILTER","attributes","dontclear","iframe","_ref45","_callee194","networkError","networkErrorTimer","clearTimerAndResolve","_context194","restyle","setHideOnLeave","ping","_x291","_x292","BASE_POPUP_OPTIONS","resizable","statusbar","toolbar","AuthPopup","_open","screen","availHeight","availWidth","scrollbars","optionsString","reduce","accum","_ref35","_ref36","standalone","_isIOSStandalone","click","createEvent","initMouseEvent","dispatchEvent","openAsNewWindowIOS","newWin","focus","WIDGET_PATH","EMULATOR_WIDGET_PATH","FIREBASE_APP_CHECK_FRAGMENT_ID","_getRedirectUrl","_x266","_x267","_x268","_x269","_x270","_x271","_getRedirectUrl2","_callee196","authType","redirectUrl","additionalParams","_i6","paramsDict","_i7","_Object$keys4","_key8","appCheckTokenFragment","_context196","setDefaultLanguage","getCustomParameters","getScopes","tid","getHandlerBase","_ref37","WEB_STORAGE_SUPPORT_KEY","BrowserPopupRedirectResolver","eventManagers","originValidationPromises","_callee95","_context95","_x272","_x273","_x274","_x275","_openPopup2","_openRedirect2","_callee96","_context96","_x276","_x277","_x278","_x279","_this46","_this$eventManagers$k","initAndGetManager","_initAndGetManager","_callee97","_context97","register","iframeEvent","authEvent","onEvent","_x280","send","_x264","_validateOrigin","browserPopupRedirectResolver","MultiFactorAssertionImpl","factorId","_finalizeEnroll","_finalizeSignIn","PhoneMultiFactorAssertionImpl","_MultiFactorAssertion","_super25","_this47","finalizeEnrollPhoneMfa","phoneVerificationInfo","finalizeSignInPhoneMfa","PhoneMultiFactorGenerator","_fromCredential","FACTOR_ID","TotpMultiFactorGenerator","oneTimePassword","TotpMultiFactorAssertionImpl","_fromSecret","enrollmentId","_fromEnrollmentId","_generateSecret","_callee98","mfaSession","_context98","totpEnrollmentInfo","TotpSecret","_fromStartTotpMfaEnrollmentResponse","_x281","_MultiFactorAssertion2","_super26","otp","_this48","_callee99","_context99","totpVerificationInfo","_makeTotpVerificationInfo","_x282","_x283","_x284","_finalizeEnroll2","_callee100","_context100","_x285","_x286","_finalizeSignIn2","secretKey","hashingAlgorithm","codeLength","codeIntervalSeconds","enrollmentCompletionDeadline","accountName","issuer","useDefaults","_isEmptyString","totpSessionInfo","sharedSecretKey","verificationCodeLength","periodSec","finalizeEnrollmentTime","AuthInterop","internalListeners","assertAuthConfigured","_getToken2","_callee101","_context101","_x287","onIdTokenChanged","updateProactiveRefresh","authIdTokenMaxAge","lastPostedIdToken","mintCookieFactory","_ref39","_callee102","idTokenResult","idTokenAge","_context102","_x288","getAuth","deps","initialOptions","getOptions","initialize","initializeAuth","authTokenSyncPath","isSecureContext","authTokenSyncUrl","mintCookie","beforeAuthStateChanged","authEmulatorHost","setAttribute","onload","charset","getElementsByTagName","getScriptParentElement","_ref38","_app$options","hierarchy","_updateErrorMap","_initializeWithPersistence","_initializeAuthInstance","setInstantiationMode","setInstanceCreatedCallback","_instanceIdentifier","_instance","getVersionForPlatform"],"sourceRoot":""}